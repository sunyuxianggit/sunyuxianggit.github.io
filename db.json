{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/melody/source/melody-favicon.ico","path":"melody-favicon.ico","modified":1,"renderable":1},{"_id":"themes/melody/source/js/hexo-theme-melody.js","path":"js/hexo-theme-melody.js","modified":1,"renderable":1},{"_id":"themes/melody/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/melody/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/melody/source/img/algolia.svg","path":"img/algolia.svg","modified":1,"renderable":1},{"_id":"themes/melody/source/js/copy.js","path":"js/copy.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/fancybox.js","path":"js/fancybox.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/fireworks.js","path":"js/fireworks.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/head.js","path":"js/head.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/scroll.js","path":"js/scroll.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/sidebar.js","path":"js/sidebar.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/transition.js","path":"js/transition.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/melody/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/melody/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/anime.min.js","path":"js/third-party/anime.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","path":"js/third-party/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.min.js","path":"js/third-party/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","path":"js/third-party/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.min.js","path":"js/third-party/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","path":"js/third-party/reveal/head.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/markdown.min.js","path":"js/third-party/reveal/markdown.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/marked.min.js","path":"js/third-party/reveal/marked.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/math.min.js","path":"js/third-party/reveal/math.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/notes.min.js","path":"js/third-party/reveal/notes.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/reveal.min.js","path":"js/third-party/reveal/reveal.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/zoom.min.js","path":"js/third-party/reveal/zoom.min.js","modified":1,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/highlight.min.js","path":"js/third-party/reveal/highlight.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/melody/.eslintignore","hash":"719a633358c168ec04b544a5a306fc454471f72f","modified":1583837381158},{"_id":"themes/melody/.eslintrc","hash":"2c75ddb670b21591023b2c4f52ecfb02578b5eae","modified":1583837381159},{"_id":"themes/melody/FAQ.md","hash":"2e4871193be2bbade191c1064216072cbe61ab72","modified":1583837381161},{"_id":"themes/melody/.travis.demo.yml","hash":"977db46c56f95e0b475326ee7499890aa16bd971","modified":1583837381160},{"_id":"themes/melody/README.md","hash":"69b44680fc2cf884b29d44e279efacf5a3f5f386","modified":1583837381163},{"_id":"themes/melody/_config.yml","hash":"786c87007d38612b69e5e6c9ab64c456ca811f7e","modified":1583837381164},{"_id":"themes/melody/LICENSE","hash":"e7e7b7677bb19563a9013e936486bdefeb761d07","modified":1583837381162},{"_id":"themes/melody/package.json","hash":"0dc3179de85b18cbb351c03a3949b262030250f3","modified":1583837381226},{"_id":"themes/melody/stylus_format.json","hash":"53008fbf66531953489ab0f2ce166576b7ba1ab7","modified":1583837381329},{"_id":"themes/melody/scripts/hexo-plugins.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1583837381229},{"_id":"themes/melody/languages/default.yml","hash":"4a60ece6d7a3d23ac2966115835fdcfa7bd3e9e7","modified":1583837381166},{"_id":"themes/melody/languages/en.yml","hash":"4a60ece6d7a3d23ac2966115835fdcfa7bd3e9e7","modified":1583837381167},{"_id":"themes/melody/languages/zh-Hans.yml","hash":"efa9712848d8316b38270f9674d7392a640d6af1","modified":1583837381168},{"_id":"themes/melody/layout/archive.pug","hash":"f3198ed4d59ca9d0423060a428106a857247a8f8","modified":1583837381171},{"_id":"themes/melody/layout/category.pug","hash":"27fe85787ee1e4bba75a6eadbf86f7ffc58cb66a","modified":1583837381172},{"_id":"themes/melody/layout/gallery.pug","hash":"1470a86b329eb5c60d6fa6a7bafa25ddf1255f97","modified":1583837381173},{"_id":"themes/melody/layout/index.pug","hash":"d15a36b5c8f1bec367888edb358e70b47eb15ea9","modified":1583837381221},{"_id":"themes/melody/layout/page.pug","hash":"bbcd45cc14b69e260cf7bf851d1926dedc5cd3be","modified":1583837381222},{"_id":"themes/melody/layout/post.pug","hash":"e0d840ee90bf773e1dcc14e884c809822baefb09","modified":1583837381223},{"_id":"themes/melody/layout/slides.pug","hash":"1e84a92d5b854dd233e0b511d59c1cd7c8d647a1","modified":1583837381224},{"_id":"themes/melody/layout/tag.pug","hash":"6b5c5c08e9a6773a4fce8583fdf614a784beb045","modified":1583837381225},{"_id":"themes/melody/scripts/gallery-tag.js","hash":"b18e4a809de37da54ea914452ce4a24785fa7621","modified":1583837381229},{"_id":"themes/melody/scripts/replace-config.js","hash":"9d5378898a068e77b5e601c950b631144bd743cf","modified":1583837381231},{"_id":"themes/melody/source/melody-favicon.ico","hash":"1896318abb671b863a88719e6a73aaebc3f6e3f9","modified":1583837381328},{"_id":"source/_data/melody.yml","hash":"10ca0fd5c26df5cc4e22eaa76bac6f12d1797be8","modified":1583837381117},{"_id":"source/categories/index.md","hash":"ba6e88e9d378633c1503e7603fe8c78138a2a3b7","modified":1583837381151},{"_id":"source/tags/index.md","hash":"cbb0d61c61ee4009e30ed4b070a098b5dd3f7332","modified":1583837381154},{"_id":"source/_posts/Blender脚本学习笔记.md","hash":"3032c74655960bb80f0291a008666911fe41be8b","modified":1583837381119},{"_id":"source/_posts/Effective-Python.md","hash":"4f4e210004fa81d51d28ed3453b40c01a3cf6713","modified":1583842641400},{"_id":"source/_posts/GameCourse101.md","hash":"cada03a087eac469489c79a6fbc0ecc766555008","modified":1583842648902},{"_id":"source/_posts/Git-学习笔记.md","hash":"e3d2ebed911935e3558039e743649e984e639069","modified":1583837381130},{"_id":"source/_posts/Maya卡顿优化.md","hash":"15b4a3c70defd6356431d6ffb509253267bef062","modified":1583837381131},{"_id":"source/_posts/Python 进程和线程学习笔记.md","hash":"0b9c0b07e2fbb24f9bd979ea6600ad45cb28b8dd","modified":1583837381138},{"_id":"source/_posts/Python文件打包成可执行文件.md","hash":"c2f5f053fc543ae46b734136259fcbf2bb1fa33c","modified":1583837381139},{"_id":"source/_posts/Top 10 ways to make Maya go FASTER.md","hash":"4800fffa886b9b8e972106ac41aebed08835e8b5","modified":1583837381140},{"_id":"source/_posts/使用hexo创建个人blog网页的笔记.md","hash":"9893fb570ce4dcb0661591d41855334a282b402c","modified":1583837381141},{"_id":"source/_posts/图片测试.md","hash":"9df2c2cacdf8a49e3ce425ab7270e75a75b1d08c","modified":1583842686817},{"_id":"themes/melody/source/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1583837381275},{"_id":"themes/melody/layout/includes/additional-js.pug","hash":"7137f872dde2e44616098f92e1af6bc291e70bbe","modified":1583837381176},{"_id":"themes/melody/layout/includes/config.pug","hash":"42e523fef2e9f285d989d494f0a6fce485921719","modified":1583837381184},{"_id":"themes/melody/layout/includes/footer.pug","hash":"c5968d30a668c3d1b8e658d784b661799d3ba48a","modified":1583837381188},{"_id":"themes/melody/layout/includes/head.pug","hash":"4cf465d5ac4f335a6bc57cec29fddf9ac0943741","modified":1583837381193},{"_id":"themes/melody/layout/includes/header.pug","hash":"664705214dc167e7a323fea6e7874790d870fb3c","modified":1583837381194},{"_id":"themes/melody/layout/includes/layout.pug","hash":"3b4dc121038cbc6509621d9db4e7eafffb850fdc","modified":1583837381195},{"_id":"themes/melody/layout/includes/nav.pug","hash":"90ad9fdeb551f524eac6f25090346a884d13d2dd","modified":1583837381200},{"_id":"themes/melody/layout/includes/pagination.pug","hash":"a28c30fca4780a2afd5375f98833637b6b6e941a","modified":1583837381201},{"_id":"themes/melody/layout/includes/recent-posts.pug","hash":"f37dc3576cc45ad3da097b58f420b5b523d8a9a5","modified":1583837381202},{"_id":"themes/melody/layout/includes/sidebar.pug","hash":"4a531e4f09417e2172ebda39c7d7c856b3979ced","modified":1583837381212},{"_id":"themes/melody/source/css/index.styl","hash":"c2823ad6013df237993eea5cf190c313270da4db","modified":1583837381262},{"_id":"themes/melody/source/css/var.styl","hash":"7a1f4099b71741e3a156003234ef9a9a48b66abe","modified":1583837381263},{"_id":"themes/melody/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1583837381266},{"_id":"themes/melody/source/js/copy.js","hash":"8d21285129bf9638d18bacaca21945e24ec5b872","modified":1583837381271},{"_id":"themes/melody/source/js/fancybox.js","hash":"59f9356b60732438a40a8ab7af17a70171a60b00","modified":1583837381272},{"_id":"themes/melody/source/js/fireworks.js","hash":"f4f902392525133028f501bef2afa6b1045b5b9c","modified":1583837381273},{"_id":"themes/melody/source/js/head.js","hash":"1f0693d5d985b4bc5de16c79c5c9d4601260d617","modified":1583837381274},{"_id":"themes/melody/source/js/scroll.js","hash":"b45eb54e5c6ba67cea5bee365885735ca4e4f4f9","modified":1583837381277},{"_id":"themes/melody/source/js/sidebar.js","hash":"6906dcca3a6b9bd46489ca378bc1e74e454168ac","modified":1583837381283},{"_id":"themes/melody/source/js/transition.js","hash":"254820390dd5dfe9ee9097f3ef58e8c17b4bb280","modified":1583837381325},{"_id":"themes/melody/source/js/utils.js","hash":"5ff6609b1d674f7879f30e491bdd3c69139704da","modified":1583837381327},{"_id":"source/_posts/Effective-Python/2020-03-07-11-15-23.png","hash":"ef6c037a498ce92560ca0ff1993e6ebc63ca5ebc","modified":1583837381123},{"_id":"source/_posts/Effective-Python/2020-03-07-11-18-24.png","hash":"26ae41def9d23f7601e44e3f36136f8f00d679cc","modified":1583837381124},{"_id":"source/_posts/Effective-Python/2020-03-07-11-19-36.png","hash":"7dd89d3e5bb3075e66dd0ae56cd55b0590e8206e","modified":1583837381125},{"_id":"source/_posts/Effective-Python/2020-03-07-11-22-33.png","hash":"153bc4e2a09a7ffda504c0427e7744cde6e85de0","modified":1583837381126},{"_id":"source/_posts/Effective-Python/2020-03-07-14-32-20.png","hash":"ce270b55b9b7a01d26ff7e9f0f82915cb694a62b","modified":1583837381129},{"_id":"source/_posts/Effective-Python/2020-03-07-14-34-59.png","hash":"6768eb6d31c1ab8dc0600268cd5e0f6703033944","modified":1583837381130},{"_id":"source/_posts/GameCourse101/2020-03-08-12-50-12.png","hash":"cfedf3dab349a3b4b46fc5d3f416d630ad8e804a","modified":1583720311901},{"_id":"source/_posts/GameCourse101/2020-03-08-12-50-25.png","hash":"3e7c651a70a63cc4c1c6af1d51bb298a3ee0b829","modified":1583720311910},{"_id":"source/_posts/GameCourse101/2020-03-08-12-58-31.png","hash":"f075e4a17c3c4803a5d5aaf59db482d380927843","modified":1583720311911},{"_id":"source/_posts/GameCourse101/2020-03-08-13-02-30.png","hash":"68763a0d3a72ffe797838ff684f6f154aa8fbba0","modified":1583720311914},{"_id":"source/_posts/GameCourse101/2020-03-08-14-04-16.png","hash":"5e949a1428569b20155fc194add0a9edbd97360c","modified":1583720311951},{"_id":"source/_posts/GameCourse101/2020-03-08-14-37-55.png","hash":"6f20088f8bac49f73849a7796fcc35529eb3e8e3","modified":1583720311954},{"_id":"source/_posts/GameCourse101/2020-03-08-14-38-58.png","hash":"a2b59798c741cdd570534a1ddc4b2ded61aa8b7a","modified":1583720311956},{"_id":"source/_posts/GameCourse101/2020-03-08-15-48-53.png","hash":"fdceff9350674c2a7169eb153d3d6abcebab754c","modified":1583720311957},{"_id":"source/_posts/GameCourse101/2020-03-08-16-07-00.png","hash":"e3d9f1455cb3f33fc104251c810c83a1fcb9e29b","modified":1583720311961},{"_id":"source/_posts/GameCourse101/2020-03-08-20-44-32.png","hash":"c3cb7f2fec6264595e5aa0aba5179088b3e55846","modified":1583720311964},{"_id":"source/_posts/GameCourse101/2020-03-08-22-07-51.png","hash":"c6dcdcc8dcc6957d4a6dad161b0fc3532c8c0a98","modified":1583720311973},{"_id":"source/_posts/Maya卡顿优化/1558686550786.png","hash":"a6db7e5d9831cd9d1464bc7e64ebd7e743cdba2c","modified":1583837381134},{"_id":"source/_posts/Maya卡顿优化/1558686723618.png","hash":"9de0bf932b050ec7d413e6dc6532a137dbcab2eb","modified":1583837381135},{"_id":"source/_posts/Maya卡顿优化/1558687101606.png","hash":"da6b18d10a271a78015fbdbcc56112763df3b1ce","modified":1583837381136},{"_id":"source/_posts/Maya卡顿优化/1558688555512.png","hash":"188099e0ddc4c16041575886bfead22c0400908a","modified":1583837381137},{"_id":"themes/melody/layout/includes/gallery/script.pug","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1583837381192},{"_id":"themes/melody/source/img/avatar.png","hash":"0e9d365b378c91a77d9d700276113a10936e0d8e","modified":1583837381267},{"_id":"source/_posts/Effective-Python/2020-03-07-14-29-10.png","hash":"8694daf79f477e9156d598d3eb96247fe3e66791","modified":1583837381127},{"_id":"source/_posts/GameCourse101/2020-03-08-12-49-03.png","hash":"ccd429e2167313327adc2ef1fbce219ee007a4b1","modified":1583720311889},{"_id":"source/_posts/GameCourse101/2020-03-08-12-49-24.png","hash":"9d51bb8272c69e238b0a0f577da4544fbaed4897","modified":1583720311890},{"_id":"source/_posts/GameCourse101/2020-03-08-12-49-38.png","hash":"11285d3d580332e3d574256be0399dc1124408ae","modified":1583720311892},{"_id":"source/_posts/GameCourse101/2020-03-08-12-49-58.png","hash":"c05d82616188d360c8c80c1295fca0d0faa3c07c","modified":1583720311893},{"_id":"source/_posts/GameCourse101/2020-03-08-13-00-54.png","hash":"0bfd4ccf3dd6f9253bc7e5d3900579ebb3daf781","modified":1583720311912},{"_id":"source/_posts/GameCourse101/2020-03-08-13-08-11.png","hash":"40317519572c5b471ce8669d3e0e9e9e10c816d4","modified":1583720311915},{"_id":"source/_posts/GameCourse101/2020-03-08-13-11-22.png","hash":"146757565455e60dffe126a1132710c66cbfb8b2","modified":1583720311930},{"_id":"source/_posts/GameCourse101/2020-03-08-13-17-01.png","hash":"b6cc1c36560eb6d3ce611430e1a4a96fb138fcbe","modified":1583720311945},{"_id":"source/_posts/GameCourse101/2020-03-08-13-44-03.png","hash":"a18c72c66057a21c12a71815b9ddd3726ca3aeb8","modified":1583720311947},{"_id":"source/_posts/GameCourse101/2020-03-08-13-44-08.png","hash":"a18c72c66057a21c12a71815b9ddd3726ca3aeb8","modified":1583720311948},{"_id":"source/_posts/GameCourse101/2020-03-08-13-57-13.png","hash":"8431774240c60e8bb1d7963bc83abc9154652c69","modified":1583720311950},{"_id":"source/_posts/GameCourse101/2020-03-08-14-36-32.png","hash":"0b10fb2ad8865f34c8ac1f0d40cdab8eb28bd21b","modified":1583720311953},{"_id":"source/_posts/GameCourse101/2020-03-08-15-51-31.png","hash":"d4e73387d1e1710f4a96e80680c1f13958562292","modified":1583720311959},{"_id":"source/_posts/GameCourse101/2020-03-08-15-52-25.png","hash":"6c64d809d6c435c1c369df7e700a095e72510334","modified":1583720311960},{"_id":"source/_posts/GameCourse101/2020-03-08-16-47-04.png","hash":"fef0d7149eb7fbef5d08222179759a686887c783","modified":1583720311963},{"_id":"source/_posts/GameCourse101/2020-03-08-20-49-51.png","hash":"b13198cba6db6ce9d2643cd26e6ebcf3ab491a12","modified":1583720311965},{"_id":"source/_posts/GameCourse101/2020-03-08-20-53-06.png","hash":"02f50fb9bab2ef406f04f1d010f130bdd67f3f08","modified":1583720311967},{"_id":"source/_posts/GameCourse101/2020-03-08-21-50-50.png","hash":"227d2b851610f0b91c2a69aee4f0f819096d0e89","modified":1583720311968},{"_id":"source/_posts/GameCourse101/2020-03-08-21-53-53.png","hash":"5f50fe82d1a6b86fcfa4f6ad7684b091ae1ddffe","modified":1583720311970},{"_id":"source/_posts/GameCourse101/2020-03-08-22-01-06.png","hash":"9b22c9af831d694f768d74efa8dd7d716ea3d6a0","modified":1583720311971},{"_id":"source/_posts/GameCourse101/2020-03-08-22-12-11.png","hash":"2d23720b22e1e7410b68151cad94fb57ad59633f","modified":1583720311974},{"_id":"source/_posts/图片测试/Snipaste_2020-03-09_22-50-07.png","hash":"8be5e8f90673db830c8910fc15071972dba7964b","modified":1583837381145},{"_id":"themes/melody/layout/includes/comments/disqus.pug","hash":"0d753ace1190deebd9173279ab5369e4a30c53a8","modified":1583837381179},{"_id":"themes/melody/layout/includes/comments/gitalk.pug","hash":"590bc5af43bc55182157dbac65e7cd8bf39f410d","modified":1583837381180},{"_id":"themes/melody/layout/includes/comments/gitment.pug","hash":"97f524092775c9b7e618c691df40b4bce9e121ac","modified":1583837381181},{"_id":"themes/melody/layout/includes/comments/index.pug","hash":"b8c1344a2760a46774f1894967c879d72802556d","modified":1583837381182},{"_id":"themes/melody/layout/includes/comments/laibili.pug","hash":"1ffb80147fd443144ca6cf0230515f229eba6745","modified":1583837381182},{"_id":"themes/melody/layout/includes/comments/valine.pug","hash":"81e10998d5a2d28857f1c32e2d8b1ba1d84ce0f8","modified":1583837381183},{"_id":"themes/melody/layout/includes/count/busuanzi.pug","hash":"760be9ea92e5eb6959f37b76b9c13fb627893b0a","modified":1583837381187},{"_id":"themes/melody/layout/includes/gallery/layout.pug","hash":"8ff96c4f9afb416c5fc586c9585ae51cb6129529","modified":1583837381191},{"_id":"themes/melody/layout/includes/mixins/article-sort.pug","hash":"05c080cbd236b7d94765350cc699b92736ca4609","modified":1583837381198},{"_id":"themes/melody/layout/includes/mixins/slide.pug","hash":"cde884e97dd980bf05910934ce1d52ef3bd5df9c","modified":1583837381199},{"_id":"themes/melody/layout/includes/search/algolia.pug","hash":"3d2b2de0e199ab1fb151f41f2bbaac909f3d3d12","modified":1583837381205},{"_id":"themes/melody/layout/includes/search/index.pug","hash":"66b4f4e8119e987cd3f9907298689a1408a05859","modified":1583837381206},{"_id":"themes/melody/layout/includes/search/local-search.pug","hash":"205aff585f7763b61b8597c6121e6d8c5f9329a4","modified":1583837381207},{"_id":"themes/melody/layout/includes/share/index.pug","hash":"49cf38dc1f25f5646bf28568b08b4e35d5822648","modified":1583837381211},{"_id":"themes/melody/layout/includes/share/add-this.pug","hash":"055d41a0cc135b8fb02da8faa1df5faacb8fc13d","modified":1583837381210},{"_id":"themes/melody/layout/includes/share/share-js.pug","hash":"7d8660614f5b80e9078c184456f4742a520c5d56","modified":1583837381212},{"_id":"themes/melody/layout/includes/slide/layout.pug","hash":"ed853a81c74e8f21e5acca0cc4738bc4f204b751","modified":1583837381216},{"_id":"themes/melody/layout/includes/slide/script.pug","hash":"245823713e729136779af3f0cbb33bf1de5a5103","modified":1583837381217},{"_id":"themes/melody/layout/includes/third-party/katex.pug","hash":"d5ed449e505740620c8f8a110f124bec8cb46be0","modified":1583837381220},{"_id":"themes/melody/layout/includes/third-party/mathjax.pug","hash":"0afc0e488ef64f5cb27b9fc90b13f0f9e9f958a5","modified":1583837381221},{"_id":"themes/melody/source/css/_global/index.styl","hash":"a6ad6d2675e975883855a1fa3a634c7ba06d4685","modified":1583837381238},{"_id":"themes/melody/source/css/_highlight/diff.styl","hash":"bb83b379954dc2e7f5a9915e5ed50da7223e3efa","modified":1583837381241},{"_id":"themes/melody/source/css/_highlight/highlight.styl","hash":"26b397cd1528680095407c67f9c8ae069ed4eafa","modified":1583837381242},{"_id":"themes/melody/source/css/_highlight/theme.styl","hash":"89af8e4eb6adacee6693b3df46d87a0b1b2b0d2d","modified":1583837381243},{"_id":"themes/melody/source/css/_layout/comments.styl","hash":"3b32040e894978ec9be6569f44fd5557734f2340","modified":1583837381246},{"_id":"themes/melody/source/css/_layout/footer.styl","hash":"367a6d225d2a70aa45bcc48b38989c1efdbebfcc","modified":1583837381247},{"_id":"themes/melody/source/css/_layout/head.styl","hash":"9c14f6d686a00507212e15a0aabd8b9af5634e1d","modified":1583837381248},{"_id":"themes/melody/source/css/_layout/page.styl","hash":"c6da797bf07b5dbf2a94f48237e3e0dc7e976f37","modified":1583837381249},{"_id":"themes/melody/source/css/_layout/pagination.styl","hash":"ad5dc99b438588f92115592ed2d65a47c980720d","modified":1583837381250},{"_id":"themes/melody/source/css/_layout/post.styl","hash":"5d6d635ca50c762a2ab2cdf8c82b2790b34bf275","modified":1583837381251},{"_id":"themes/melody/source/css/_layout/sidebar.styl","hash":"29b02d3c319d84ab98dddec449f4bc83fbfdad36","modified":1583837381252},{"_id":"themes/melody/source/css/_search/algolia.styl","hash":"0168c78d28fbc8996ad9e1764457a6526404515b","modified":1583837381255},{"_id":"themes/melody/source/css/_search/index.styl","hash":"b16e4c15ad5844096f427eb3bdb49c5bb0bbcaf7","modified":1583837381256},{"_id":"themes/melody/source/css/_search/local-search.styl","hash":"adb2663fcfee1c84461231472f228aa82c6478bd","modified":1583837381257},{"_id":"themes/melody/source/css/_third-party/jquery.fancybox.min.css","hash":"f9c94ec04062a1bfe1ef894c49e6ec33fa121778","modified":1583837381260},{"_id":"themes/melody/source/css/_third-party/normalize.min.css","hash":"e12eef6d6811c132f4f2fcf6c936be384191bcaf","modified":1583837381261},{"_id":"themes/melody/source/js/search/algolia.js","hash":"8a6673cb1616b50a5ac8b2dc20fb3475bc32039f","modified":1583837381281},{"_id":"themes/melody/source/js/search/local-search.js","hash":"a642a93fb52ebc87f05e5d3cee38618013fda539","modified":1583837381282},{"_id":"themes/melody/source/js/third-party/anime.min.js","hash":"7c9416c1b444773b2d82e797131d6047364645a3","modified":1583837381287},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","hash":"0acabccbb20d722141fa15b37d535807092b2c88","modified":1583837381289},{"_id":"themes/melody/source/js/third-party/velocity.min.js","hash":"15a9dc404e02f2cd9b46cc71293b65671976567b","modified":1583837381323},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1583837381324},{"_id":"themes/melody/source/js/third-party/jquery.min.js","hash":"67bdacbd077ee59f411109fd119ee9f58db15a5f","modified":1583837381291},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","hash":"e34a3faf6e51034de612d15700e059fe82dba310","modified":1583837381301},{"_id":"themes/melody/source/js/third-party/reveal/markdown.min.js","hash":"859d70cd7c459819b90fe27afb940d16ecff6614","modified":1583837381314},{"_id":"themes/melody/source/js/third-party/reveal/marked.min.js","hash":"abd5391551b7b4e0cc0511c4b5c5ccfe66100f1b","modified":1583837381315},{"_id":"themes/melody/source/js/third-party/reveal/math.min.js","hash":"779c98dbd83a528f27ea4b9f2d420c957c0939ba","modified":1583837381317},{"_id":"themes/melody/source/js/third-party/reveal/notes.min.js","hash":"4bb2925b111467791fdef3c4e4b41993d59ce90f","modified":1583837381318},{"_id":"themes/melody/source/js/third-party/reveal/reveal.min.js","hash":"d8377a86451712488dea87caf5acbf8e97aa991f","modified":1583837381320},{"_id":"themes/melody/source/js/third-party/reveal/zoom.min.js","hash":"aca47bf417d451c4d364c6eb287a230e4b462b17","modified":1583837381321},{"_id":"source/_posts/图片测试/Snipaste_2020-03-09_22-50-25.png","hash":"623322f58544128fd42966ddae26ecea0f0cc25b","modified":1583837381149},{"_id":"themes/melody/source/js/third-party/reveal/highlight.min.js","hash":"10dd530e712a67f25cf27845213c0f28d2fe9e4d","modified":1583837381312},{"_id":"public/atom.xml","hash":"1eb5ad829661cab946ae8dc1b875754cf9d24b79","modified":1583842731535},{"_id":"public/sitemap.xml","hash":"72aef4b7fa5a4a4ce202aedf51b637db1ef310f4","modified":1583842731535},{"_id":"public/categories/index.html","hash":"f08db60708392775a07006c16eecba790c842acc","modified":1583842731535},{"_id":"public/tags/index.html","hash":"3db20ca4be28ab296e7679c76eea6d6e20654945","modified":1583842731535},{"_id":"public/2020/03/10/Top 10 ways to make Maya go FASTER/index.html","hash":"b40236a767a99969e9c8927b1b234d60fb0c2283","modified":1583842731535},{"_id":"public/2020/03/10/Python文件打包成可执行文件/index.html","hash":"e194a07078c23cef342d951fa6196e6585e42f7c","modified":1583842731535},{"_id":"public/2020/03/10/Blender脚本学习笔记/index.html","hash":"8a63c1dd2f307aaf49c3ce13b239bd49390088c9","modified":1583842731535},{"_id":"public/2020/03/09/Maya卡顿优化/index.html","hash":"3db766e1ecd3b1cafbf6e0b4940fa8f20790ebf5","modified":1583842731535},{"_id":"public/2020/03/09/图片测试/index.html","hash":"79912cc44b1dd7cfced06f9a3945e8857e32379a","modified":1583842731535},{"_id":"public/2019/12/03/Git-学习笔记/index.html","hash":"e155b228414a943e35b0843b445b85935d418301","modified":1583842731535},{"_id":"public/2019/12/01/使用hexo创建个人blog网页的笔记/index.html","hash":"a5bfd691b0fab52881fa802d2d035484c05e6357","modified":1583842731535},{"_id":"public/archives/index.html","hash":"ac32a04c2bb3917b2a488c50378df204fa1ea8b9","modified":1583842731535},{"_id":"public/archives/2019/index.html","hash":"49d926f555df317df5c2f5bdd00250f2a719f485","modified":1583842731535},{"_id":"public/archives/2019/12/index.html","hash":"527551a6a21c38482c83ac67d2ef8bf610e149f6","modified":1583842731535},{"_id":"public/archives/2020/index.html","hash":"70c422036e64f35fa58de50a7aa0f0d8b6bef440","modified":1583842731535},{"_id":"public/archives/2020/03/index.html","hash":"e8ae60d11b50903e22d8bff21d87a54aa15efe7e","modified":1583842731535},{"_id":"public/tags/python/index.html","hash":"2fb5fae098b7d4efef1c6d40041e3cfa404a33ed","modified":1583842731535},{"_id":"public/tags/Maya/index.html","hash":"3c654534ec167053f783852de0e62289f5531304","modified":1583842731535},{"_id":"public/tags/computer-graphics/index.html","hash":"ef7d9b8187f533d436b2cebee36c758f1058ef44","modified":1583842731535},{"_id":"public/tags/个人笔记/index.html","hash":"73c352dbd6a514339107b9708d1c8abfd9ce8472","modified":1583842731535},{"_id":"public/2020/03/10/Effective-Python/index.html","hash":"3c5e80756308ce0b15ae36052ae4af630cca3ce5","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/index.html","hash":"f98097a149fa82409eea3750cc03e02b4cc8c23f","modified":1583842731535},{"_id":"public/2020/03/10/Python 进程和线程学习笔记/index.html","hash":"6e3f5ede4d8322bed34c2ec47e4d0078c5dc09ce","modified":1583842731535},{"_id":"public/index.html","hash":"4b02b054eb2d18bd701e51373a48ef5d0ff9289d","modified":1583842731535},{"_id":"public/tags/misc/index.html","hash":"244de1fe795e013ed567406e0e27bd1d2b7c0d85","modified":1583842731535},{"_id":"public/melody-favicon.ico","hash":"1896318abb671b863a88719e6a73aaebc3f6e3f9","modified":1583842731535},{"_id":"public/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1583842731535},{"_id":"public/2020/03/09/Maya卡顿优化/1558686550786.png","hash":"a6db7e5d9831cd9d1464bc7e64ebd7e743cdba2c","modified":1583842731535},{"_id":"public/2020/03/09/Maya卡顿优化/1558686723618.png","hash":"9de0bf932b050ec7d413e6dc6532a137dbcab2eb","modified":1583842731535},{"_id":"public/2020/03/09/Maya卡顿优化/1558687101606.png","hash":"da6b18d10a271a78015fbdbcc56112763df3b1ce","modified":1583842731535},{"_id":"public/2020/03/09/Maya卡顿优化/1558688555512.png","hash":"188099e0ddc4c16041575886bfead22c0400908a","modified":1583842731535},{"_id":"public/2020/03/10/Effective-Python/2020-03-07-11-15-23.png","hash":"ef6c037a498ce92560ca0ff1993e6ebc63ca5ebc","modified":1583842731535},{"_id":"public/2020/03/10/Effective-Python/2020-03-07-11-18-24.png","hash":"26ae41def9d23f7601e44e3f36136f8f00d679cc","modified":1583842731535},{"_id":"public/2020/03/10/Effective-Python/2020-03-07-11-19-36.png","hash":"7dd89d3e5bb3075e66dd0ae56cd55b0590e8206e","modified":1583842731535},{"_id":"public/2020/03/10/Effective-Python/2020-03-07-11-22-33.png","hash":"153bc4e2a09a7ffda504c0427e7744cde6e85de0","modified":1583842731535},{"_id":"public/2020/03/10/Effective-Python/2020-03-07-14-32-20.png","hash":"ce270b55b9b7a01d26ff7e9f0f82915cb694a62b","modified":1583842731535},{"_id":"public/2020/03/10/Effective-Python/2020-03-07-14-34-59.png","hash":"6768eb6d31c1ab8dc0600268cd5e0f6703033944","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-12-49-03.png","hash":"ccd429e2167313327adc2ef1fbce219ee007a4b1","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-12-50-12.png","hash":"cfedf3dab349a3b4b46fc5d3f416d630ad8e804a","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-13-02-30.png","hash":"68763a0d3a72ffe797838ff684f6f154aa8fbba0","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-12-58-31.png","hash":"f075e4a17c3c4803a5d5aaf59db482d380927843","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-14-37-55.png","hash":"6f20088f8bac49f73849a7796fcc35529eb3e8e3","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-14-38-58.png","hash":"a2b59798c741cdd570534a1ddc4b2ded61aa8b7a","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-15-48-53.png","hash":"fdceff9350674c2a7169eb153d3d6abcebab754c","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-16-07-00.png","hash":"e3d9f1455cb3f33fc104251c810c83a1fcb9e29b","modified":1583842731535},{"_id":"public/img/avatar.png","hash":"0e9d365b378c91a77d9d700276113a10936e0d8e","modified":1583842731535},{"_id":"public/2020/03/10/Effective-Python/2020-03-07-14-29-10.png","hash":"8694daf79f477e9156d598d3eb96247fe3e66791","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-12-49-24.png","hash":"9d51bb8272c69e238b0a0f577da4544fbaed4897","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-12-49-38.png","hash":"11285d3d580332e3d574256be0399dc1124408ae","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-13-00-54.png","hash":"0bfd4ccf3dd6f9253bc7e5d3900579ebb3daf781","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-13-11-22.png","hash":"146757565455e60dffe126a1132710c66cbfb8b2","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-14-04-16.png","hash":"5e949a1428569b20155fc194add0a9edbd97360c","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-16-47-04.png","hash":"fef0d7149eb7fbef5d08222179759a686887c783","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-20-49-51.png","hash":"b13198cba6db6ce9d2643cd26e6ebcf3ab491a12","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-20-44-32.png","hash":"c3cb7f2fec6264595e5aa0aba5179088b3e55846","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-20-53-06.png","hash":"02f50fb9bab2ef406f04f1d010f130bdd67f3f08","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-21-50-50.png","hash":"227d2b851610f0b91c2a69aee4f0f819096d0e89","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-21-53-53.png","hash":"5f50fe82d1a6b86fcfa4f6ad7684b091ae1ddffe","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-22-07-51.png","hash":"c6dcdcc8dcc6957d4a6dad161b0fc3532c8c0a98","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-22-01-06.png","hash":"9b22c9af831d694f768d74efa8dd7d716ea3d6a0","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-22-12-11.png","hash":"2d23720b22e1e7410b68151cad94fb57ad59633f","modified":1583842731535},{"_id":"public/2020/03/09/图片测试/Snipaste_2020-03-09_22-50-07.png","hash":"8be5e8f90673db830c8910fc15071972dba7964b","modified":1583842731535},{"_id":"public/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1583842731535},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1583842731535},{"_id":"public/js/copy.js","hash":"8d5080cd13ef6b50f5c0c22c140bba44cc5ee7fc","modified":1583842731535},{"_id":"public/js/fancybox.js","hash":"cb63b81c05fcf1cee9f41befd84c41eeb55e5fce","modified":1583842731535},{"_id":"public/js/fireworks.js","hash":"17d5770d46d9b531b675b129835561146290af83","modified":1583842731535},{"_id":"public/js/head.js","hash":"212a32f824cadea0167bf4204c9714df5b7e5f5d","modified":1583842731535},{"_id":"public/js/transition.js","hash":"998c3bb6523a248d4dd4d747510c03a914a6378d","modified":1583842731535},{"_id":"public/js/scroll.js","hash":"50aee3035949bbc178eafd86adf19fd51916640d","modified":1583842731535},{"_id":"public/js/sidebar.js","hash":"a42109c5a69dedc87e1aaf8cb2383fd43069677e","modified":1583842731535},{"_id":"public/js/utils.js","hash":"f514662ad80803e1bb5f6bc653c4b9ad06ea4932","modified":1583842731535},{"_id":"public/js/search/local-search.js","hash":"b7e77c27097d9d3ced13618912069d1ddf1cd64a","modified":1583842731535},{"_id":"public/js/search/algolia.js","hash":"8d2cc7ac4a015563344a3981c3040d308489935c","modified":1583842731535},{"_id":"public/js/third-party/anime.min.js","hash":"3c46c9597c721644a515c1c54ab13f46406657f7","modified":1583842731535},{"_id":"public/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1583842731535},{"_id":"public/js/third-party/reveal/head.min.js","hash":"95c9de30444117adbbb3218070fda00af187a76a","modified":1583842731535},{"_id":"public/js/third-party/reveal/markdown.min.js","hash":"859d70cd7c459819b90fe27afb940d16ecff6614","modified":1583842731535},{"_id":"public/js/third-party/reveal/math.min.js","hash":"779c98dbd83a528f27ea4b9f2d420c957c0939ba","modified":1583842731535},{"_id":"public/js/third-party/reveal/notes.min.js","hash":"4bb2925b111467791fdef3c4e4b41993d59ce90f","modified":1583842731535},{"_id":"public/js/third-party/reveal/zoom.min.js","hash":"aca47bf417d451c4d364c6eb287a230e4b462b17","modified":1583842731535},{"_id":"public/css/index.css","hash":"96d364e04dda70347cfa187453a75726b9429540","modified":1583842731535},{"_id":"public/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1583842731535},{"_id":"public/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1583842731535},{"_id":"public/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1583842731535},{"_id":"public/js/third-party/reveal/marked.min.js","hash":"37f3186f93ec854f56bf745a5988a89225e8da6c","modified":1583842731535},{"_id":"public/js/third-party/reveal/reveal.min.js","hash":"d8377a86451712488dea87caf5acbf8e97aa991f","modified":1583842731535},{"_id":"public/js/third-party/reveal/highlight.min.js","hash":"10dd530e712a67f25cf27845213c0f28d2fe9e4d","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-12-50-25.png","hash":"3e7c651a70a63cc4c1c6af1d51bb298a3ee0b829","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-13-17-01.png","hash":"b6cc1c36560eb6d3ce611430e1a4a96fb138fcbe","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-13-44-08.png","hash":"a18c72c66057a21c12a71815b9ddd3726ca3aeb8","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-14-36-32.png","hash":"0b10fb2ad8865f34c8ac1f0d40cdab8eb28bd21b","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-12-49-58.png","hash":"c05d82616188d360c8c80c1295fca0d0faa3c07c","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-13-44-03.png","hash":"a18c72c66057a21c12a71815b9ddd3726ca3aeb8","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-13-57-13.png","hash":"8431774240c60e8bb1d7963bc83abc9154652c69","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-15-51-31.png","hash":"d4e73387d1e1710f4a96e80680c1f13958562292","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-15-52-25.png","hash":"6c64d809d6c435c1c369df7e700a095e72510334","modified":1583842731535},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-13-08-11.png","hash":"40317519572c5b471ce8669d3e0e9e9e10c816d4","modified":1583842731535},{"_id":"public/2020/03/09/图片测试/Snipaste_2020-03-09_22-50-25.png","hash":"623322f58544128fd42966ddae26ecea0f0cc25b","modified":1583842731535}],"Category":[],"Data":[{"_id":"melody","data":{"theme_color":{"enable":true,"main":"#2d6b96","paginator":"#6AA7D2","button_hover":"#3B8BC4","text_selection":"#6AA7D2","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#6AA7D2","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"文章":"/","归档":"/archives"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":true,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":null,"top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2013,"footer_custom_text":"Hi, welcome to my <a href=\"https://sunyuxianggit.github.io/\">blog</a>!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":true,"url":"https://github.com/sunyuxianggit","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}],"Page":[{"title":"分类","date":"2019-12-15T07:21:30.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-12-15 15:21:30\n---\n","updated":"2020-03-10T10:49:41.151Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck7lv2jl00000ycp443jy2fkp","content":"","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#2d6b96","paginator":"#6AA7D2","button_hover":"#3B8BC4","text_selection":"#6AA7D2","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#6AA7D2","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"文章":"/","归档":"/archives"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":true,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":null,"top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2013,"footer_custom_text":"Hi, welcome to my <a href=\"https://sunyuxianggit.github.io/\">blog</a>!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":true,"url":"https://github.com/sunyuxianggit","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"SunYuxiangのBlog","subtitle":"好记性,不如烂笔头.今天你要写点什么？","description":"","author":"Sun Yuxiang","language":"zh-Hans","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/sunyuxianggit/sunyuxianggit.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"category_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"","more":""},{"title":"标签","date":"2019-12-15T07:19:36.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-12-15 15:19:36\n---\n","updated":"2020-03-10T10:49:41.154Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck7lv2jl90002ycp40jn52n13","content":"","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#2d6b96","paginator":"#6AA7D2","button_hover":"#3B8BC4","text_selection":"#6AA7D2","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#6AA7D2","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"文章":"/","归档":"/archives"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":true,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":null,"top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2013,"footer_custom_text":"Hi, welcome to my <a href=\"https://sunyuxianggit.github.io/\">blog</a>!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":true,"url":"https://github.com/sunyuxianggit","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"SunYuxiangのBlog","subtitle":"好记性,不如烂笔头.今天你要写点什么？","description":"","author":"Sun Yuxiang","language":"zh-Hans","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/sunyuxianggit/sunyuxianggit.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"category_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"","more":""}],"Post":[{"_content":"# Blender脚本学习笔记\n\n### 编辑器\n\n- 安装python3.0以上(Blender 2.8是 python3.x)\n\n- Vscode 安装python 和 blender Development 插件\n\n- 终端安装 fake-bpy 包``pip install fake-bpy-module-2.80``\n\n   https://github.com/nutti/fake-bpy-module\n\n  安装完上面这些，vscode里面就会有自动补全\n\n  Debug\n\n- ctrl + shift + P, select \"Blender: Start\"\n\n- 选择你的blender安装路径, vscode会连接到blender\n\n- ctrl + shift + P, \"Blender: Run script\" 并且可以使用断点调试\n\n   <!-- more -->\n\n\n### 插件路径\n\n- 目录：user\\AppData\\Roaming\\Blender Foundation\\Blender\\scripts\\addons,代表非系统原生的用户插件,blender所有安装的外部插件都会被解压放置到这个文件夹下。\n\n  安装插件可以在blender的addon界面直接选择zip文件安装，也可以把插件文件夹直接拖入此目录。\n\n- 目录：D:\\blender-2.81a\\2.81\\scripts\\addons\n\n  第二个是软件原生插件路径，不建议将自己写的插件放入此地，此地不少系统插件的代码可在以后做参考用，值得了解。\n\n### 如何查看命令 \n\n- 类似maya 直接执行某个功能，看info输出命令（A+X\t清空nfo）\n- 选中命令直接 Copy Data Path.\n- 鼠标悬停在某个命令上看提示，如果没有提示，要去perfence里面的interface下勾选Python Tooltips.\n- 控制台直接输入``dir（某个模块名）``查看输出\n- 打开blender的text editor，很多模板文件可供使用：\n- 用python console中的.后代码提示快捷键自动补全查看方法（ctrl+space）\n- 查询api\n- 全球最大爱好者论坛https://blender.stackexchange.com/\n- 查看各类开源插件\n\n### 基础知识\n\n- bpy 意思是 blender python\n\n- 常规得到某个物体信息流程 \n\n  1 viewport选中物体 \n\n  2 查看Transform的提示 \n\n  3 调用各种信息 类似 .location\n\n常用命令\n\n``bpy.context.`` 正文，当前环境的所有内容的意思\n\n``bpy.context.object`` 物体\n\n``mesh = bpy.data.objects[\"mesh\"]`` Mesh变量存储物体mesh\n\n``bpy.ops.object.select_all(action='SELECT')``全选命令\n\n``bpy.ops.object.select_all(action='DESELECT')``全不选命令\n\n``bpy.context.view_layer.objects.active = mesh``大纲选中，激活物体\n\n``bpy.context.object.location`` 拿到选中物体的世界坐标\n\n``bpy.context.object.location.z``拿到选中物体的世界坐标中的Z坐标数值\n\n``bpy.context.object.location.z += random()`` 选中物体的世界坐标中的Z坐标数值随机加一个数\n\n``bpy.context.object.name``查看选中物体的名字\n\n``bpy.ops.object.duplicate(linked=False,mode='TRANSLATION')``复制模型\n\n``bpy.ops.object.modifier_add(type='DECIMATE')``添加编辑器\n\n``bpy.context.object.modifiers[\"Decimate\"].ratio = 0.1``设置编辑器参数\n\n``bpy.ops.object.modifier_apply(apply_as='DATA', modifier=\"Decimate\")``#应用编辑器\n\n``bpy.context.object.name = \"要改的名字\"`` 选中物体的名字\n\n``bpy.ops.mesh.primitive_cube_add()``创建box\n\n``bpy.context.object.active_material``返回当前选择物体的材质球\n\n``bpy.data.materials.get(材质球名称字符串)``拿到当前场景的某个材质\n\n``bpy.context.view_layer.objects.active.material_slots.data.active_material= 某个材质`` 给当前激活的物体材质球插槽赋予某个材质\n\n``bpy.ops.wm.save_mainfile(filepath=\"E:\\\\Test\\\\testsave.blend\") ``存储当前文件\n\n``bpy.ops.wm.open_mainfile(filepath=BlendFilePath)`` 打开文件\n\n得到当前版本的blender文件夹路径\n\n```\nimport sys\nargv = sys.argv #当前blender的路径例：['D:\\\\blender-2.81a\\\\blender.exe']\n```\n\n遍历列表选中物体：\n\n```\nfor i in bpy.context.visible_objects:#迭代所有可见物体\n\tif i.name == \"要选物体的名字\":\n\t\ti.select_set(state=True)\nfor i in bpy.context.visible_objects:\n    if i.type == \"MESH\":#判断物体类型是模型\n        bpy.context.view_layer.objects.active = i #当前激活物体定义为i\n        bpy.ops.object.mode_set(mode='EDIT') #编辑模式\n        bpy.context.tool_settings.mesh_select_mode = (False, True, False)#编辑模式的（点线面）\n        bpy.ops.mesh.select_all(action='SELECT')#全选命令\n        bpy.ops.object.mode_set(mode='OBJECT')#关闭编辑模式\n```\n\n","source":"_posts/Blender脚本学习笔记.md","raw":"# Blender脚本学习笔记\n\n### 编辑器\n\n- 安装python3.0以上(Blender 2.8是 python3.x)\n\n- Vscode 安装python 和 blender Development 插件\n\n- 终端安装 fake-bpy 包``pip install fake-bpy-module-2.80``\n\n   https://github.com/nutti/fake-bpy-module\n\n  安装完上面这些，vscode里面就会有自动补全\n\n  Debug\n\n- ctrl + shift + P, select \"Blender: Start\"\n\n- 选择你的blender安装路径, vscode会连接到blender\n\n- ctrl + shift + P, \"Blender: Run script\" 并且可以使用断点调试\n\n   <!-- more -->\n\n\n### 插件路径\n\n- 目录：user\\AppData\\Roaming\\Blender Foundation\\Blender\\scripts\\addons,代表非系统原生的用户插件,blender所有安装的外部插件都会被解压放置到这个文件夹下。\n\n  安装插件可以在blender的addon界面直接选择zip文件安装，也可以把插件文件夹直接拖入此目录。\n\n- 目录：D:\\blender-2.81a\\2.81\\scripts\\addons\n\n  第二个是软件原生插件路径，不建议将自己写的插件放入此地，此地不少系统插件的代码可在以后做参考用，值得了解。\n\n### 如何查看命令 \n\n- 类似maya 直接执行某个功能，看info输出命令（A+X\t清空nfo）\n- 选中命令直接 Copy Data Path.\n- 鼠标悬停在某个命令上看提示，如果没有提示，要去perfence里面的interface下勾选Python Tooltips.\n- 控制台直接输入``dir（某个模块名）``查看输出\n- 打开blender的text editor，很多模板文件可供使用：\n- 用python console中的.后代码提示快捷键自动补全查看方法（ctrl+space）\n- 查询api\n- 全球最大爱好者论坛https://blender.stackexchange.com/\n- 查看各类开源插件\n\n### 基础知识\n\n- bpy 意思是 blender python\n\n- 常规得到某个物体信息流程 \n\n  1 viewport选中物体 \n\n  2 查看Transform的提示 \n\n  3 调用各种信息 类似 .location\n\n常用命令\n\n``bpy.context.`` 正文，当前环境的所有内容的意思\n\n``bpy.context.object`` 物体\n\n``mesh = bpy.data.objects[\"mesh\"]`` Mesh变量存储物体mesh\n\n``bpy.ops.object.select_all(action='SELECT')``全选命令\n\n``bpy.ops.object.select_all(action='DESELECT')``全不选命令\n\n``bpy.context.view_layer.objects.active = mesh``大纲选中，激活物体\n\n``bpy.context.object.location`` 拿到选中物体的世界坐标\n\n``bpy.context.object.location.z``拿到选中物体的世界坐标中的Z坐标数值\n\n``bpy.context.object.location.z += random()`` 选中物体的世界坐标中的Z坐标数值随机加一个数\n\n``bpy.context.object.name``查看选中物体的名字\n\n``bpy.ops.object.duplicate(linked=False,mode='TRANSLATION')``复制模型\n\n``bpy.ops.object.modifier_add(type='DECIMATE')``添加编辑器\n\n``bpy.context.object.modifiers[\"Decimate\"].ratio = 0.1``设置编辑器参数\n\n``bpy.ops.object.modifier_apply(apply_as='DATA', modifier=\"Decimate\")``#应用编辑器\n\n``bpy.context.object.name = \"要改的名字\"`` 选中物体的名字\n\n``bpy.ops.mesh.primitive_cube_add()``创建box\n\n``bpy.context.object.active_material``返回当前选择物体的材质球\n\n``bpy.data.materials.get(材质球名称字符串)``拿到当前场景的某个材质\n\n``bpy.context.view_layer.objects.active.material_slots.data.active_material= 某个材质`` 给当前激活的物体材质球插槽赋予某个材质\n\n``bpy.ops.wm.save_mainfile(filepath=\"E:\\\\Test\\\\testsave.blend\") ``存储当前文件\n\n``bpy.ops.wm.open_mainfile(filepath=BlendFilePath)`` 打开文件\n\n得到当前版本的blender文件夹路径\n\n```\nimport sys\nargv = sys.argv #当前blender的路径例：['D:\\\\blender-2.81a\\\\blender.exe']\n```\n\n遍历列表选中物体：\n\n```\nfor i in bpy.context.visible_objects:#迭代所有可见物体\n\tif i.name == \"要选物体的名字\":\n\t\ti.select_set(state=True)\nfor i in bpy.context.visible_objects:\n    if i.type == \"MESH\":#判断物体类型是模型\n        bpy.context.view_layer.objects.active = i #当前激活物体定义为i\n        bpy.ops.object.mode_set(mode='EDIT') #编辑模式\n        bpy.context.tool_settings.mesh_select_mode = (False, True, False)#编辑模式的（点线面）\n        bpy.ops.mesh.select_all(action='SELECT')#全选命令\n        bpy.ops.object.mode_set(mode='OBJECT')#关闭编辑模式\n```\n\n","slug":"Blender脚本学习笔记","published":1,"date":"2020-03-10T10:49:41.119Z","updated":"2020-03-10T10:49:41.119Z","title":"Blender脚本学习笔记","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7lv2jl50001ycp4d0rt4lx1","content":"<h1 id=\"Blender脚本学习笔记\"><a href=\"#Blender脚本学习笔记\" class=\"headerlink\" title=\"Blender脚本学习笔记\"></a>Blender脚本学习笔记</h1><h3 id=\"编辑器\"><a href=\"#编辑器\" class=\"headerlink\" title=\"编辑器\"></a>编辑器</h3><ul>\n<li><p>安装python3.0以上(Blender 2.8是 python3.x)</p>\n</li>\n<li><p>Vscode 安装python 和 blender Development 插件</p>\n</li>\n<li><p>终端安装 fake-bpy 包<code>pip install fake-bpy-module-2.80</code></p>\n<p> <a href=\"https://github.com/nutti/fake-bpy-module\" target=\"_blank\" rel=\"noopener\">https://github.com/nutti/fake-bpy-module</a></p>\n<p>安装完上面这些，vscode里面就会有自动补全</p>\n<p>Debug</p>\n</li>\n<li><p>ctrl + shift + P, select “Blender: Start”</p>\n</li>\n<li><p>选择你的blender安装路径, vscode会连接到blender</p>\n</li>\n<li><p>ctrl + shift + P, “Blender: Run script” 并且可以使用断点调试</p>\n <a id=\"more\"></a>\n\n\n</li>\n</ul>\n<h3 id=\"插件路径\"><a href=\"#插件路径\" class=\"headerlink\" title=\"插件路径\"></a>插件路径</h3><ul>\n<li><p>目录：user\\AppData\\Roaming\\Blender Foundation\\Blender\\scripts\\addons,代表非系统原生的用户插件,blender所有安装的外部插件都会被解压放置到这个文件夹下。</p>\n<p>安装插件可以在blender的addon界面直接选择zip文件安装，也可以把插件文件夹直接拖入此目录。</p>\n</li>\n<li><p>目录：D:\\blender-2.81a\\2.81\\scripts\\addons</p>\n<p>第二个是软件原生插件路径，不建议将自己写的插件放入此地，此地不少系统插件的代码可在以后做参考用，值得了解。</p>\n</li>\n</ul>\n<h3 id=\"如何查看命令\"><a href=\"#如何查看命令\" class=\"headerlink\" title=\"如何查看命令\"></a>如何查看命令</h3><ul>\n<li>类似maya 直接执行某个功能，看info输出命令（A+X    清空nfo）</li>\n<li>选中命令直接 Copy Data Path.</li>\n<li>鼠标悬停在某个命令上看提示，如果没有提示，要去perfence里面的interface下勾选Python Tooltips.</li>\n<li>控制台直接输入<code>dir（某个模块名）</code>查看输出</li>\n<li>打开blender的text editor，很多模板文件可供使用：</li>\n<li>用python console中的.后代码提示快捷键自动补全查看方法（ctrl+space）</li>\n<li>查询api</li>\n<li>全球最大爱好者论坛<a href=\"https://blender.stackexchange.com/\" target=\"_blank\" rel=\"noopener\">https://blender.stackexchange.com/</a></li>\n<li>查看各类开源插件</li>\n</ul>\n<h3 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h3><ul>\n<li><p>bpy 意思是 blender python</p>\n</li>\n<li><p>常规得到某个物体信息流程 </p>\n<p>1 viewport选中物体 </p>\n<p>2 查看Transform的提示 </p>\n<p>3 调用各种信息 类似 .location</p>\n</li>\n</ul>\n<p>常用命令</p>\n<p><code>bpy.context.</code> 正文，当前环境的所有内容的意思</p>\n<p><code>bpy.context.object</code> 物体</p>\n<p><code>mesh = bpy.data.objects[&quot;mesh&quot;]</code> Mesh变量存储物体mesh</p>\n<p><code>bpy.ops.object.select_all(action=&#39;SELECT&#39;)</code>全选命令</p>\n<p><code>bpy.ops.object.select_all(action=&#39;DESELECT&#39;)</code>全不选命令</p>\n<p><code>bpy.context.view_layer.objects.active = mesh</code>大纲选中，激活物体</p>\n<p><code>bpy.context.object.location</code> 拿到选中物体的世界坐标</p>\n<p><code>bpy.context.object.location.z</code>拿到选中物体的世界坐标中的Z坐标数值</p>\n<p><code>bpy.context.object.location.z += random()</code> 选中物体的世界坐标中的Z坐标数值随机加一个数</p>\n<p><code>bpy.context.object.name</code>查看选中物体的名字</p>\n<p><code>bpy.ops.object.duplicate(linked=False,mode=&#39;TRANSLATION&#39;)</code>复制模型</p>\n<p><code>bpy.ops.object.modifier_add(type=&#39;DECIMATE&#39;)</code>添加编辑器</p>\n<p><code>bpy.context.object.modifiers[&quot;Decimate&quot;].ratio = 0.1</code>设置编辑器参数</p>\n<p><code>bpy.ops.object.modifier_apply(apply_as=&#39;DATA&#39;, modifier=&quot;Decimate&quot;)</code>#应用编辑器</p>\n<p><code>bpy.context.object.name = &quot;要改的名字&quot;</code> 选中物体的名字</p>\n<p><code>bpy.ops.mesh.primitive_cube_add()</code>创建box</p>\n<p><code>bpy.context.object.active_material</code>返回当前选择物体的材质球</p>\n<p><code>bpy.data.materials.get(材质球名称字符串)</code>拿到当前场景的某个材质</p>\n<p><code>bpy.context.view_layer.objects.active.material_slots.data.active_material= 某个材质</code> 给当前激活的物体材质球插槽赋予某个材质</p>\n<p><code>bpy.ops.wm.save_mainfile(filepath=&quot;E:\\\\Test\\\\testsave.blend&quot;)</code>存储当前文件</p>\n<p><code>bpy.ops.wm.open_mainfile(filepath=BlendFilePath)</code> 打开文件</p>\n<p>得到当前版本的blender文件夹路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys</span><br><span class=\"line\">argv &#x3D; sys.argv #当前blender的路径例：[&#39;D:\\\\blender-2.81a\\\\blender.exe&#39;]</span><br></pre></td></tr></table></figure>\n\n<p>遍历列表选中物体：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i in bpy.context.visible_objects:#迭代所有可见物体</span><br><span class=\"line\">\tif i.name &#x3D;&#x3D; &quot;要选物体的名字&quot;:</span><br><span class=\"line\">\t\ti.select_set(state&#x3D;True)</span><br><span class=\"line\">for i in bpy.context.visible_objects:</span><br><span class=\"line\">    if i.type &#x3D;&#x3D; &quot;MESH&quot;:#判断物体类型是模型</span><br><span class=\"line\">        bpy.context.view_layer.objects.active &#x3D; i #当前激活物体定义为i</span><br><span class=\"line\">        bpy.ops.object.mode_set(mode&#x3D;&#39;EDIT&#39;) #编辑模式</span><br><span class=\"line\">        bpy.context.tool_settings.mesh_select_mode &#x3D; (False, True, False)#编辑模式的（点线面）</span><br><span class=\"line\">        bpy.ops.mesh.select_all(action&#x3D;&#39;SELECT&#39;)#全选命令</span><br><span class=\"line\">        bpy.ops.object.mode_set(mode&#x3D;&#39;OBJECT&#39;)#关闭编辑模式</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#2d6b96","paginator":"#6AA7D2","button_hover":"#3B8BC4","text_selection":"#6AA7D2","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#6AA7D2","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"文章":"/","归档":"/archives"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":true,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":null,"top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2013,"footer_custom_text":"Hi, welcome to my <a href=\"https://sunyuxianggit.github.io/\">blog</a>!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":true,"url":"https://github.com/sunyuxianggit","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"SunYuxiangのBlog","subtitle":"好记性,不如烂笔头.今天你要写点什么？","description":"","author":"Sun Yuxiang","language":"zh-Hans","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/sunyuxianggit/sunyuxianggit.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"category_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"<h1 id=\"Blender脚本学习笔记\"><a href=\"#Blender脚本学习笔记\" class=\"headerlink\" title=\"Blender脚本学习笔记\"></a>Blender脚本学习笔记</h1><h3 id=\"编辑器\"><a href=\"#编辑器\" class=\"headerlink\" title=\"编辑器\"></a>编辑器</h3><ul>\n<li><p>安装python3.0以上(Blender 2.8是 python3.x)</p>\n</li>\n<li><p>Vscode 安装python 和 blender Development 插件</p>\n</li>\n<li><p>终端安装 fake-bpy 包<code>pip install fake-bpy-module-2.80</code></p>\n<p> <a href=\"https://github.com/nutti/fake-bpy-module\" target=\"_blank\" rel=\"noopener\">https://github.com/nutti/fake-bpy-module</a></p>\n<p>安装完上面这些，vscode里面就会有自动补全</p>\n<p>Debug</p>\n</li>\n<li><p>ctrl + shift + P, select “Blender: Start”</p>\n</li>\n<li><p>选择你的blender安装路径, vscode会连接到blender</p>\n</li>\n<li><p>ctrl + shift + P, “Blender: Run script” 并且可以使用断点调试</p></li></ul>","more":"\n\n<h3 id=\"插件路径\"><a href=\"#插件路径\" class=\"headerlink\" title=\"插件路径\"></a>插件路径</h3><ul>\n<li><p>目录：user\\AppData\\Roaming\\Blender Foundation\\Blender\\scripts\\addons,代表非系统原生的用户插件,blender所有安装的外部插件都会被解压放置到这个文件夹下。</p>\n<p>安装插件可以在blender的addon界面直接选择zip文件安装，也可以把插件文件夹直接拖入此目录。</p>\n</li>\n<li><p>目录：D:\\blender-2.81a\\2.81\\scripts\\addons</p>\n<p>第二个是软件原生插件路径，不建议将自己写的插件放入此地，此地不少系统插件的代码可在以后做参考用，值得了解。</p>\n</li>\n</ul>\n<h3 id=\"如何查看命令\"><a href=\"#如何查看命令\" class=\"headerlink\" title=\"如何查看命令\"></a>如何查看命令</h3><ul>\n<li>类似maya 直接执行某个功能，看info输出命令（A+X    清空nfo）</li>\n<li>选中命令直接 Copy Data Path.</li>\n<li>鼠标悬停在某个命令上看提示，如果没有提示，要去perfence里面的interface下勾选Python Tooltips.</li>\n<li>控制台直接输入<code>dir（某个模块名）</code>查看输出</li>\n<li>打开blender的text editor，很多模板文件可供使用：</li>\n<li>用python console中的.后代码提示快捷键自动补全查看方法（ctrl+space）</li>\n<li>查询api</li>\n<li>全球最大爱好者论坛<a href=\"https://blender.stackexchange.com/\" target=\"_blank\" rel=\"noopener\">https://blender.stackexchange.com/</a></li>\n<li>查看各类开源插件</li>\n</ul>\n<h3 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h3><ul>\n<li><p>bpy 意思是 blender python</p>\n</li>\n<li><p>常规得到某个物体信息流程 </p>\n<p>1 viewport选中物体 </p>\n<p>2 查看Transform的提示 </p>\n<p>3 调用各种信息 类似 .location</p>\n</li>\n</ul>\n<p>常用命令</p>\n<p><code>bpy.context.</code> 正文，当前环境的所有内容的意思</p>\n<p><code>bpy.context.object</code> 物体</p>\n<p><code>mesh = bpy.data.objects[&quot;mesh&quot;]</code> Mesh变量存储物体mesh</p>\n<p><code>bpy.ops.object.select_all(action=&#39;SELECT&#39;)</code>全选命令</p>\n<p><code>bpy.ops.object.select_all(action=&#39;DESELECT&#39;)</code>全不选命令</p>\n<p><code>bpy.context.view_layer.objects.active = mesh</code>大纲选中，激活物体</p>\n<p><code>bpy.context.object.location</code> 拿到选中物体的世界坐标</p>\n<p><code>bpy.context.object.location.z</code>拿到选中物体的世界坐标中的Z坐标数值</p>\n<p><code>bpy.context.object.location.z += random()</code> 选中物体的世界坐标中的Z坐标数值随机加一个数</p>\n<p><code>bpy.context.object.name</code>查看选中物体的名字</p>\n<p><code>bpy.ops.object.duplicate(linked=False,mode=&#39;TRANSLATION&#39;)</code>复制模型</p>\n<p><code>bpy.ops.object.modifier_add(type=&#39;DECIMATE&#39;)</code>添加编辑器</p>\n<p><code>bpy.context.object.modifiers[&quot;Decimate&quot;].ratio = 0.1</code>设置编辑器参数</p>\n<p><code>bpy.ops.object.modifier_apply(apply_as=&#39;DATA&#39;, modifier=&quot;Decimate&quot;)</code>#应用编辑器</p>\n<p><code>bpy.context.object.name = &quot;要改的名字&quot;</code> 选中物体的名字</p>\n<p><code>bpy.ops.mesh.primitive_cube_add()</code>创建box</p>\n<p><code>bpy.context.object.active_material</code>返回当前选择物体的材质球</p>\n<p><code>bpy.data.materials.get(材质球名称字符串)</code>拿到当前场景的某个材质</p>\n<p><code>bpy.context.view_layer.objects.active.material_slots.data.active_material= 某个材质</code> 给当前激活的物体材质球插槽赋予某个材质</p>\n<p><code>bpy.ops.wm.save_mainfile(filepath=&quot;E:\\\\Test\\\\testsave.blend&quot;)</code>存储当前文件</p>\n<p><code>bpy.ops.wm.open_mainfile(filepath=BlendFilePath)</code> 打开文件</p>\n<p>得到当前版本的blender文件夹路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys</span><br><span class=\"line\">argv &#x3D; sys.argv #当前blender的路径例：[&#39;D:\\\\blender-2.81a\\\\blender.exe&#39;]</span><br></pre></td></tr></table></figure>\n\n<p>遍历列表选中物体：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i in bpy.context.visible_objects:#迭代所有可见物体</span><br><span class=\"line\">\tif i.name &#x3D;&#x3D; &quot;要选物体的名字&quot;:</span><br><span class=\"line\">\t\ti.select_set(state&#x3D;True)</span><br><span class=\"line\">for i in bpy.context.visible_objects:</span><br><span class=\"line\">    if i.type &#x3D;&#x3D; &quot;MESH&quot;:#判断物体类型是模型</span><br><span class=\"line\">        bpy.context.view_layer.objects.active &#x3D; i #当前激活物体定义为i</span><br><span class=\"line\">        bpy.ops.object.mode_set(mode&#x3D;&#39;EDIT&#39;) #编辑模式</span><br><span class=\"line\">        bpy.context.tool_settings.mesh_select_mode &#x3D; (False, True, False)#编辑模式的（点线面）</span><br><span class=\"line\">        bpy.ops.mesh.select_all(action&#x3D;&#39;SELECT&#39;)#全选命令</span><br><span class=\"line\">        bpy.ops.object.mode_set(mode&#x3D;&#39;OBJECT&#39;)#关闭编辑模式</span><br></pre></td></tr></table></figure>"},{"title":"Git 学习笔记","date":"2019-12-03T03:32:35.000Z","_content":"# Git 学习笔记\n\n### 常用命令\n\n##### 1. 设置 Git 全局用户名和邮箱\n\n   ```\n   $ git config --global user.name \"gitaccount\" #设置用户名\n   $ git config --global user.email \"gitaccount@example.com\" #设置用户名\n   $ git config --global user.name #查看用户名\n   $ git config --global user.email #查看邮箱\n   ```\n<!-- more -->\n\n##### 2. 使用流程命令\n\n   ```\n   $ git init #初始化仓库\n   $ git status # 查看git版本控制状态\n   $ git add xxxxxx # 加入文件tracked\n   $ git commit -m \"描述\" #提交文件到暂存区\n   $ git log #查看日志\n   $ git remote add origin https://github.com/sunyuxianggit/sunyuxianggit.github.io.git #预提交到远端仓库（关联本地和远程仓库）\n   $ git push -u origin master\n   ```\n\n##### 3. 常见报错\n\n   ```\n   fatal: remote origin already exists.\n   $ git remote rm origin #删除远程 URL\n   ref:https://blog.csdn.net/top_code/article/details/50381432\n   ```\n##### 4. 速度问题\n   \n* 设置\n```\ngit config --global http.proxy 'socks5://127.0.0.1:1080' \ngit config --global https.proxy 'socks5://127.0.0.1:1080'\n```\n\n* 查看\n```\ngit config --global http.proxy\ngit config --global https.proxy\n```\n\n* 取消设置\n```\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n\n```\n","source":"_posts/Git-学习笔记.md","raw":"---\ntitle: Git 学习笔记\ndate: 2019-12-03 11:32:35\ntags:\n---\n# Git 学习笔记\n\n### 常用命令\n\n##### 1. 设置 Git 全局用户名和邮箱\n\n   ```\n   $ git config --global user.name \"gitaccount\" #设置用户名\n   $ git config --global user.email \"gitaccount@example.com\" #设置用户名\n   $ git config --global user.name #查看用户名\n   $ git config --global user.email #查看邮箱\n   ```\n<!-- more -->\n\n##### 2. 使用流程命令\n\n   ```\n   $ git init #初始化仓库\n   $ git status # 查看git版本控制状态\n   $ git add xxxxxx # 加入文件tracked\n   $ git commit -m \"描述\" #提交文件到暂存区\n   $ git log #查看日志\n   $ git remote add origin https://github.com/sunyuxianggit/sunyuxianggit.github.io.git #预提交到远端仓库（关联本地和远程仓库）\n   $ git push -u origin master\n   ```\n\n##### 3. 常见报错\n\n   ```\n   fatal: remote origin already exists.\n   $ git remote rm origin #删除远程 URL\n   ref:https://blog.csdn.net/top_code/article/details/50381432\n   ```\n##### 4. 速度问题\n   \n* 设置\n```\ngit config --global http.proxy 'socks5://127.0.0.1:1080' \ngit config --global https.proxy 'socks5://127.0.0.1:1080'\n```\n\n* 查看\n```\ngit config --global http.proxy\ngit config --global https.proxy\n```\n\n* 取消设置\n```\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n\n```\n","slug":"Git-学习笔记","published":1,"updated":"2020-03-10T10:49:41.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7lv2jla0003ycp473ma4qyn","content":"<h1 id=\"Git-学习笔记\"><a href=\"#Git-学习笔记\" class=\"headerlink\" title=\"Git 学习笔记\"></a>Git 学习笔记</h1><h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><h5 id=\"1-设置-Git-全局用户名和邮箱\"><a href=\"#1-设置-Git-全局用户名和邮箱\" class=\"headerlink\" title=\"1. 设置 Git 全局用户名和邮箱\"></a>1. 设置 Git 全局用户名和邮箱</h5>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name &quot;gitaccount&quot; #设置用户名</span><br><span class=\"line\">$ git config --global user.email &quot;gitaccount@example.com&quot; #设置用户名</span><br><span class=\"line\">$ git config --global user.name #查看用户名</span><br><span class=\"line\">$ git config --global user.email #查看邮箱</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n\n<h5 id=\"2-使用流程命令\"><a href=\"#2-使用流程命令\" class=\"headerlink\" title=\"2. 使用流程命令\"></a>2. 使用流程命令</h5>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init #初始化仓库</span><br><span class=\"line\">$ git status # 查看git版本控制状态</span><br><span class=\"line\">$ git add xxxxxx # 加入文件tracked</span><br><span class=\"line\">$ git commit -m &quot;描述&quot; #提交文件到暂存区</span><br><span class=\"line\">$ git log #查看日志</span><br><span class=\"line\">$ git remote add origin https:&#x2F;&#x2F;github.com&#x2F;sunyuxianggit&#x2F;sunyuxianggit.github.io.git #预提交到远端仓库（关联本地和远程仓库）</span><br><span class=\"line\">$ git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-常见报错\"><a href=\"#3-常见报错\" class=\"headerlink\" title=\"3. 常见报错\"></a>3. 常见报错</h5>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal: remote origin already exists.</span><br><span class=\"line\">$ git remote rm origin #删除远程 URL</span><br><span class=\"line\">ref:https:&#x2F;&#x2F;blog.csdn.net&#x2F;top_code&#x2F;article&#x2F;details&#x2F;50381432</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-速度问题\"><a href=\"#4-速度问题\" class=\"headerlink\" title=\"4. 速度问题\"></a>4. 速度问题</h5><ul>\n<li><p>设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39; </span><br><span class=\"line\">git config --global https.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy</span><br><span class=\"line\">git config --global https.proxy</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>取消设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#2d6b96","paginator":"#6AA7D2","button_hover":"#3B8BC4","text_selection":"#6AA7D2","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#6AA7D2","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"文章":"/","归档":"/archives"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":true,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":null,"top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2013,"footer_custom_text":"Hi, welcome to my <a href=\"https://sunyuxianggit.github.io/\">blog</a>!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":true,"url":"https://github.com/sunyuxianggit","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"SunYuxiangのBlog","subtitle":"好记性,不如烂笔头.今天你要写点什么？","description":"","author":"Sun Yuxiang","language":"zh-Hans","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/sunyuxianggit/sunyuxianggit.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"category_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"<h1 id=\"Git-学习笔记\"><a href=\"#Git-学习笔记\" class=\"headerlink\" title=\"Git 学习笔记\"></a>Git 学习笔记</h1><h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><h5 id=\"1-设置-Git-全局用户名和邮箱\"><a href=\"#1-设置-Git-全局用户名和邮箱\" class=\"headerlink\" title=\"1. 设置 Git 全局用户名和邮箱\"></a>1. 设置 Git 全局用户名和邮箱</h5>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name &quot;gitaccount&quot; #设置用户名</span><br><span class=\"line\">$ git config --global user.email &quot;gitaccount@example.com&quot; #设置用户名</span><br><span class=\"line\">$ git config --global user.name #查看用户名</span><br><span class=\"line\">$ git config --global user.email #查看邮箱</span><br></pre></td></tr></table></figure>","more":"<h5 id=\"2-使用流程命令\"><a href=\"#2-使用流程命令\" class=\"headerlink\" title=\"2. 使用流程命令\"></a>2. 使用流程命令</h5>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init #初始化仓库</span><br><span class=\"line\">$ git status # 查看git版本控制状态</span><br><span class=\"line\">$ git add xxxxxx # 加入文件tracked</span><br><span class=\"line\">$ git commit -m &quot;描述&quot; #提交文件到暂存区</span><br><span class=\"line\">$ git log #查看日志</span><br><span class=\"line\">$ git remote add origin https:&#x2F;&#x2F;github.com&#x2F;sunyuxianggit&#x2F;sunyuxianggit.github.io.git #预提交到远端仓库（关联本地和远程仓库）</span><br><span class=\"line\">$ git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-常见报错\"><a href=\"#3-常见报错\" class=\"headerlink\" title=\"3. 常见报错\"></a>3. 常见报错</h5>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal: remote origin already exists.</span><br><span class=\"line\">$ git remote rm origin #删除远程 URL</span><br><span class=\"line\">ref:https:&#x2F;&#x2F;blog.csdn.net&#x2F;top_code&#x2F;article&#x2F;details&#x2F;50381432</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-速度问题\"><a href=\"#4-速度问题\" class=\"headerlink\" title=\"4. 速度问题\"></a>4. 速度问题</h5><ul>\n<li><p>设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39; </span><br><span class=\"line\">git config --global https.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy</span><br><span class=\"line\">git config --global https.proxy</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>取消设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"Effective Python","date":"2020-03-10T11:14:04.000Z","_content":"\n# Effective Python\n# 编写高质量代码的59+91个建议读书笔记\n\n### 第一条\n* 确认自己所用的python版本。\n* 确保该版本与你想使用的python版本相符。\n* 优先使用python3\n\n##### Windows平台下：\n`$python --version`\n![a](Effective-Python/2020-03-07-11-15-23.png)\n\n<!-- more -->\n\n##### 其他程序内：\n* Autodesk Maya:\n![b](Effective-Python/2020-03-07-11-18-24.png)\n\n* Substance Designer:\n![c](Effective-Python/2020-03-07-11-19-36.png)\n注：SD里sys.version_info报错，原因未知\n\n* Houdini：\n![d](Effective-Python/2020-03-07-11-22-33.png)\n\nTips： Python中sys模块还有一个常用功能：\n`sys.path`可以用来找到应用程序内的python编译器位置.\n\n### 第二条\n遵循PEP8 风格指南\n《Python Enhancement Proposal #8》（8号Python增强法案）又叫PEP8,它是针对Python代码格式而编订的风格指南。\n* 使用空格来表示缩进，而不要用制表符（tab）。\n* 和语法相关的每一层缩进都用四个空格表示。\n* 每行的字符数不应超过79。\n* 对于占据多行的长表达式，除了首行之外的其余各行都应该在通常的缩进级别之上再加四个空格。\n* 文件中的代码与函数和类之间应该用两个空行隔开。\n* 在同一个类中，各方法之间应该用一个空行隔开。\n* 在使用下标来获取列表元素、调用函数或给关键字参数赋值的时候，不要再两边添加空格。\n* 为变量赋值的时候，赋值符号的左侧和右侧应该各自写上一个空格，而且只写一个。\n\n命名：PEP8 提倡采用不同的命名风格来编写Python代码中的各个部分,以便再阅读代码时可以根据这些名称看出它们的角色。\n* 函数、变量名及属性应该用小写字母，各单词之间用下划线相连，例如，lowercase_underscore。\n* 受保护的实例属性，应该以单个下划线开头，例如，_leading_underscore.\n* 私有的实例属性，应该以两个下划线开头，例如__double_leading_underscore.\n* 类与异常， 应该以每个单词首字母均大写的形式来命名，例如，CapitalizedWord。\n* 模块级别的常量，应该全部采用大写字母来拼写，各单词之间以下划线连接，例如，ALL_CAPS。\n* 类中的实例方法（instance method），应该把首个参数命名self，以表示该对象自身.\n* 类方法（class method）的首个参数，应该命名cls，以表示该类自身。\n\n表达式和语句《The Zen of Python》（python之禅）中说，每件事都应该有直白的做法，而且最好只有一种。\n* 采用内联形式的否定词 ，而不要把否定词放在整个表达式的前面，例如，应该写 if a is not b 而不是 if not a is b。\n* 不要通过检测长度的方法来判断列表是否为空，而是应该采用if not somelist来判定。\n* 同上条，如果判断列表不为空也是一样的， \n* 不要编写单行的if语句、for循环、while循环及except复合语句，而是应该把这些语句分成多行来书写，以示清晰。\n* import语句应该重视放在文件开头.\n* 引入模块的时候，总是应该使用绝对名称，而不应该根据当前模块的路径来使用相对名称，例如，引入bar包中的foo模块时，应该完成的写出 from bar import foo，而不应该简写为import foo。\n* 如果一定要以相对的名称来编写import语句，那就采用明确的写法:from.import foo。\n* 文件中的那些import语句应该按照顺序划分为三个部分，分别为标准库模块、第三方模块以及自用模块。各import语句应该按照模块的字母顺序来排列。\n\nTips： vscode可以采用pylint来自动检测受测代码是否符合pep8。\nhttps://www.pylint.org/\n\n### 第三条\n##### 了解bytes、str、和unicode的区别\n* python3有两种表示字符序列的类型，bytes和str，前者的实例中包含原始的8位值，后者的实例中包含Unicode字符。\n* python2中也有两种表示字符序列的类型，str和Unicode. 前者包含原始的八位值，后者的实例着包含unicode字符。\n![e](Effective-Python/2020-03-07-14-29-10.png)\n* bytes 类型，是指一堆字节的集合，十六进制表现形式，两个十六进制数构成一个 byte ，以 b 开头的字符串是 bytes 类型。计算机只能存储二进制，字符、图片、视频、音乐等想存到硬盘上，必须以正确的方式编码成二进制后再存，但是转成二进制后不是直接以 0101010 的形式表示的，而是用bytes() 的类型来表示的。\n* 把Unicode字符表示为二进制数据（原始八位值）有很多办法，常见且推荐的编码方式就是UTF-8。\n* 但是python3 的str实例和python2的Unicode实例都没有和特定的二进制编码形式相关联，想要把Unicode字符转换为二进制数据，就必须使用encode方法，想要把二进制数据转化成为Unicode字符，则必须使用decode 方法。\n![f](Effective-Python/2020-03-07-14-34-59.png)\n* 在 Python3 中内存里的字符串是以 Unicode 编码的，Unicode 的其中一个特性就是跟所有语言编码都有映射关系，所以 UTF-8 格式的文件，在 Windows 电脑上若是不能看，就可以把 UTF-8 先解码成 Unicode ，再由 Unicode 编码成 GBK 就可以了。\n![g](Effective-Python/2020-03-07-14-32-20.png)\n##### 字符串的转换\n* 在Python3中，接受str或byts，并总是返回str的方法:\n    ```py\n    def to_str(bytes_or_str):\n        if isinstance(bytes_or_str, bytes):#注意这个函数\n            value = bytes_or_str.decode('utf-8')\n        else:\n            value = bytes_or_str\n        return value\n    ```\n* 接受str或bytes，并总是返回bytes的方法：\n    ```py\n    def to_bytes(bytes_or_str):\n        if isinstance(bytes_or_str, str):\n            value = bytes_or_str.encode('utf-8')\n        else:\n            value = bytes_or_str\n        return value\n    ```\n* 在Python2中，接受str或unicode，并总是返回unicode的方法：\n    ```\n    def to_unicode(unicode_or_str):\n        if isinstance(unicode_or_str, str):\n            value = unicode_or_str.decode('utf-8')\n        else:\n            value = unicode_or_str\n        return value\n    ```\n* 接受str或unicode，并总是返回str的方法：\n    ```\n    def to_str(unicode_or_str):\n        if isinstance(unicode_or_str, unicode):\n            value = unicode_or_str.encode('utf-8')\n        else:\n            value = unicode_or_str\n        return value\n    ```\n##### 推荐的文件操作符\n如果通过open函数获取文件句柄，该句柄会采用UTF-8编码格式来操作文件。\n而在Python2中，文件操作的默认编码格式则是二进制形式。这可能会导致程序出现奇怪的错误。\n例如，向文件中随机写入一些二进制数据。下面这种方法Python2中可以正常运行，但是在Python3中则不行：\n```py\nwith open('/tmp/random.bin', 'w') as f:\n    f.write(os.urandom(10))\n>>> TypeError: must be str, not bytes\n```\n上述情况是因为Python3给open函数添加了名为encoding的新参数，而这个新参数默认值是’utf-8′。这样在文件句柄上进行read和write操作时，系统就要求开发者必须传入包含unicode字符的str实例，而不接受包含二进制数据的bytes实例。\n\n解决这个问题，可以用二进制写入模式(‘wb’)来开启待操作的文件，按照这种方式可同时适配Python2和Python3：\n\n```py\nwith open('/tmp/random.bin', 'wb') as f:\n    f.write(os.urandom(10))\n```\n(读取文件也同理，可使用’rb’模式)\n\n### 第四条\n用辅助函数来取代复杂的表达式\n* 开发者很容易过度运用Python的语法特性，从而写出那种特别复杂并且难以理解的单行表达式。\n* 请把复杂的表达式移入辅助函数中。如果要反复使用相同的逻辑，那就更应该那么做。\n* 使用if/esle表达式，要比用or或者and 这样的Boolean操作符写出的表达式更清晰。\n\n### 第五条\n了解切割序列的方法\npython提供了一种把序列切成小块的写法，这种切片操作很容易四开发者轻易的访问序列中的某些元素所构成的子集。  \n最简单的用法，就是对内置list和bytes进行切割。  \n切割操作还可以延伸到实现了__getitem__和__setitem__这两个特殊方法的python类上，参见28条。\n* 不要写多余的代码。但start索引为零或者end索引为序列长度时，应该将其忽略\n* 切片操作不会计较start或者end索引是否越界，这样我们很容易从前端或者后端开始。\n* 对list赋值时，如果使用切片操作，就会把原列表中处在相关范围内的值替换成新值，即便它们的长度不同也依然可以替换。\n\n### 第六条\n在单词切片操作内，不要同时指定start、 end 和 stride \n* 问题在于采用stride方式进行切片时，经常会出现不符合预期的结果\n* 切割列表时，如果制定了stride，代码就会变得费解。尤其是stride为负值的时候更是如此.\n* 在同一个切片操作内，不要同时使用start、end和stride. 如果确实需要执行这种操作，那就考虑将其拆解为两条赋值语句，其中一条做范围切割，另一条做步进，或者考虑使用内置itertools模块中的islice.\n\ntips：\n`mystring[::-1]#反转字符串`\n\n### 第七条\n用列表推导来取代map和filter\npython提供了一种精炼的写法，可以根据一个列表来制作另外一个列表.这种表达式称为list comprehension （列表推导）\n* 列表推导要比内置的map和filter函数清晰\n* 列表推导可以很跳过输入列表中的某些元素\n* 字典与集也支持推导表达式\n\n### 第八条\n不要使用含有两个以上表达式的列表推导\n* 列表推导支持多级循环，每一级循环也支持多项条件\n* 超过两个表达式的列表推导难以理解，应该尽量避免\nTips：\n```py\nmatrix = [[1,2,3],[4,5,6],[7,8,9]]\nflat = [x for row in matrix for x in row]\nprint(flat)\n>>>[1,2,3,4,5,6,7,8,9]\n```\n\n```py\na = [1,2,3,4,5,6,7,8,9,10]\n#下面两种写法是等效的\n#要从列表中取出大于4的偶数\nb = [x for x in a if x>4 if x %2 ==0]\nc = [x for x in a if x>4 and x%2==0]\n```\n\n### 第九条\n用生成器表达式来改写数据量较大的列表推导\n列表推导的缺点是，对于输入序列中的每个值来说，都要创建一项仅含一项元素的全新列表，但输入数据较大时，可能会消耗大量内存，并导致程序崩溃。\n为了解决此问题，python 提供了生成式表达式\n```py\nit = (len(x) for x in open(temp.txt))\nprint(it)\n>>>\n<generator object <genexpr> at 0x101b81480>\nprint(next(it))\nprint(next(it))\n>>>\n100\n57\n```\n\nTips：\n获取文件每行的字符数\n\n```py\nvalue = [len(x) for x in open(temp.txt)]\nprint(value)\n```\n\n* 当输入的数据量较大时，列表推导可能会因为占用太对内存而出问题。\n* 由生成表达式所返回的迭代器，可以逐次产生输出值，从而避免了内存用量问题。\n* 把某个生成器表达式说返回的迭代器，放在另一个生成器表达式的for子表达式中，即可将二者组合起来。\n* 串在一起的生成器表达式执行速度很快。 \n\n### 第十条\n尽量用enumerate取代range\n在一些列的整数上面迭代，内置的range函数很有用，\n当迭代列表的时候，通常还想知道当前元素在列表中的索引。\n```py\nfor i in range(len(flavor_list)):\n    flavor = flavor_lsit[i]\n    print(\"%d:%s\"%(i+1,flavor))\n```\n这种代码不利于理解，python提供了enumerate来解决此问题。enumerate可以把各种迭代器包装为生成器，以便稍后产生输出值，生成器每次产生一对输出值，前者为循环下标，后者表示从迭代器中获取到的下一个序列元素，这样写出来的代码会非常整洁。\n```py\nfor i ,flavor in enumerate(flavor_list):\n    print(\"%d:%s\"%(i+1,flavor))\n```\n\n* enumerate函数提供了一种精简的写法，可以在遍历迭代器时获知每个元素的索引\n* 尽量用enumerate来改写那种将range与下标访问相结合的序列遍历代码\n* 可以给enumerate 提供第二个参数，已指定开始计数时所用的值（默认为0）\n\n\nTips:\n还可以直接指定enumerate开始计数所用的值。\n```py\nfor i ,flavor in enumerate(flavor_list，1):\n    print(\"%d:%s\"%(i,flavor))\n```\n\n### 第十一条\n用zip函数同时遍历两个迭代器\n\n* 使用for循环\n```py\nnames = ['Cecilia', 'Kufu', 'JayChou']\nletters = [len(n) for n in names]\nlongest_name = None\nmax_letters = 0\n\nfor name, count in zip(names, letters):\n    if count > max_letters:\n        longest_name = name\n        max_letters = count\n>>>\nCecilia\n```\n上面这段代码问题在一，整个循环语句看上去很乱，用下标来访问names和letters会使代码不易阅读。\n改用enumerate可以稍稍缓解这个问题，但仍然不够理想。\n\n* 使用for循环加enumerate\n```py\nnames = ['Cecilia', 'Kufu', 'JayChou']\nletters = [len(n) for n in names]\nlongest_name = None\nmax_letters = 0\n\nfor i, name in enumerate(names)：\n    count =letters[i]\n    if count > max_letters:\n        longest_name = name\n        max_letters = count\n```\n* 使用zip\n```py\nnames = ['Cecilia', 'Kufu', 'JayChou']\nletters = [len(n) for n in names]\nlongest_name = None\nmax_letters = 0\n\nfor name, count in zip(names, letter):\n    if count > max_letters:\n        longest_name = name\n        max_letters = count\n```\n\n* 内置的zip函数可以平行的遍历多个迭代器\n* Python3中的zip相当于生成器，会在遍历过程中逐次产生元组，而Python2中的zip则是直接把这些元组完全生成号，并一次性的返回给整份列表。\n* 如果提供的迭代器长度不等，那么zip就会自动提前终止。\n* itertools 内置模块中的zip_longest函数可以平行的遍历多个迭代器，而不用在乎它们的长度是否相等。\n\n\n### 不要在for和while循环后面写else语块\n\n* python 有种特殊语法，可在 for及 while 循环的内部语句块之后紧跟一个else块。\n* 只有当整个循环主体都没遇到break语句时，循环后面的else块才会执行。\n* 不要再循环后面使用else块，因为在这种写法即不直观，又容易引人误解。\n\n\n\n\n### 引用\nhttps://www.cnblogs.com/lipandeng/p/11162039.html\nhttps://lingyunfx.com/?page_id=152","source":"_posts/Effective-Python.md","raw":"---\ntitle: Effective Python\ndate: 2020-03-10 19:14:04\ntags: python\n---\n\n# Effective Python\n# 编写高质量代码的59+91个建议读书笔记\n\n### 第一条\n* 确认自己所用的python版本。\n* 确保该版本与你想使用的python版本相符。\n* 优先使用python3\n\n##### Windows平台下：\n`$python --version`\n![a](Effective-Python/2020-03-07-11-15-23.png)\n\n<!-- more -->\n\n##### 其他程序内：\n* Autodesk Maya:\n![b](Effective-Python/2020-03-07-11-18-24.png)\n\n* Substance Designer:\n![c](Effective-Python/2020-03-07-11-19-36.png)\n注：SD里sys.version_info报错，原因未知\n\n* Houdini：\n![d](Effective-Python/2020-03-07-11-22-33.png)\n\nTips： Python中sys模块还有一个常用功能：\n`sys.path`可以用来找到应用程序内的python编译器位置.\n\n### 第二条\n遵循PEP8 风格指南\n《Python Enhancement Proposal #8》（8号Python增强法案）又叫PEP8,它是针对Python代码格式而编订的风格指南。\n* 使用空格来表示缩进，而不要用制表符（tab）。\n* 和语法相关的每一层缩进都用四个空格表示。\n* 每行的字符数不应超过79。\n* 对于占据多行的长表达式，除了首行之外的其余各行都应该在通常的缩进级别之上再加四个空格。\n* 文件中的代码与函数和类之间应该用两个空行隔开。\n* 在同一个类中，各方法之间应该用一个空行隔开。\n* 在使用下标来获取列表元素、调用函数或给关键字参数赋值的时候，不要再两边添加空格。\n* 为变量赋值的时候，赋值符号的左侧和右侧应该各自写上一个空格，而且只写一个。\n\n命名：PEP8 提倡采用不同的命名风格来编写Python代码中的各个部分,以便再阅读代码时可以根据这些名称看出它们的角色。\n* 函数、变量名及属性应该用小写字母，各单词之间用下划线相连，例如，lowercase_underscore。\n* 受保护的实例属性，应该以单个下划线开头，例如，_leading_underscore.\n* 私有的实例属性，应该以两个下划线开头，例如__double_leading_underscore.\n* 类与异常， 应该以每个单词首字母均大写的形式来命名，例如，CapitalizedWord。\n* 模块级别的常量，应该全部采用大写字母来拼写，各单词之间以下划线连接，例如，ALL_CAPS。\n* 类中的实例方法（instance method），应该把首个参数命名self，以表示该对象自身.\n* 类方法（class method）的首个参数，应该命名cls，以表示该类自身。\n\n表达式和语句《The Zen of Python》（python之禅）中说，每件事都应该有直白的做法，而且最好只有一种。\n* 采用内联形式的否定词 ，而不要把否定词放在整个表达式的前面，例如，应该写 if a is not b 而不是 if not a is b。\n* 不要通过检测长度的方法来判断列表是否为空，而是应该采用if not somelist来判定。\n* 同上条，如果判断列表不为空也是一样的， \n* 不要编写单行的if语句、for循环、while循环及except复合语句，而是应该把这些语句分成多行来书写，以示清晰。\n* import语句应该重视放在文件开头.\n* 引入模块的时候，总是应该使用绝对名称，而不应该根据当前模块的路径来使用相对名称，例如，引入bar包中的foo模块时，应该完成的写出 from bar import foo，而不应该简写为import foo。\n* 如果一定要以相对的名称来编写import语句，那就采用明确的写法:from.import foo。\n* 文件中的那些import语句应该按照顺序划分为三个部分，分别为标准库模块、第三方模块以及自用模块。各import语句应该按照模块的字母顺序来排列。\n\nTips： vscode可以采用pylint来自动检测受测代码是否符合pep8。\nhttps://www.pylint.org/\n\n### 第三条\n##### 了解bytes、str、和unicode的区别\n* python3有两种表示字符序列的类型，bytes和str，前者的实例中包含原始的8位值，后者的实例中包含Unicode字符。\n* python2中也有两种表示字符序列的类型，str和Unicode. 前者包含原始的八位值，后者的实例着包含unicode字符。\n![e](Effective-Python/2020-03-07-14-29-10.png)\n* bytes 类型，是指一堆字节的集合，十六进制表现形式，两个十六进制数构成一个 byte ，以 b 开头的字符串是 bytes 类型。计算机只能存储二进制，字符、图片、视频、音乐等想存到硬盘上，必须以正确的方式编码成二进制后再存，但是转成二进制后不是直接以 0101010 的形式表示的，而是用bytes() 的类型来表示的。\n* 把Unicode字符表示为二进制数据（原始八位值）有很多办法，常见且推荐的编码方式就是UTF-8。\n* 但是python3 的str实例和python2的Unicode实例都没有和特定的二进制编码形式相关联，想要把Unicode字符转换为二进制数据，就必须使用encode方法，想要把二进制数据转化成为Unicode字符，则必须使用decode 方法。\n![f](Effective-Python/2020-03-07-14-34-59.png)\n* 在 Python3 中内存里的字符串是以 Unicode 编码的，Unicode 的其中一个特性就是跟所有语言编码都有映射关系，所以 UTF-8 格式的文件，在 Windows 电脑上若是不能看，就可以把 UTF-8 先解码成 Unicode ，再由 Unicode 编码成 GBK 就可以了。\n![g](Effective-Python/2020-03-07-14-32-20.png)\n##### 字符串的转换\n* 在Python3中，接受str或byts，并总是返回str的方法:\n    ```py\n    def to_str(bytes_or_str):\n        if isinstance(bytes_or_str, bytes):#注意这个函数\n            value = bytes_or_str.decode('utf-8')\n        else:\n            value = bytes_or_str\n        return value\n    ```\n* 接受str或bytes，并总是返回bytes的方法：\n    ```py\n    def to_bytes(bytes_or_str):\n        if isinstance(bytes_or_str, str):\n            value = bytes_or_str.encode('utf-8')\n        else:\n            value = bytes_or_str\n        return value\n    ```\n* 在Python2中，接受str或unicode，并总是返回unicode的方法：\n    ```\n    def to_unicode(unicode_or_str):\n        if isinstance(unicode_or_str, str):\n            value = unicode_or_str.decode('utf-8')\n        else:\n            value = unicode_or_str\n        return value\n    ```\n* 接受str或unicode，并总是返回str的方法：\n    ```\n    def to_str(unicode_or_str):\n        if isinstance(unicode_or_str, unicode):\n            value = unicode_or_str.encode('utf-8')\n        else:\n            value = unicode_or_str\n        return value\n    ```\n##### 推荐的文件操作符\n如果通过open函数获取文件句柄，该句柄会采用UTF-8编码格式来操作文件。\n而在Python2中，文件操作的默认编码格式则是二进制形式。这可能会导致程序出现奇怪的错误。\n例如，向文件中随机写入一些二进制数据。下面这种方法Python2中可以正常运行，但是在Python3中则不行：\n```py\nwith open('/tmp/random.bin', 'w') as f:\n    f.write(os.urandom(10))\n>>> TypeError: must be str, not bytes\n```\n上述情况是因为Python3给open函数添加了名为encoding的新参数，而这个新参数默认值是’utf-8′。这样在文件句柄上进行read和write操作时，系统就要求开发者必须传入包含unicode字符的str实例，而不接受包含二进制数据的bytes实例。\n\n解决这个问题，可以用二进制写入模式(‘wb’)来开启待操作的文件，按照这种方式可同时适配Python2和Python3：\n\n```py\nwith open('/tmp/random.bin', 'wb') as f:\n    f.write(os.urandom(10))\n```\n(读取文件也同理，可使用’rb’模式)\n\n### 第四条\n用辅助函数来取代复杂的表达式\n* 开发者很容易过度运用Python的语法特性，从而写出那种特别复杂并且难以理解的单行表达式。\n* 请把复杂的表达式移入辅助函数中。如果要反复使用相同的逻辑，那就更应该那么做。\n* 使用if/esle表达式，要比用or或者and 这样的Boolean操作符写出的表达式更清晰。\n\n### 第五条\n了解切割序列的方法\npython提供了一种把序列切成小块的写法，这种切片操作很容易四开发者轻易的访问序列中的某些元素所构成的子集。  \n最简单的用法，就是对内置list和bytes进行切割。  \n切割操作还可以延伸到实现了__getitem__和__setitem__这两个特殊方法的python类上，参见28条。\n* 不要写多余的代码。但start索引为零或者end索引为序列长度时，应该将其忽略\n* 切片操作不会计较start或者end索引是否越界，这样我们很容易从前端或者后端开始。\n* 对list赋值时，如果使用切片操作，就会把原列表中处在相关范围内的值替换成新值，即便它们的长度不同也依然可以替换。\n\n### 第六条\n在单词切片操作内，不要同时指定start、 end 和 stride \n* 问题在于采用stride方式进行切片时，经常会出现不符合预期的结果\n* 切割列表时，如果制定了stride，代码就会变得费解。尤其是stride为负值的时候更是如此.\n* 在同一个切片操作内，不要同时使用start、end和stride. 如果确实需要执行这种操作，那就考虑将其拆解为两条赋值语句，其中一条做范围切割，另一条做步进，或者考虑使用内置itertools模块中的islice.\n\ntips：\n`mystring[::-1]#反转字符串`\n\n### 第七条\n用列表推导来取代map和filter\npython提供了一种精炼的写法，可以根据一个列表来制作另外一个列表.这种表达式称为list comprehension （列表推导）\n* 列表推导要比内置的map和filter函数清晰\n* 列表推导可以很跳过输入列表中的某些元素\n* 字典与集也支持推导表达式\n\n### 第八条\n不要使用含有两个以上表达式的列表推导\n* 列表推导支持多级循环，每一级循环也支持多项条件\n* 超过两个表达式的列表推导难以理解，应该尽量避免\nTips：\n```py\nmatrix = [[1,2,3],[4,5,6],[7,8,9]]\nflat = [x for row in matrix for x in row]\nprint(flat)\n>>>[1,2,3,4,5,6,7,8,9]\n```\n\n```py\na = [1,2,3,4,5,6,7,8,9,10]\n#下面两种写法是等效的\n#要从列表中取出大于4的偶数\nb = [x for x in a if x>4 if x %2 ==0]\nc = [x for x in a if x>4 and x%2==0]\n```\n\n### 第九条\n用生成器表达式来改写数据量较大的列表推导\n列表推导的缺点是，对于输入序列中的每个值来说，都要创建一项仅含一项元素的全新列表，但输入数据较大时，可能会消耗大量内存，并导致程序崩溃。\n为了解决此问题，python 提供了生成式表达式\n```py\nit = (len(x) for x in open(temp.txt))\nprint(it)\n>>>\n<generator object <genexpr> at 0x101b81480>\nprint(next(it))\nprint(next(it))\n>>>\n100\n57\n```\n\nTips：\n获取文件每行的字符数\n\n```py\nvalue = [len(x) for x in open(temp.txt)]\nprint(value)\n```\n\n* 当输入的数据量较大时，列表推导可能会因为占用太对内存而出问题。\n* 由生成表达式所返回的迭代器，可以逐次产生输出值，从而避免了内存用量问题。\n* 把某个生成器表达式说返回的迭代器，放在另一个生成器表达式的for子表达式中，即可将二者组合起来。\n* 串在一起的生成器表达式执行速度很快。 \n\n### 第十条\n尽量用enumerate取代range\n在一些列的整数上面迭代，内置的range函数很有用，\n当迭代列表的时候，通常还想知道当前元素在列表中的索引。\n```py\nfor i in range(len(flavor_list)):\n    flavor = flavor_lsit[i]\n    print(\"%d:%s\"%(i+1,flavor))\n```\n这种代码不利于理解，python提供了enumerate来解决此问题。enumerate可以把各种迭代器包装为生成器，以便稍后产生输出值，生成器每次产生一对输出值，前者为循环下标，后者表示从迭代器中获取到的下一个序列元素，这样写出来的代码会非常整洁。\n```py\nfor i ,flavor in enumerate(flavor_list):\n    print(\"%d:%s\"%(i+1,flavor))\n```\n\n* enumerate函数提供了一种精简的写法，可以在遍历迭代器时获知每个元素的索引\n* 尽量用enumerate来改写那种将range与下标访问相结合的序列遍历代码\n* 可以给enumerate 提供第二个参数，已指定开始计数时所用的值（默认为0）\n\n\nTips:\n还可以直接指定enumerate开始计数所用的值。\n```py\nfor i ,flavor in enumerate(flavor_list，1):\n    print(\"%d:%s\"%(i,flavor))\n```\n\n### 第十一条\n用zip函数同时遍历两个迭代器\n\n* 使用for循环\n```py\nnames = ['Cecilia', 'Kufu', 'JayChou']\nletters = [len(n) for n in names]\nlongest_name = None\nmax_letters = 0\n\nfor name, count in zip(names, letters):\n    if count > max_letters:\n        longest_name = name\n        max_letters = count\n>>>\nCecilia\n```\n上面这段代码问题在一，整个循环语句看上去很乱，用下标来访问names和letters会使代码不易阅读。\n改用enumerate可以稍稍缓解这个问题，但仍然不够理想。\n\n* 使用for循环加enumerate\n```py\nnames = ['Cecilia', 'Kufu', 'JayChou']\nletters = [len(n) for n in names]\nlongest_name = None\nmax_letters = 0\n\nfor i, name in enumerate(names)：\n    count =letters[i]\n    if count > max_letters:\n        longest_name = name\n        max_letters = count\n```\n* 使用zip\n```py\nnames = ['Cecilia', 'Kufu', 'JayChou']\nletters = [len(n) for n in names]\nlongest_name = None\nmax_letters = 0\n\nfor name, count in zip(names, letter):\n    if count > max_letters:\n        longest_name = name\n        max_letters = count\n```\n\n* 内置的zip函数可以平行的遍历多个迭代器\n* Python3中的zip相当于生成器，会在遍历过程中逐次产生元组，而Python2中的zip则是直接把这些元组完全生成号，并一次性的返回给整份列表。\n* 如果提供的迭代器长度不等，那么zip就会自动提前终止。\n* itertools 内置模块中的zip_longest函数可以平行的遍历多个迭代器，而不用在乎它们的长度是否相等。\n\n\n### 不要在for和while循环后面写else语块\n\n* python 有种特殊语法，可在 for及 while 循环的内部语句块之后紧跟一个else块。\n* 只有当整个循环主体都没遇到break语句时，循环后面的else块才会执行。\n* 不要再循环后面使用else块，因为在这种写法即不直观，又容易引人误解。\n\n\n\n\n### 引用\nhttps://www.cnblogs.com/lipandeng/p/11162039.html\nhttps://lingyunfx.com/?page_id=152","slug":"Effective-Python","published":1,"updated":"2020-03-10T12:17:21.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7lv2jlc0004ycp492dae9st","content":"<h1 id=\"Effective-Python\"><a href=\"#Effective-Python\" class=\"headerlink\" title=\"Effective Python\"></a>Effective Python</h1><h1 id=\"编写高质量代码的59-91个建议读书笔记\"><a href=\"#编写高质量代码的59-91个建议读书笔记\" class=\"headerlink\" title=\"编写高质量代码的59+91个建议读书笔记\"></a>编写高质量代码的59+91个建议读书笔记</h1><h3 id=\"第一条\"><a href=\"#第一条\" class=\"headerlink\" title=\"第一条\"></a>第一条</h3><ul>\n<li>确认自己所用的python版本。</li>\n<li>确保该版本与你想使用的python版本相符。</li>\n<li>优先使用python3</li>\n</ul>\n<h5 id=\"Windows平台下：\"><a href=\"#Windows平台下：\" class=\"headerlink\" title=\"Windows平台下：\"></a>Windows平台下：</h5><p><code>$python --version</code><br><img src=\"/2020/03/10/Effective-Python/2020-03-07-11-15-23.png\" alt=\"a\"></p>\n<a id=\"more\"></a>\n\n<h5 id=\"其他程序内：\"><a href=\"#其他程序内：\" class=\"headerlink\" title=\"其他程序内：\"></a>其他程序内：</h5><ul>\n<li><p>Autodesk Maya:<br><img src=\"/2020/03/10/Effective-Python/2020-03-07-11-18-24.png\" alt=\"b\"></p>\n</li>\n<li><p>Substance Designer:<br><img src=\"/2020/03/10/Effective-Python/2020-03-07-11-19-36.png\" alt=\"c\"><br>注：SD里sys.version_info报错，原因未知</p>\n</li>\n<li><p>Houdini：<br><img src=\"/2020/03/10/Effective-Python/2020-03-07-11-22-33.png\" alt=\"d\"></p>\n</li>\n</ul>\n<p>Tips： Python中sys模块还有一个常用功能：<br><code>sys.path</code>可以用来找到应用程序内的python编译器位置.</p>\n<h3 id=\"第二条\"><a href=\"#第二条\" class=\"headerlink\" title=\"第二条\"></a>第二条</h3><p>遵循PEP8 风格指南<br>《Python Enhancement Proposal #8》（8号Python增强法案）又叫PEP8,它是针对Python代码格式而编订的风格指南。</p>\n<ul>\n<li>使用空格来表示缩进，而不要用制表符（tab）。</li>\n<li>和语法相关的每一层缩进都用四个空格表示。</li>\n<li>每行的字符数不应超过79。</li>\n<li>对于占据多行的长表达式，除了首行之外的其余各行都应该在通常的缩进级别之上再加四个空格。</li>\n<li>文件中的代码与函数和类之间应该用两个空行隔开。</li>\n<li>在同一个类中，各方法之间应该用一个空行隔开。</li>\n<li>在使用下标来获取列表元素、调用函数或给关键字参数赋值的时候，不要再两边添加空格。</li>\n<li>为变量赋值的时候，赋值符号的左侧和右侧应该各自写上一个空格，而且只写一个。</li>\n</ul>\n<p>命名：PEP8 提倡采用不同的命名风格来编写Python代码中的各个部分,以便再阅读代码时可以根据这些名称看出它们的角色。</p>\n<ul>\n<li>函数、变量名及属性应该用小写字母，各单词之间用下划线相连，例如，lowercase_underscore。</li>\n<li>受保护的实例属性，应该以单个下划线开头，例如，_leading_underscore.</li>\n<li>私有的实例属性，应该以两个下划线开头，例如__double_leading_underscore.</li>\n<li>类与异常， 应该以每个单词首字母均大写的形式来命名，例如，CapitalizedWord。</li>\n<li>模块级别的常量，应该全部采用大写字母来拼写，各单词之间以下划线连接，例如，ALL_CAPS。</li>\n<li>类中的实例方法（instance method），应该把首个参数命名self，以表示该对象自身.</li>\n<li>类方法（class method）的首个参数，应该命名cls，以表示该类自身。</li>\n</ul>\n<p>表达式和语句《The Zen of Python》（python之禅）中说，每件事都应该有直白的做法，而且最好只有一种。</p>\n<ul>\n<li>采用内联形式的否定词 ，而不要把否定词放在整个表达式的前面，例如，应该写 if a is not b 而不是 if not a is b。</li>\n<li>不要通过检测长度的方法来判断列表是否为空，而是应该采用if not somelist来判定。</li>\n<li>同上条，如果判断列表不为空也是一样的， </li>\n<li>不要编写单行的if语句、for循环、while循环及except复合语句，而是应该把这些语句分成多行来书写，以示清晰。</li>\n<li>import语句应该重视放在文件开头.</li>\n<li>引入模块的时候，总是应该使用绝对名称，而不应该根据当前模块的路径来使用相对名称，例如，引入bar包中的foo模块时，应该完成的写出 from bar import foo，而不应该简写为import foo。</li>\n<li>如果一定要以相对的名称来编写import语句，那就采用明确的写法:from.import foo。</li>\n<li>文件中的那些import语句应该按照顺序划分为三个部分，分别为标准库模块、第三方模块以及自用模块。各import语句应该按照模块的字母顺序来排列。</li>\n</ul>\n<p>Tips： vscode可以采用pylint来自动检测受测代码是否符合pep8。<br><a href=\"https://www.pylint.org/\" target=\"_blank\" rel=\"noopener\">https://www.pylint.org/</a></p>\n<h3 id=\"第三条\"><a href=\"#第三条\" class=\"headerlink\" title=\"第三条\"></a>第三条</h3><h5 id=\"了解bytes、str、和unicode的区别\"><a href=\"#了解bytes、str、和unicode的区别\" class=\"headerlink\" title=\"了解bytes、str、和unicode的区别\"></a>了解bytes、str、和unicode的区别</h5><ul>\n<li>python3有两种表示字符序列的类型，bytes和str，前者的实例中包含原始的8位值，后者的实例中包含Unicode字符。</li>\n<li>python2中也有两种表示字符序列的类型，str和Unicode. 前者包含原始的八位值，后者的实例着包含unicode字符。<br><img src=\"/2020/03/10/Effective-Python/2020-03-07-14-29-10.png\" alt=\"e\"></li>\n<li>bytes 类型，是指一堆字节的集合，十六进制表现形式，两个十六进制数构成一个 byte ，以 b 开头的字符串是 bytes 类型。计算机只能存储二进制，字符、图片、视频、音乐等想存到硬盘上，必须以正确的方式编码成二进制后再存，但是转成二进制后不是直接以 0101010 的形式表示的，而是用bytes() 的类型来表示的。</li>\n<li>把Unicode字符表示为二进制数据（原始八位值）有很多办法，常见且推荐的编码方式就是UTF-8。</li>\n<li>但是python3 的str实例和python2的Unicode实例都没有和特定的二进制编码形式相关联，想要把Unicode字符转换为二进制数据，就必须使用encode方法，想要把二进制数据转化成为Unicode字符，则必须使用decode 方法。<br><img src=\"/2020/03/10/Effective-Python/2020-03-07-14-34-59.png\" alt=\"f\"></li>\n<li>在 Python3 中内存里的字符串是以 Unicode 编码的，Unicode 的其中一个特性就是跟所有语言编码都有映射关系，所以 UTF-8 格式的文件，在 Windows 电脑上若是不能看，就可以把 UTF-8 先解码成 Unicode ，再由 Unicode 编码成 GBK 就可以了。<br><img src=\"/2020/03/10/Effective-Python/2020-03-07-14-32-20.png\" alt=\"g\"><h5 id=\"字符串的转换\"><a href=\"#字符串的转换\" class=\"headerlink\" title=\"字符串的转换\"></a>字符串的转换</h5></li>\n<li>在Python3中，接受str或byts，并总是返回str的方法:  <figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_str</span><span class=\"params\">(bytes_or_str)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> isinstance(bytes_or_str, bytes):<span class=\"comment\">#注意这个函数</span></span><br><span class=\"line\">        value = bytes_or_str.decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        value = bytes_or_str</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br></pre></td></tr></table></figure></li>\n<li>接受str或bytes，并总是返回bytes的方法：  <figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_bytes</span><span class=\"params\">(bytes_or_str)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> isinstance(bytes_or_str, str):</span><br><span class=\"line\">        value = bytes_or_str.encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        value = bytes_or_str</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br></pre></td></tr></table></figure></li>\n<li>在Python2中，接受str或unicode，并总是返回unicode的方法：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def to_unicode(unicode_or_str):</span><br><span class=\"line\">    if isinstance(unicode_or_str, str):</span><br><span class=\"line\">        value &#x3D; unicode_or_str.decode(&#39;utf-8&#39;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        value &#x3D; unicode_or_str</span><br><span class=\"line\">    return value</span><br></pre></td></tr></table></figure></li>\n<li>接受str或unicode，并总是返回str的方法：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def to_str(unicode_or_str):</span><br><span class=\"line\">    if isinstance(unicode_or_str, unicode):</span><br><span class=\"line\">        value &#x3D; unicode_or_str.encode(&#39;utf-8&#39;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        value &#x3D; unicode_or_str</span><br><span class=\"line\">    return value</span><br></pre></td></tr></table></figure>\n<h5 id=\"推荐的文件操作符\"><a href=\"#推荐的文件操作符\" class=\"headerlink\" title=\"推荐的文件操作符\"></a>推荐的文件操作符</h5>如果通过open函数获取文件句柄，该句柄会采用UTF-8编码格式来操作文件。<br>而在Python2中，文件操作的默认编码格式则是二进制形式。这可能会导致程序出现奇怪的错误。<br>例如，向文件中随机写入一些二进制数据。下面这种方法Python2中可以正常运行，但是在Python3中则不行：<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'/tmp/random.bin'</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(os.urandom(<span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>TypeError: must be str, <span class=\"keyword\">not</span> bytes</span><br></pre></td></tr></table></figure>\n上述情况是因为Python3给open函数添加了名为encoding的新参数，而这个新参数默认值是’utf-8′。这样在文件句柄上进行read和write操作时，系统就要求开发者必须传入包含unicode字符的str实例，而不接受包含二进制数据的bytes实例。</li>\n</ul>\n<p>解决这个问题，可以用二进制写入模式(‘wb’)来开启待操作的文件，按照这种方式可同时适配Python2和Python3：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'/tmp/random.bin'</span>, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(os.urandom(<span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n<p>(读取文件也同理，可使用’rb’模式)</p>\n<h3 id=\"第四条\"><a href=\"#第四条\" class=\"headerlink\" title=\"第四条\"></a>第四条</h3><p>用辅助函数来取代复杂的表达式</p>\n<ul>\n<li>开发者很容易过度运用Python的语法特性，从而写出那种特别复杂并且难以理解的单行表达式。</li>\n<li>请把复杂的表达式移入辅助函数中。如果要反复使用相同的逻辑，那就更应该那么做。</li>\n<li>使用if/esle表达式，要比用or或者and 这样的Boolean操作符写出的表达式更清晰。</li>\n</ul>\n<h3 id=\"第五条\"><a href=\"#第五条\" class=\"headerlink\" title=\"第五条\"></a>第五条</h3><p>了解切割序列的方法<br>python提供了一种把序列切成小块的写法，这种切片操作很容易四开发者轻易的访问序列中的某些元素所构成的子集。<br>最简单的用法，就是对内置list和bytes进行切割。<br>切割操作还可以延伸到实现了<strong>getitem</strong>和<strong>setitem</strong>这两个特殊方法的python类上，参见28条。</p>\n<ul>\n<li>不要写多余的代码。但start索引为零或者end索引为序列长度时，应该将其忽略</li>\n<li>切片操作不会计较start或者end索引是否越界，这样我们很容易从前端或者后端开始。</li>\n<li>对list赋值时，如果使用切片操作，就会把原列表中处在相关范围内的值替换成新值，即便它们的长度不同也依然可以替换。</li>\n</ul>\n<h3 id=\"第六条\"><a href=\"#第六条\" class=\"headerlink\" title=\"第六条\"></a>第六条</h3><p>在单词切片操作内，不要同时指定start、 end 和 stride </p>\n<ul>\n<li>问题在于采用stride方式进行切片时，经常会出现不符合预期的结果</li>\n<li>切割列表时，如果制定了stride，代码就会变得费解。尤其是stride为负值的时候更是如此.</li>\n<li>在同一个切片操作内，不要同时使用start、end和stride. 如果确实需要执行这种操作，那就考虑将其拆解为两条赋值语句，其中一条做范围切割，另一条做步进，或者考虑使用内置itertools模块中的islice.</li>\n</ul>\n<p>tips：<br><code>mystring[::-1]#反转字符串</code></p>\n<h3 id=\"第七条\"><a href=\"#第七条\" class=\"headerlink\" title=\"第七条\"></a>第七条</h3><p>用列表推导来取代map和filter<br>python提供了一种精炼的写法，可以根据一个列表来制作另外一个列表.这种表达式称为list comprehension （列表推导）</p>\n<ul>\n<li>列表推导要比内置的map和filter函数清晰</li>\n<li>列表推导可以很跳过输入列表中的某些元素</li>\n<li>字典与集也支持推导表达式</li>\n</ul>\n<h3 id=\"第八条\"><a href=\"#第八条\" class=\"headerlink\" title=\"第八条\"></a>第八条</h3><p>不要使用含有两个以上表达式的列表推导</p>\n<ul>\n<li>列表推导支持多级循环，每一级循环也支持多项条件</li>\n<li>超过两个表达式的列表推导难以理解，应该尽量避免<br>Tips：<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">matrix = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>],[<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]]</span><br><span class=\"line\">flat = [x <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> matrix <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> row]</span><br><span class=\"line\">print(flat)</span><br><span class=\"line\">&gt;&gt;&gt;[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>]</span><br><span class=\"line\"><span class=\"comment\">#下面两种写法是等效的</span></span><br><span class=\"line\"><span class=\"comment\">#要从列表中取出大于4的偶数</span></span><br><span class=\"line\">b = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> a <span class=\"keyword\">if</span> x&gt;<span class=\"number\">4</span> <span class=\"keyword\">if</span> x %<span class=\"number\">2</span> ==<span class=\"number\">0</span>]</span><br><span class=\"line\">c = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> a <span class=\"keyword\">if</span> x&gt;<span class=\"number\">4</span> <span class=\"keyword\">and</span> x%<span class=\"number\">2</span>==<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第九条\"><a href=\"#第九条\" class=\"headerlink\" title=\"第九条\"></a>第九条</h3><p>用生成器表达式来改写数据量较大的列表推导<br>列表推导的缺点是，对于输入序列中的每个值来说，都要创建一项仅含一项元素的全新列表，但输入数据较大时，可能会消耗大量内存，并导致程序崩溃。<br>为了解决此问题，python 提供了生成式表达式</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it = (len(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> open(temp.txt))</span><br><span class=\"line\">print(it)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">&lt;generator object &lt;genexpr&gt; at <span class=\"number\">0x101b81480</span>&gt;</span><br><span class=\"line\">print(next(it))</span><br><span class=\"line\">print(next(it))</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">57</span></span><br></pre></td></tr></table></figure>\n\n<p>Tips：<br>获取文件每行的字符数</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value = [len(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> open(temp.txt)]</span><br><span class=\"line\">print(value)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当输入的数据量较大时，列表推导可能会因为占用太对内存而出问题。</li>\n<li>由生成表达式所返回的迭代器，可以逐次产生输出值，从而避免了内存用量问题。</li>\n<li>把某个生成器表达式说返回的迭代器，放在另一个生成器表达式的for子表达式中，即可将二者组合起来。</li>\n<li>串在一起的生成器表达式执行速度很快。 </li>\n</ul>\n<h3 id=\"第十条\"><a href=\"#第十条\" class=\"headerlink\" title=\"第十条\"></a>第十条</h3><p>尽量用enumerate取代range<br>在一些列的整数上面迭代，内置的range函数很有用，<br>当迭代列表的时候，通常还想知道当前元素在列表中的索引。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(flavor_list)):</span><br><span class=\"line\">    flavor = flavor_lsit[i]</span><br><span class=\"line\">    print(<span class=\"string\">\"%d:%s\"</span>%(i+<span class=\"number\">1</span>,flavor))</span><br></pre></td></tr></table></figure>\n<p>这种代码不利于理解，python提供了enumerate来解决此问题。enumerate可以把各种迭代器包装为生成器，以便稍后产生输出值，生成器每次产生一对输出值，前者为循环下标，后者表示从迭代器中获取到的下一个序列元素，这样写出来的代码会非常整洁。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i ,flavor <span class=\"keyword\">in</span> enumerate(flavor_list):</span><br><span class=\"line\">    print(<span class=\"string\">\"%d:%s\"</span>%(i+<span class=\"number\">1</span>,flavor))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>enumerate函数提供了一种精简的写法，可以在遍历迭代器时获知每个元素的索引</li>\n<li>尽量用enumerate来改写那种将range与下标访问相结合的序列遍历代码</li>\n<li>可以给enumerate 提供第二个参数，已指定开始计数时所用的值（默认为0）</li>\n</ul>\n<p>Tips:<br>还可以直接指定enumerate开始计数所用的值。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i ,flavor <span class=\"keyword\">in</span> enumerate(flavor_list，<span class=\"number\">1</span>):</span><br><span class=\"line\">    print(<span class=\"string\">\"%d:%s\"</span>%(i,flavor))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第十一条\"><a href=\"#第十一条\" class=\"headerlink\" title=\"第十一条\"></a>第十一条</h3><p>用zip函数同时遍历两个迭代器</p>\n<ul>\n<li><p>使用for循环</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">names = [<span class=\"string\">'Cecilia'</span>, <span class=\"string\">'Kufu'</span>, <span class=\"string\">'JayChou'</span>]</span><br><span class=\"line\">letters = [len(n) <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> names]</span><br><span class=\"line\">longest_name = <span class=\"literal\">None</span></span><br><span class=\"line\">max_letters = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> name, count <span class=\"keyword\">in</span> zip(names, letters):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> count &gt; max_letters:</span><br><span class=\"line\">        longest_name = name</span><br><span class=\"line\">        max_letters = count</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">Cecilia</span><br></pre></td></tr></table></figure>\n<p>上面这段代码问题在一，整个循环语句看上去很乱，用下标来访问names和letters会使代码不易阅读。<br>改用enumerate可以稍稍缓解这个问题，但仍然不够理想。</p>\n</li>\n<li><p>使用for循环加enumerate</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">names = [<span class=\"string\">'Cecilia'</span>, <span class=\"string\">'Kufu'</span>, <span class=\"string\">'JayChou'</span>]</span><br><span class=\"line\">letters = [len(n) <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> names]</span><br><span class=\"line\">longest_name = <span class=\"literal\">None</span></span><br><span class=\"line\">max_letters = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i, name <span class=\"keyword\">in</span> enumerate(names)：</span><br><span class=\"line\">    count =letters[i]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> count &gt; max_letters:</span><br><span class=\"line\">        longest_name = name</span><br><span class=\"line\">        max_letters = count</span><br></pre></td></tr></table></figure></li>\n<li><p>使用zip</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">names = [<span class=\"string\">'Cecilia'</span>, <span class=\"string\">'Kufu'</span>, <span class=\"string\">'JayChou'</span>]</span><br><span class=\"line\">letters = [len(n) <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> names]</span><br><span class=\"line\">longest_name = <span class=\"literal\">None</span></span><br><span class=\"line\">max_letters = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> name, count <span class=\"keyword\">in</span> zip(names, letter):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> count &gt; max_letters:</span><br><span class=\"line\">        longest_name = name</span><br><span class=\"line\">        max_letters = count</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>内置的zip函数可以平行的遍历多个迭代器</p>\n</li>\n<li><p>Python3中的zip相当于生成器，会在遍历过程中逐次产生元组，而Python2中的zip则是直接把这些元组完全生成号，并一次性的返回给整份列表。</p>\n</li>\n<li><p>如果提供的迭代器长度不等，那么zip就会自动提前终止。</p>\n</li>\n<li><p>itertools 内置模块中的zip_longest函数可以平行的遍历多个迭代器，而不用在乎它们的长度是否相等。</p>\n</li>\n</ul>\n<h3 id=\"不要在for和while循环后面写else语块\"><a href=\"#不要在for和while循环后面写else语块\" class=\"headerlink\" title=\"不要在for和while循环后面写else语块\"></a>不要在for和while循环后面写else语块</h3><ul>\n<li>python 有种特殊语法，可在 for及 while 循环的内部语句块之后紧跟一个else块。</li>\n<li>只有当整个循环主体都没遇到break语句时，循环后面的else块才会执行。</li>\n<li>不要再循环后面使用else块，因为在这种写法即不直观，又容易引人误解。</li>\n</ul>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p><a href=\"https://www.cnblogs.com/lipandeng/p/11162039.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/lipandeng/p/11162039.html</a><br><a href=\"https://lingyunfx.com/?page_id=152\" target=\"_blank\" rel=\"noopener\">https://lingyunfx.com/?page_id=152</a></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#2d6b96","paginator":"#6AA7D2","button_hover":"#3B8BC4","text_selection":"#6AA7D2","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#6AA7D2","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"文章":"/","归档":"/archives"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":true,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":null,"top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2013,"footer_custom_text":"Hi, welcome to my <a href=\"https://sunyuxianggit.github.io/\">blog</a>!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":true,"url":"https://github.com/sunyuxianggit","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"SunYuxiangのBlog","subtitle":"好记性,不如烂笔头.今天你要写点什么？","description":"","author":"Sun Yuxiang","language":"zh-Hans","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/sunyuxianggit/sunyuxianggit.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"category_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"<h1 id=\"Effective-Python\"><a href=\"#Effective-Python\" class=\"headerlink\" title=\"Effective Python\"></a>Effective Python</h1><h1 id=\"编写高质量代码的59-91个建议读书笔记\"><a href=\"#编写高质量代码的59-91个建议读书笔记\" class=\"headerlink\" title=\"编写高质量代码的59+91个建议读书笔记\"></a>编写高质量代码的59+91个建议读书笔记</h1><h3 id=\"第一条\"><a href=\"#第一条\" class=\"headerlink\" title=\"第一条\"></a>第一条</h3><ul>\n<li>确认自己所用的python版本。</li>\n<li>确保该版本与你想使用的python版本相符。</li>\n<li>优先使用python3</li>\n</ul>\n<h5 id=\"Windows平台下：\"><a href=\"#Windows平台下：\" class=\"headerlink\" title=\"Windows平台下：\"></a>Windows平台下：</h5><p><code>$python --version</code><br><img src=\"/2020/03/10/Effective-Python/2020-03-07-11-15-23.png\" alt=\"a\"></p>","more":"<h5 id=\"其他程序内：\"><a href=\"#其他程序内：\" class=\"headerlink\" title=\"其他程序内：\"></a>其他程序内：</h5><ul>\n<li><p>Autodesk Maya:<br><img src=\"/2020/03/10/Effective-Python/2020-03-07-11-18-24.png\" alt=\"b\"></p>\n</li>\n<li><p>Substance Designer:<br><img src=\"/2020/03/10/Effective-Python/2020-03-07-11-19-36.png\" alt=\"c\"><br>注：SD里sys.version_info报错，原因未知</p>\n</li>\n<li><p>Houdini：<br><img src=\"/2020/03/10/Effective-Python/2020-03-07-11-22-33.png\" alt=\"d\"></p>\n</li>\n</ul>\n<p>Tips： Python中sys模块还有一个常用功能：<br><code>sys.path</code>可以用来找到应用程序内的python编译器位置.</p>\n<h3 id=\"第二条\"><a href=\"#第二条\" class=\"headerlink\" title=\"第二条\"></a>第二条</h3><p>遵循PEP8 风格指南<br>《Python Enhancement Proposal #8》（8号Python增强法案）又叫PEP8,它是针对Python代码格式而编订的风格指南。</p>\n<ul>\n<li>使用空格来表示缩进，而不要用制表符（tab）。</li>\n<li>和语法相关的每一层缩进都用四个空格表示。</li>\n<li>每行的字符数不应超过79。</li>\n<li>对于占据多行的长表达式，除了首行之外的其余各行都应该在通常的缩进级别之上再加四个空格。</li>\n<li>文件中的代码与函数和类之间应该用两个空行隔开。</li>\n<li>在同一个类中，各方法之间应该用一个空行隔开。</li>\n<li>在使用下标来获取列表元素、调用函数或给关键字参数赋值的时候，不要再两边添加空格。</li>\n<li>为变量赋值的时候，赋值符号的左侧和右侧应该各自写上一个空格，而且只写一个。</li>\n</ul>\n<p>命名：PEP8 提倡采用不同的命名风格来编写Python代码中的各个部分,以便再阅读代码时可以根据这些名称看出它们的角色。</p>\n<ul>\n<li>函数、变量名及属性应该用小写字母，各单词之间用下划线相连，例如，lowercase_underscore。</li>\n<li>受保护的实例属性，应该以单个下划线开头，例如，_leading_underscore.</li>\n<li>私有的实例属性，应该以两个下划线开头，例如__double_leading_underscore.</li>\n<li>类与异常， 应该以每个单词首字母均大写的形式来命名，例如，CapitalizedWord。</li>\n<li>模块级别的常量，应该全部采用大写字母来拼写，各单词之间以下划线连接，例如，ALL_CAPS。</li>\n<li>类中的实例方法（instance method），应该把首个参数命名self，以表示该对象自身.</li>\n<li>类方法（class method）的首个参数，应该命名cls，以表示该类自身。</li>\n</ul>\n<p>表达式和语句《The Zen of Python》（python之禅）中说，每件事都应该有直白的做法，而且最好只有一种。</p>\n<ul>\n<li>采用内联形式的否定词 ，而不要把否定词放在整个表达式的前面，例如，应该写 if a is not b 而不是 if not a is b。</li>\n<li>不要通过检测长度的方法来判断列表是否为空，而是应该采用if not somelist来判定。</li>\n<li>同上条，如果判断列表不为空也是一样的， </li>\n<li>不要编写单行的if语句、for循环、while循环及except复合语句，而是应该把这些语句分成多行来书写，以示清晰。</li>\n<li>import语句应该重视放在文件开头.</li>\n<li>引入模块的时候，总是应该使用绝对名称，而不应该根据当前模块的路径来使用相对名称，例如，引入bar包中的foo模块时，应该完成的写出 from bar import foo，而不应该简写为import foo。</li>\n<li>如果一定要以相对的名称来编写import语句，那就采用明确的写法:from.import foo。</li>\n<li>文件中的那些import语句应该按照顺序划分为三个部分，分别为标准库模块、第三方模块以及自用模块。各import语句应该按照模块的字母顺序来排列。</li>\n</ul>\n<p>Tips： vscode可以采用pylint来自动检测受测代码是否符合pep8。<br><a href=\"https://www.pylint.org/\" target=\"_blank\" rel=\"noopener\">https://www.pylint.org/</a></p>\n<h3 id=\"第三条\"><a href=\"#第三条\" class=\"headerlink\" title=\"第三条\"></a>第三条</h3><h5 id=\"了解bytes、str、和unicode的区别\"><a href=\"#了解bytes、str、和unicode的区别\" class=\"headerlink\" title=\"了解bytes、str、和unicode的区别\"></a>了解bytes、str、和unicode的区别</h5><ul>\n<li>python3有两种表示字符序列的类型，bytes和str，前者的实例中包含原始的8位值，后者的实例中包含Unicode字符。</li>\n<li>python2中也有两种表示字符序列的类型，str和Unicode. 前者包含原始的八位值，后者的实例着包含unicode字符。<br><img src=\"/2020/03/10/Effective-Python/2020-03-07-14-29-10.png\" alt=\"e\"></li>\n<li>bytes 类型，是指一堆字节的集合，十六进制表现形式，两个十六进制数构成一个 byte ，以 b 开头的字符串是 bytes 类型。计算机只能存储二进制，字符、图片、视频、音乐等想存到硬盘上，必须以正确的方式编码成二进制后再存，但是转成二进制后不是直接以 0101010 的形式表示的，而是用bytes() 的类型来表示的。</li>\n<li>把Unicode字符表示为二进制数据（原始八位值）有很多办法，常见且推荐的编码方式就是UTF-8。</li>\n<li>但是python3 的str实例和python2的Unicode实例都没有和特定的二进制编码形式相关联，想要把Unicode字符转换为二进制数据，就必须使用encode方法，想要把二进制数据转化成为Unicode字符，则必须使用decode 方法。<br><img src=\"/2020/03/10/Effective-Python/2020-03-07-14-34-59.png\" alt=\"f\"></li>\n<li>在 Python3 中内存里的字符串是以 Unicode 编码的，Unicode 的其中一个特性就是跟所有语言编码都有映射关系，所以 UTF-8 格式的文件，在 Windows 电脑上若是不能看，就可以把 UTF-8 先解码成 Unicode ，再由 Unicode 编码成 GBK 就可以了。<br><img src=\"/2020/03/10/Effective-Python/2020-03-07-14-32-20.png\" alt=\"g\"><h5 id=\"字符串的转换\"><a href=\"#字符串的转换\" class=\"headerlink\" title=\"字符串的转换\"></a>字符串的转换</h5></li>\n<li>在Python3中，接受str或byts，并总是返回str的方法:  <figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_str</span><span class=\"params\">(bytes_or_str)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> isinstance(bytes_or_str, bytes):<span class=\"comment\">#注意这个函数</span></span><br><span class=\"line\">        value = bytes_or_str.decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        value = bytes_or_str</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br></pre></td></tr></table></figure></li>\n<li>接受str或bytes，并总是返回bytes的方法：  <figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_bytes</span><span class=\"params\">(bytes_or_str)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> isinstance(bytes_or_str, str):</span><br><span class=\"line\">        value = bytes_or_str.encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        value = bytes_or_str</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br></pre></td></tr></table></figure></li>\n<li>在Python2中，接受str或unicode，并总是返回unicode的方法：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def to_unicode(unicode_or_str):</span><br><span class=\"line\">    if isinstance(unicode_or_str, str):</span><br><span class=\"line\">        value &#x3D; unicode_or_str.decode(&#39;utf-8&#39;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        value &#x3D; unicode_or_str</span><br><span class=\"line\">    return value</span><br></pre></td></tr></table></figure></li>\n<li>接受str或unicode，并总是返回str的方法：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def to_str(unicode_or_str):</span><br><span class=\"line\">    if isinstance(unicode_or_str, unicode):</span><br><span class=\"line\">        value &#x3D; unicode_or_str.encode(&#39;utf-8&#39;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        value &#x3D; unicode_or_str</span><br><span class=\"line\">    return value</span><br></pre></td></tr></table></figure>\n<h5 id=\"推荐的文件操作符\"><a href=\"#推荐的文件操作符\" class=\"headerlink\" title=\"推荐的文件操作符\"></a>推荐的文件操作符</h5>如果通过open函数获取文件句柄，该句柄会采用UTF-8编码格式来操作文件。<br>而在Python2中，文件操作的默认编码格式则是二进制形式。这可能会导致程序出现奇怪的错误。<br>例如，向文件中随机写入一些二进制数据。下面这种方法Python2中可以正常运行，但是在Python3中则不行：<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'/tmp/random.bin'</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(os.urandom(<span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>TypeError: must be str, <span class=\"keyword\">not</span> bytes</span><br></pre></td></tr></table></figure>\n上述情况是因为Python3给open函数添加了名为encoding的新参数，而这个新参数默认值是’utf-8′。这样在文件句柄上进行read和write操作时，系统就要求开发者必须传入包含unicode字符的str实例，而不接受包含二进制数据的bytes实例。</li>\n</ul>\n<p>解决这个问题，可以用二进制写入模式(‘wb’)来开启待操作的文件，按照这种方式可同时适配Python2和Python3：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'/tmp/random.bin'</span>, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(os.urandom(<span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n<p>(读取文件也同理，可使用’rb’模式)</p>\n<h3 id=\"第四条\"><a href=\"#第四条\" class=\"headerlink\" title=\"第四条\"></a>第四条</h3><p>用辅助函数来取代复杂的表达式</p>\n<ul>\n<li>开发者很容易过度运用Python的语法特性，从而写出那种特别复杂并且难以理解的单行表达式。</li>\n<li>请把复杂的表达式移入辅助函数中。如果要反复使用相同的逻辑，那就更应该那么做。</li>\n<li>使用if/esle表达式，要比用or或者and 这样的Boolean操作符写出的表达式更清晰。</li>\n</ul>\n<h3 id=\"第五条\"><a href=\"#第五条\" class=\"headerlink\" title=\"第五条\"></a>第五条</h3><p>了解切割序列的方法<br>python提供了一种把序列切成小块的写法，这种切片操作很容易四开发者轻易的访问序列中的某些元素所构成的子集。<br>最简单的用法，就是对内置list和bytes进行切割。<br>切割操作还可以延伸到实现了<strong>getitem</strong>和<strong>setitem</strong>这两个特殊方法的python类上，参见28条。</p>\n<ul>\n<li>不要写多余的代码。但start索引为零或者end索引为序列长度时，应该将其忽略</li>\n<li>切片操作不会计较start或者end索引是否越界，这样我们很容易从前端或者后端开始。</li>\n<li>对list赋值时，如果使用切片操作，就会把原列表中处在相关范围内的值替换成新值，即便它们的长度不同也依然可以替换。</li>\n</ul>\n<h3 id=\"第六条\"><a href=\"#第六条\" class=\"headerlink\" title=\"第六条\"></a>第六条</h3><p>在单词切片操作内，不要同时指定start、 end 和 stride </p>\n<ul>\n<li>问题在于采用stride方式进行切片时，经常会出现不符合预期的结果</li>\n<li>切割列表时，如果制定了stride，代码就会变得费解。尤其是stride为负值的时候更是如此.</li>\n<li>在同一个切片操作内，不要同时使用start、end和stride. 如果确实需要执行这种操作，那就考虑将其拆解为两条赋值语句，其中一条做范围切割，另一条做步进，或者考虑使用内置itertools模块中的islice.</li>\n</ul>\n<p>tips：<br><code>mystring[::-1]#反转字符串</code></p>\n<h3 id=\"第七条\"><a href=\"#第七条\" class=\"headerlink\" title=\"第七条\"></a>第七条</h3><p>用列表推导来取代map和filter<br>python提供了一种精炼的写法，可以根据一个列表来制作另外一个列表.这种表达式称为list comprehension （列表推导）</p>\n<ul>\n<li>列表推导要比内置的map和filter函数清晰</li>\n<li>列表推导可以很跳过输入列表中的某些元素</li>\n<li>字典与集也支持推导表达式</li>\n</ul>\n<h3 id=\"第八条\"><a href=\"#第八条\" class=\"headerlink\" title=\"第八条\"></a>第八条</h3><p>不要使用含有两个以上表达式的列表推导</p>\n<ul>\n<li>列表推导支持多级循环，每一级循环也支持多项条件</li>\n<li>超过两个表达式的列表推导难以理解，应该尽量避免<br>Tips：<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">matrix = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>],[<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]]</span><br><span class=\"line\">flat = [x <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> matrix <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> row]</span><br><span class=\"line\">print(flat)</span><br><span class=\"line\">&gt;&gt;&gt;[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>]</span><br><span class=\"line\"><span class=\"comment\">#下面两种写法是等效的</span></span><br><span class=\"line\"><span class=\"comment\">#要从列表中取出大于4的偶数</span></span><br><span class=\"line\">b = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> a <span class=\"keyword\">if</span> x&gt;<span class=\"number\">4</span> <span class=\"keyword\">if</span> x %<span class=\"number\">2</span> ==<span class=\"number\">0</span>]</span><br><span class=\"line\">c = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> a <span class=\"keyword\">if</span> x&gt;<span class=\"number\">4</span> <span class=\"keyword\">and</span> x%<span class=\"number\">2</span>==<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第九条\"><a href=\"#第九条\" class=\"headerlink\" title=\"第九条\"></a>第九条</h3><p>用生成器表达式来改写数据量较大的列表推导<br>列表推导的缺点是，对于输入序列中的每个值来说，都要创建一项仅含一项元素的全新列表，但输入数据较大时，可能会消耗大量内存，并导致程序崩溃。<br>为了解决此问题，python 提供了生成式表达式</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it = (len(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> open(temp.txt))</span><br><span class=\"line\">print(it)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">&lt;generator object &lt;genexpr&gt; at <span class=\"number\">0x101b81480</span>&gt;</span><br><span class=\"line\">print(next(it))</span><br><span class=\"line\">print(next(it))</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">57</span></span><br></pre></td></tr></table></figure>\n\n<p>Tips：<br>获取文件每行的字符数</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value = [len(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> open(temp.txt)]</span><br><span class=\"line\">print(value)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当输入的数据量较大时，列表推导可能会因为占用太对内存而出问题。</li>\n<li>由生成表达式所返回的迭代器，可以逐次产生输出值，从而避免了内存用量问题。</li>\n<li>把某个生成器表达式说返回的迭代器，放在另一个生成器表达式的for子表达式中，即可将二者组合起来。</li>\n<li>串在一起的生成器表达式执行速度很快。 </li>\n</ul>\n<h3 id=\"第十条\"><a href=\"#第十条\" class=\"headerlink\" title=\"第十条\"></a>第十条</h3><p>尽量用enumerate取代range<br>在一些列的整数上面迭代，内置的range函数很有用，<br>当迭代列表的时候，通常还想知道当前元素在列表中的索引。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(flavor_list)):</span><br><span class=\"line\">    flavor = flavor_lsit[i]</span><br><span class=\"line\">    print(<span class=\"string\">\"%d:%s\"</span>%(i+<span class=\"number\">1</span>,flavor))</span><br></pre></td></tr></table></figure>\n<p>这种代码不利于理解，python提供了enumerate来解决此问题。enumerate可以把各种迭代器包装为生成器，以便稍后产生输出值，生成器每次产生一对输出值，前者为循环下标，后者表示从迭代器中获取到的下一个序列元素，这样写出来的代码会非常整洁。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i ,flavor <span class=\"keyword\">in</span> enumerate(flavor_list):</span><br><span class=\"line\">    print(<span class=\"string\">\"%d:%s\"</span>%(i+<span class=\"number\">1</span>,flavor))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>enumerate函数提供了一种精简的写法，可以在遍历迭代器时获知每个元素的索引</li>\n<li>尽量用enumerate来改写那种将range与下标访问相结合的序列遍历代码</li>\n<li>可以给enumerate 提供第二个参数，已指定开始计数时所用的值（默认为0）</li>\n</ul>\n<p>Tips:<br>还可以直接指定enumerate开始计数所用的值。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i ,flavor <span class=\"keyword\">in</span> enumerate(flavor_list，<span class=\"number\">1</span>):</span><br><span class=\"line\">    print(<span class=\"string\">\"%d:%s\"</span>%(i,flavor))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第十一条\"><a href=\"#第十一条\" class=\"headerlink\" title=\"第十一条\"></a>第十一条</h3><p>用zip函数同时遍历两个迭代器</p>\n<ul>\n<li><p>使用for循环</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">names = [<span class=\"string\">'Cecilia'</span>, <span class=\"string\">'Kufu'</span>, <span class=\"string\">'JayChou'</span>]</span><br><span class=\"line\">letters = [len(n) <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> names]</span><br><span class=\"line\">longest_name = <span class=\"literal\">None</span></span><br><span class=\"line\">max_letters = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> name, count <span class=\"keyword\">in</span> zip(names, letters):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> count &gt; max_letters:</span><br><span class=\"line\">        longest_name = name</span><br><span class=\"line\">        max_letters = count</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">Cecilia</span><br></pre></td></tr></table></figure>\n<p>上面这段代码问题在一，整个循环语句看上去很乱，用下标来访问names和letters会使代码不易阅读。<br>改用enumerate可以稍稍缓解这个问题，但仍然不够理想。</p>\n</li>\n<li><p>使用for循环加enumerate</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">names = [<span class=\"string\">'Cecilia'</span>, <span class=\"string\">'Kufu'</span>, <span class=\"string\">'JayChou'</span>]</span><br><span class=\"line\">letters = [len(n) <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> names]</span><br><span class=\"line\">longest_name = <span class=\"literal\">None</span></span><br><span class=\"line\">max_letters = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i, name <span class=\"keyword\">in</span> enumerate(names)：</span><br><span class=\"line\">    count =letters[i]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> count &gt; max_letters:</span><br><span class=\"line\">        longest_name = name</span><br><span class=\"line\">        max_letters = count</span><br></pre></td></tr></table></figure></li>\n<li><p>使用zip</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">names = [<span class=\"string\">'Cecilia'</span>, <span class=\"string\">'Kufu'</span>, <span class=\"string\">'JayChou'</span>]</span><br><span class=\"line\">letters = [len(n) <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> names]</span><br><span class=\"line\">longest_name = <span class=\"literal\">None</span></span><br><span class=\"line\">max_letters = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> name, count <span class=\"keyword\">in</span> zip(names, letter):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> count &gt; max_letters:</span><br><span class=\"line\">        longest_name = name</span><br><span class=\"line\">        max_letters = count</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>内置的zip函数可以平行的遍历多个迭代器</p>\n</li>\n<li><p>Python3中的zip相当于生成器，会在遍历过程中逐次产生元组，而Python2中的zip则是直接把这些元组完全生成号，并一次性的返回给整份列表。</p>\n</li>\n<li><p>如果提供的迭代器长度不等，那么zip就会自动提前终止。</p>\n</li>\n<li><p>itertools 内置模块中的zip_longest函数可以平行的遍历多个迭代器，而不用在乎它们的长度是否相等。</p>\n</li>\n</ul>\n<h3 id=\"不要在for和while循环后面写else语块\"><a href=\"#不要在for和while循环后面写else语块\" class=\"headerlink\" title=\"不要在for和while循环后面写else语块\"></a>不要在for和while循环后面写else语块</h3><ul>\n<li>python 有种特殊语法，可在 for及 while 循环的内部语句块之后紧跟一个else块。</li>\n<li>只有当整个循环主体都没遇到break语句时，循环后面的else块才会执行。</li>\n<li>不要再循环后面使用else块，因为在这种写法即不直观，又容易引人误解。</li>\n</ul>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p><a href=\"https://www.cnblogs.com/lipandeng/p/11162039.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/lipandeng/p/11162039.html</a><br><a href=\"https://lingyunfx.com/?page_id=152\" target=\"_blank\" rel=\"noopener\">https://lingyunfx.com/?page_id=152</a></p>"},{"title":"Maya卡顿优化","date":"2020-03-09T15:50:34.000Z","_content":"\n\n# 针对美术制作的 Maya 卡顿优化\n\n## CPU\n\n### 信息获取\n\n- 解释分析器\n- 求值工具包\n\n## GPU\n\n### \t信息获取\n\n- Viewport 2.0,必须拥有正确的图形配置和图形驱动程序版本。有关 Maya 认证显卡和最新驱动程序版本的信息：\n\n  https://knowledge.autodesk.com/certified-graphics-hardware\n\n  \n\n- GPU 内存\n\n  对于包含大量纹理、几何体或缓存动画的场景，请务必记下显卡上可用的 GPU RAM 量，如果 GPU RAM 使用量非常接近显卡的 GPU RAM 限制，纹理可能无法加载，并且场景可能显示为着色模式。此时将显示一条错误信息，指明已超出纹理 RAM 限制并建议您减小“最大纹理分辨率”(Max Texture Resolution)钳制。\n\n  查看 GPU 内存使用情况（以 MB 为单位），请使用Mel命令 \n\n  <!-- more -->\n\n  ```\n  ogs -gpu\n  ```\n\n  如图：\n\n  ![1558686550786](Maya卡顿优化/1558686550786.png)\n\n- 查看卡的 GPU RAM 限制，请参见“Maya 的输出窗口”(Output Window of Maya)。\n\n  ![图片1](Maya卡顿优化/1558686723618.png)\n\n### \t如何优化\n\n- 尽量关闭屏幕空间环境光遮挡、多重采样抗锯齿、运动模糊。\n\n- 不使用复杂的Shader（例如复杂的 ShaderFX 网络）或大量使用 DirectX 11 ubershader 的场景。\n\n- 禁用灯光和灯光阴影。\n\n- GPU 实例化可减少 GPU 内存使用量。\n\n  ![图片2](Maya卡顿优化/1558687101606.png)\n\n- 减小摄影机的远剪裁距离，以便在视口中显示较少的几何体\n\n- 隐藏无需显示的对象\n\n- 卸载引用文件\n\n- 将对象更改为Bounding Box模式\n\n- 关闭多个Maya，同时运行 Maya 和其他 3D 程序，需要额外的 GPU 内存。\n\n- 可以考虑使用GPU缓存工作流程\n\n  ![图片3](Maya卡顿优化/1558688555512.png)\n\n  关于GPU缓存工作流程的更多内容：\n\n  https://knowledge.autodesk.com/zh-hans/support/maya/learn-explore/caas/CloudHelp/cloudhelp/2018/CHS/Maya-ManagingScenes/files/GUID-C893BE60-6E65-4F36-8005-FD4D1A0E9822-htm.html\n\n","source":"_posts/Maya卡顿优化.md","raw":"---\ntitle: Maya卡顿优化\ndate: 2020-03-09 23:50:34\ntags: Maya\n---\n\n\n# 针对美术制作的 Maya 卡顿优化\n\n## CPU\n\n### 信息获取\n\n- 解释分析器\n- 求值工具包\n\n## GPU\n\n### \t信息获取\n\n- Viewport 2.0,必须拥有正确的图形配置和图形驱动程序版本。有关 Maya 认证显卡和最新驱动程序版本的信息：\n\n  https://knowledge.autodesk.com/certified-graphics-hardware\n\n  \n\n- GPU 内存\n\n  对于包含大量纹理、几何体或缓存动画的场景，请务必记下显卡上可用的 GPU RAM 量，如果 GPU RAM 使用量非常接近显卡的 GPU RAM 限制，纹理可能无法加载，并且场景可能显示为着色模式。此时将显示一条错误信息，指明已超出纹理 RAM 限制并建议您减小“最大纹理分辨率”(Max Texture Resolution)钳制。\n\n  查看 GPU 内存使用情况（以 MB 为单位），请使用Mel命令 \n\n  <!-- more -->\n\n  ```\n  ogs -gpu\n  ```\n\n  如图：\n\n  ![1558686550786](Maya卡顿优化/1558686550786.png)\n\n- 查看卡的 GPU RAM 限制，请参见“Maya 的输出窗口”(Output Window of Maya)。\n\n  ![图片1](Maya卡顿优化/1558686723618.png)\n\n### \t如何优化\n\n- 尽量关闭屏幕空间环境光遮挡、多重采样抗锯齿、运动模糊。\n\n- 不使用复杂的Shader（例如复杂的 ShaderFX 网络）或大量使用 DirectX 11 ubershader 的场景。\n\n- 禁用灯光和灯光阴影。\n\n- GPU 实例化可减少 GPU 内存使用量。\n\n  ![图片2](Maya卡顿优化/1558687101606.png)\n\n- 减小摄影机的远剪裁距离，以便在视口中显示较少的几何体\n\n- 隐藏无需显示的对象\n\n- 卸载引用文件\n\n- 将对象更改为Bounding Box模式\n\n- 关闭多个Maya，同时运行 Maya 和其他 3D 程序，需要额外的 GPU 内存。\n\n- 可以考虑使用GPU缓存工作流程\n\n  ![图片3](Maya卡顿优化/1558688555512.png)\n\n  关于GPU缓存工作流程的更多内容：\n\n  https://knowledge.autodesk.com/zh-hans/support/maya/learn-explore/caas/CloudHelp/cloudhelp/2018/CHS/Maya-ManagingScenes/files/GUID-C893BE60-6E65-4F36-8005-FD4D1A0E9822-htm.html\n\n","slug":"Maya卡顿优化","published":1,"updated":"2020-03-10T10:49:41.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7lv2jld0005ycp4bi4o2hpe","content":"<h1 id=\"针对美术制作的-Maya-卡顿优化\"><a href=\"#针对美术制作的-Maya-卡顿优化\" class=\"headerlink\" title=\"针对美术制作的 Maya 卡顿优化\"></a>针对美术制作的 Maya 卡顿优化</h1><h2 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h2><h3 id=\"信息获取\"><a href=\"#信息获取\" class=\"headerlink\" title=\"信息获取\"></a>信息获取</h3><ul>\n<li>解释分析器</li>\n<li>求值工具包</li>\n</ul>\n<h2 id=\"GPU\"><a href=\"#GPU\" class=\"headerlink\" title=\"GPU\"></a>GPU</h2><h3 id=\"信息获取-1\"><a href=\"#信息获取-1\" class=\"headerlink\" title=\"信息获取\"></a>信息获取</h3><ul>\n<li><p>Viewport 2.0,必须拥有正确的图形配置和图形驱动程序版本。有关 Maya 认证显卡和最新驱动程序版本的信息：</p>\n<p><a href=\"https://knowledge.autodesk.com/certified-graphics-hardware\" target=\"_blank\" rel=\"noopener\">https://knowledge.autodesk.com/certified-graphics-hardware</a></p>\n</li>\n</ul>\n<ul>\n<li><p>GPU 内存</p>\n<p>对于包含大量纹理、几何体或缓存动画的场景，请务必记下显卡上可用的 GPU RAM 量，如果 GPU RAM 使用量非常接近显卡的 GPU RAM 限制，纹理可能无法加载，并且场景可能显示为着色模式。此时将显示一条错误信息，指明已超出纹理 RAM 限制并建议您减小“最大纹理分辨率”(Max Texture Resolution)钳制。</p>\n<p>查看 GPU 内存使用情况（以 MB 为单位），请使用Mel命令 </p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ogs -gpu</span><br></pre></td></tr></table></figure>\n\n<p>如图：</p>\n<p><img src=\"/2020/03/09/Maya%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/1558686550786.png\" alt=\"1558686550786\"></p>\n</li>\n<li><p>查看卡的 GPU RAM 限制，请参见“Maya 的输出窗口”(Output Window of Maya)。</p>\n<p><img src=\"/2020/03/09/Maya%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/1558686723618.png\" alt=\"图片1\"></p>\n</li>\n</ul>\n<h3 id=\"如何优化\"><a href=\"#如何优化\" class=\"headerlink\" title=\"如何优化\"></a>如何优化</h3><ul>\n<li><p>尽量关闭屏幕空间环境光遮挡、多重采样抗锯齿、运动模糊。</p>\n</li>\n<li><p>不使用复杂的Shader（例如复杂的 ShaderFX 网络）或大量使用 DirectX 11 ubershader 的场景。</p>\n</li>\n<li><p>禁用灯光和灯光阴影。</p>\n</li>\n<li><p>GPU 实例化可减少 GPU 内存使用量。</p>\n<p><img src=\"/2020/03/09/Maya%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/1558687101606.png\" alt=\"图片2\"></p>\n</li>\n<li><p>减小摄影机的远剪裁距离，以便在视口中显示较少的几何体</p>\n</li>\n<li><p>隐藏无需显示的对象</p>\n</li>\n<li><p>卸载引用文件</p>\n</li>\n<li><p>将对象更改为Bounding Box模式</p>\n</li>\n<li><p>关闭多个Maya，同时运行 Maya 和其他 3D 程序，需要额外的 GPU 内存。</p>\n</li>\n<li><p>可以考虑使用GPU缓存工作流程</p>\n<p><img src=\"/2020/03/09/Maya%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/1558688555512.png\" alt=\"图片3\"></p>\n<p>关于GPU缓存工作流程的更多内容：</p>\n<p><a href=\"https://knowledge.autodesk.com/zh-hans/support/maya/learn-explore/caas/CloudHelp/cloudhelp/2018/CHS/Maya-ManagingScenes/files/GUID-C893BE60-6E65-4F36-8005-FD4D1A0E9822-htm.html\" target=\"_blank\" rel=\"noopener\">https://knowledge.autodesk.com/zh-hans/support/maya/learn-explore/caas/CloudHelp/cloudhelp/2018/CHS/Maya-ManagingScenes/files/GUID-C893BE60-6E65-4F36-8005-FD4D1A0E9822-htm.html</a></p>\n</li>\n</ul>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#2d6b96","paginator":"#6AA7D2","button_hover":"#3B8BC4","text_selection":"#6AA7D2","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#6AA7D2","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"文章":"/","归档":"/archives"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":true,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":null,"top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2013,"footer_custom_text":"Hi, welcome to my <a href=\"https://sunyuxianggit.github.io/\">blog</a>!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":true,"url":"https://github.com/sunyuxianggit","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"SunYuxiangのBlog","subtitle":"好记性,不如烂笔头.今天你要写点什么？","description":"","author":"Sun Yuxiang","language":"zh-Hans","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/sunyuxianggit/sunyuxianggit.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"category_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"<h1 id=\"针对美术制作的-Maya-卡顿优化\"><a href=\"#针对美术制作的-Maya-卡顿优化\" class=\"headerlink\" title=\"针对美术制作的 Maya 卡顿优化\"></a>针对美术制作的 Maya 卡顿优化</h1><h2 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h2><h3 id=\"信息获取\"><a href=\"#信息获取\" class=\"headerlink\" title=\"信息获取\"></a>信息获取</h3><ul>\n<li>解释分析器</li>\n<li>求值工具包</li>\n</ul>\n<h2 id=\"GPU\"><a href=\"#GPU\" class=\"headerlink\" title=\"GPU\"></a>GPU</h2><h3 id=\"信息获取-1\"><a href=\"#信息获取-1\" class=\"headerlink\" title=\"信息获取\"></a>信息获取</h3><ul>\n<li><p>Viewport 2.0,必须拥有正确的图形配置和图形驱动程序版本。有关 Maya 认证显卡和最新驱动程序版本的信息：</p>\n<p><a href=\"https://knowledge.autodesk.com/certified-graphics-hardware\" target=\"_blank\" rel=\"noopener\">https://knowledge.autodesk.com/certified-graphics-hardware</a></p>\n</li>\n</ul>\n<ul>\n<li><p>GPU 内存</p>\n<p>对于包含大量纹理、几何体或缓存动画的场景，请务必记下显卡上可用的 GPU RAM 量，如果 GPU RAM 使用量非常接近显卡的 GPU RAM 限制，纹理可能无法加载，并且场景可能显示为着色模式。此时将显示一条错误信息，指明已超出纹理 RAM 限制并建议您减小“最大纹理分辨率”(Max Texture Resolution)钳制。</p>\n<p>查看 GPU 内存使用情况（以 MB 为单位），请使用Mel命令 </p></li></ul>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ogs -gpu</span><br></pre></td></tr></table></figure>\n\n<p>如图：</p>\n<p><img src=\"/2020/03/09/Maya%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/1558686550786.png\" alt=\"1558686550786\"></p>\n\n<li><p>查看卡的 GPU RAM 限制，请参见“Maya 的输出窗口”(Output Window of Maya)。</p>\n<p><img src=\"/2020/03/09/Maya%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/1558686723618.png\" alt=\"图片1\"></p>\n</li>\n\n<h3 id=\"如何优化\"><a href=\"#如何优化\" class=\"headerlink\" title=\"如何优化\"></a>如何优化</h3><ul>\n<li><p>尽量关闭屏幕空间环境光遮挡、多重采样抗锯齿、运动模糊。</p>\n</li>\n<li><p>不使用复杂的Shader（例如复杂的 ShaderFX 网络）或大量使用 DirectX 11 ubershader 的场景。</p>\n</li>\n<li><p>禁用灯光和灯光阴影。</p>\n</li>\n<li><p>GPU 实例化可减少 GPU 内存使用量。</p>\n<p><img src=\"/2020/03/09/Maya%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/1558687101606.png\" alt=\"图片2\"></p>\n</li>\n<li><p>减小摄影机的远剪裁距离，以便在视口中显示较少的几何体</p>\n</li>\n<li><p>隐藏无需显示的对象</p>\n</li>\n<li><p>卸载引用文件</p>\n</li>\n<li><p>将对象更改为Bounding Box模式</p>\n</li>\n<li><p>关闭多个Maya，同时运行 Maya 和其他 3D 程序，需要额外的 GPU 内存。</p>\n</li>\n<li><p>可以考虑使用GPU缓存工作流程</p>\n<p><img src=\"/2020/03/09/Maya%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/1558688555512.png\" alt=\"图片3\"></p>\n<p>关于GPU缓存工作流程的更多内容：</p>\n<p><a href=\"https://knowledge.autodesk.com/zh-hans/support/maya/learn-explore/caas/CloudHelp/cloudhelp/2018/CHS/Maya-ManagingScenes/files/GUID-C893BE60-6E65-4F36-8005-FD4D1A0E9822-htm.html\" target=\"_blank\" rel=\"noopener\">https://knowledge.autodesk.com/zh-hans/support/maya/learn-explore/caas/CloudHelp/cloudhelp/2018/CHS/Maya-ManagingScenes/files/GUID-C893BE60-6E65-4F36-8005-FD4D1A0E9822-htm.html</a></p>\n</li>\n</ul>"},{"_content":"# Python 进程和线程学习笔记\n\n- ### 进程和线程概述\n\n  进程：对于操作系统来说，一个任务就是一个进程（Process）\n\n  线程：在一个进程内部，要同时干多件事，就需要同时运行多个“子任务”，我们把进程内的这些“子任务”称为线程（Thread）。\n\n- ### 进程\n\n  ```\n  multprocessing # Python 中的 multiprocess 包提供了多进程支持\n  \n  ```\n<!-- more -->\n  ```\n  #process multprocessing包中的一个类表示进程对象\n  \n  from multiprocessing import Process\n  from tqdm import tqdm\n  import os\n  \n  # 子进程要执行的代码\n  def run_proc(name):\n      print('Run child process %s (%s)...' % (name, os.getpid())) #getpid()可以拿到进程的ID。\n      for i in tqdm(range(10000000)):\n          pass\n  \n  if __name__=='__main__': \n  \n  '''\n  有化部分 ，这句代码以上的部分，可以被其它的调用，以下的部分只有这个文件自己可以看见，如果文件被调用了，其他人是无法看见私有化部分的\n  也就是说你自己运行该模块的时候 这句话是执行的 因为自己运行时__name__就是__main__，而当别人调用你这个模块时，以下代码会被忽略，此时的__name__是模块名\n  '''\n      print('Parent process %s.' % os.getpid())\n      p = Process(target=run_proc, args=('test1',))\n      d = Process(target=run_proc, args=('test2',))\n      print('Child process will start.')\n      p.start()#调用进程\n      d.start()#调用进程\n      p.join()#join()方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步\n      d.join()\n      print('Child process end.')\n  ```\n\n  \n\n  ```\n  #Pool multprocessing包中的一个类，如果要启动大量的子进程，可以用进程池的方式批量创建子进程：\n  \n  from multiprocessing import Pool\n  import os, time, random\n  # 子进程要执行的代码\n  def long_time_task(name):\n      # for i in tqdm(range(10000000)):\n      #     pass\n      print('Run task %s (%s)...' % (name, os.getpid()))\n      start = time.time()\n      time.sleep(random.random() * 3)\n      end = time.time()\n      print('Task %s runs %0.2f seconds.' % (name, (end - start)))\n  \n  if __name__=='__main__':\n      print('Parent process %s.' % os.getpid())\n      p = Pool(4)\n      #创建子进程池\n      #参数数决定同时运行多少进程 如果是4 task4会等待 0 1 2 3 运行完在运行，如果是5 就0 1 2 3 4 一起运行\n      #如果你的参数大于你的CPU线程数还是要等待\n      #把参数去掉，就是按照操作系统的核数来\n      \n      for i in range(13):\n          p.apply_async(long_time_task, args=(i,)) #注意这里，因为是类所有调用函数是 P.\n      print('Waiting for all subprocesses done...')\n      p.close()\n      p.join()\n      print('All subprocesses done.')\n  ```\n\n  ```\n  #这种方法可以实现任意进程间的通信，这里写的是主、子进程间的通信\n  import multiprocessing\n  \n  def foo(aa):#必须要接收一个元祖\n      message = aa.get()  # 管子的另一端放在子进程这里，子进程接收到了数据\n      print('子进程已收到数据...')\n      print(message)  # 子进程打印出了数据内容...\n  \n  \n  \n  if __name__ == '__main__': \n  \n      xt = multiprocessing.Queue()  # 创建进程通信的Queue，你可以理解为我拿了个管子来...\n      jc = multiprocessing.Process(target=foo, args=(xt,))  # multiprocessing.Process创建子进程\n      jc.start()  # 启动子进程\n      print('主进程准备发送数据...')\n      xt.put('有内鬼，终止交易！')  # 将管子的一端放在主进程这里，主进程往管子里丢入数据\n      jc.join()\n  ```\n\n- ### 线程\n\n  ```\n  启动一个线程就是把一个函数传入并创建Thread实例，然后调用start()开始执行：\n  import time, threading\n  # 新线程执行的代码:\n  def loop():\n      print('thread %s is running...' % threading.current_thread().name)\n      n = 0\n      while n < 5:\n          n = n + 1\n          print('thread %s >>> %s' % (threading.current_thread().name, n))\n          time.sleep(1)\n      print('thread %s ended.' % threading.current_thread().name)\n  \n  print('thread %s is running...' % threading.current_thread().name)\n  t = threading.Thread(target=loop, name='LoopThread')\n  t.start()\n  t.join()\n  print('thread %s ended.' % threading.current_thread().name)\n  ```\n\n  \n\n","source":"_posts/Python 进程和线程学习笔记.md","raw":"# Python 进程和线程学习笔记\n\n- ### 进程和线程概述\n\n  进程：对于操作系统来说，一个任务就是一个进程（Process）\n\n  线程：在一个进程内部，要同时干多件事，就需要同时运行多个“子任务”，我们把进程内的这些“子任务”称为线程（Thread）。\n\n- ### 进程\n\n  ```\n  multprocessing # Python 中的 multiprocess 包提供了多进程支持\n  \n  ```\n<!-- more -->\n  ```\n  #process multprocessing包中的一个类表示进程对象\n  \n  from multiprocessing import Process\n  from tqdm import tqdm\n  import os\n  \n  # 子进程要执行的代码\n  def run_proc(name):\n      print('Run child process %s (%s)...' % (name, os.getpid())) #getpid()可以拿到进程的ID。\n      for i in tqdm(range(10000000)):\n          pass\n  \n  if __name__=='__main__': \n  \n  '''\n  有化部分 ，这句代码以上的部分，可以被其它的调用，以下的部分只有这个文件自己可以看见，如果文件被调用了，其他人是无法看见私有化部分的\n  也就是说你自己运行该模块的时候 这句话是执行的 因为自己运行时__name__就是__main__，而当别人调用你这个模块时，以下代码会被忽略，此时的__name__是模块名\n  '''\n      print('Parent process %s.' % os.getpid())\n      p = Process(target=run_proc, args=('test1',))\n      d = Process(target=run_proc, args=('test2',))\n      print('Child process will start.')\n      p.start()#调用进程\n      d.start()#调用进程\n      p.join()#join()方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步\n      d.join()\n      print('Child process end.')\n  ```\n\n  \n\n  ```\n  #Pool multprocessing包中的一个类，如果要启动大量的子进程，可以用进程池的方式批量创建子进程：\n  \n  from multiprocessing import Pool\n  import os, time, random\n  # 子进程要执行的代码\n  def long_time_task(name):\n      # for i in tqdm(range(10000000)):\n      #     pass\n      print('Run task %s (%s)...' % (name, os.getpid()))\n      start = time.time()\n      time.sleep(random.random() * 3)\n      end = time.time()\n      print('Task %s runs %0.2f seconds.' % (name, (end - start)))\n  \n  if __name__=='__main__':\n      print('Parent process %s.' % os.getpid())\n      p = Pool(4)\n      #创建子进程池\n      #参数数决定同时运行多少进程 如果是4 task4会等待 0 1 2 3 运行完在运行，如果是5 就0 1 2 3 4 一起运行\n      #如果你的参数大于你的CPU线程数还是要等待\n      #把参数去掉，就是按照操作系统的核数来\n      \n      for i in range(13):\n          p.apply_async(long_time_task, args=(i,)) #注意这里，因为是类所有调用函数是 P.\n      print('Waiting for all subprocesses done...')\n      p.close()\n      p.join()\n      print('All subprocesses done.')\n  ```\n\n  ```\n  #这种方法可以实现任意进程间的通信，这里写的是主、子进程间的通信\n  import multiprocessing\n  \n  def foo(aa):#必须要接收一个元祖\n      message = aa.get()  # 管子的另一端放在子进程这里，子进程接收到了数据\n      print('子进程已收到数据...')\n      print(message)  # 子进程打印出了数据内容...\n  \n  \n  \n  if __name__ == '__main__': \n  \n      xt = multiprocessing.Queue()  # 创建进程通信的Queue，你可以理解为我拿了个管子来...\n      jc = multiprocessing.Process(target=foo, args=(xt,))  # multiprocessing.Process创建子进程\n      jc.start()  # 启动子进程\n      print('主进程准备发送数据...')\n      xt.put('有内鬼，终止交易！')  # 将管子的一端放在主进程这里，主进程往管子里丢入数据\n      jc.join()\n  ```\n\n- ### 线程\n\n  ```\n  启动一个线程就是把一个函数传入并创建Thread实例，然后调用start()开始执行：\n  import time, threading\n  # 新线程执行的代码:\n  def loop():\n      print('thread %s is running...' % threading.current_thread().name)\n      n = 0\n      while n < 5:\n          n = n + 1\n          print('thread %s >>> %s' % (threading.current_thread().name, n))\n          time.sleep(1)\n      print('thread %s ended.' % threading.current_thread().name)\n  \n  print('thread %s is running...' % threading.current_thread().name)\n  t = threading.Thread(target=loop, name='LoopThread')\n  t.start()\n  t.join()\n  print('thread %s ended.' % threading.current_thread().name)\n  ```\n\n  \n\n","slug":"Python 进程和线程学习笔记","published":1,"date":"2020-03-10T10:49:41.137Z","updated":"2020-03-10T10:49:41.138Z","title":"Python 进程和线程学习笔记","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7lv2jlg0007ycp4a9qd2uk5","content":"<h1 id=\"Python-进程和线程学习笔记\"><a href=\"#Python-进程和线程学习笔记\" class=\"headerlink\" title=\"Python 进程和线程学习笔记\"></a>Python 进程和线程学习笔记</h1><ul>\n<li><h3 id=\"进程和线程概述\"><a href=\"#进程和线程概述\" class=\"headerlink\" title=\"进程和线程概述\"></a>进程和线程概述</h3><p>进程：对于操作系统来说，一个任务就是一个进程（Process）</p>\n<p>线程：在一个进程内部，要同时干多件事，就需要同时运行多个“子任务”，我们把进程内的这些“子任务”称为线程（Thread）。</p>\n</li>\n<li><h3 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">multprocessing # Python 中的 multiprocess 包提供了多进程支持</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#process multprocessing包中的一个类表示进程对象</span><br><span class=\"line\"></span><br><span class=\"line\">from multiprocessing import Process</span><br><span class=\"line\">from tqdm import tqdm</span><br><span class=\"line\">import os</span><br><span class=\"line\"></span><br><span class=\"line\"># 子进程要执行的代码</span><br><span class=\"line\">def run_proc(name):</span><br><span class=\"line\">    print(&#39;Run child process %s (%s)...&#39; % (name, os.getpid())) #getpid()可以拿到进程的ID。</span><br><span class=\"line\">    for i in tqdm(range(10000000)):</span><br><span class=\"line\">        pass</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__&#x3D;&#x3D;&#39;__main__&#39;: </span><br><span class=\"line\"></span><br><span class=\"line\">&#39;&#39;&#39;</span><br><span class=\"line\">有化部分 ，这句代码以上的部分，可以被其它的调用，以下的部分只有这个文件自己可以看见，如果文件被调用了，其他人是无法看见私有化部分的</span><br><span class=\"line\">也就是说你自己运行该模块的时候 这句话是执行的 因为自己运行时__name__就是__main__，而当别人调用你这个模块时，以下代码会被忽略，此时的__name__是模块名</span><br><span class=\"line\">&#39;&#39;&#39;</span><br><span class=\"line\">    print(&#39;Parent process %s.&#39; % os.getpid())</span><br><span class=\"line\">    p &#x3D; Process(target&#x3D;run_proc, args&#x3D;(&#39;test1&#39;,))</span><br><span class=\"line\">    d &#x3D; Process(target&#x3D;run_proc, args&#x3D;(&#39;test2&#39;,))</span><br><span class=\"line\">    print(&#39;Child process will start.&#39;)</span><br><span class=\"line\">    p.start()#调用进程</span><br><span class=\"line\">    d.start()#调用进程</span><br><span class=\"line\">    p.join()#join()方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步</span><br><span class=\"line\">    d.join()</span><br><span class=\"line\">    print(&#39;Child process end.&#39;)</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Pool multprocessing包中的一个类，如果要启动大量的子进程，可以用进程池的方式批量创建子进程：</span><br><span class=\"line\"></span><br><span class=\"line\">from multiprocessing import Pool</span><br><span class=\"line\">import os, time, random</span><br><span class=\"line\"># 子进程要执行的代码</span><br><span class=\"line\">def long_time_task(name):</span><br><span class=\"line\">    # for i in tqdm(range(10000000)):</span><br><span class=\"line\">    #     pass</span><br><span class=\"line\">    print(&#39;Run task %s (%s)...&#39; % (name, os.getpid()))</span><br><span class=\"line\">    start &#x3D; time.time()</span><br><span class=\"line\">    time.sleep(random.random() * 3)</span><br><span class=\"line\">    end &#x3D; time.time()</span><br><span class=\"line\">    print(&#39;Task %s runs %0.2f seconds.&#39; % (name, (end - start)))</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__&#x3D;&#x3D;&#39;__main__&#39;:</span><br><span class=\"line\">    print(&#39;Parent process %s.&#39; % os.getpid())</span><br><span class=\"line\">    p &#x3D; Pool(4)</span><br><span class=\"line\">    #创建子进程池</span><br><span class=\"line\">    #参数数决定同时运行多少进程 如果是4 task4会等待 0 1 2 3 运行完在运行，如果是5 就0 1 2 3 4 一起运行</span><br><span class=\"line\">    #如果你的参数大于你的CPU线程数还是要等待</span><br><span class=\"line\">    #把参数去掉，就是按照操作系统的核数来</span><br><span class=\"line\">    </span><br><span class=\"line\">    for i in range(13):</span><br><span class=\"line\">        p.apply_async(long_time_task, args&#x3D;(i,)) #注意这里，因为是类所有调用函数是 P.</span><br><span class=\"line\">    print(&#39;Waiting for all subprocesses done...&#39;)</span><br><span class=\"line\">    p.close()</span><br><span class=\"line\">    p.join()</span><br><span class=\"line\">    print(&#39;All subprocesses done.&#39;)</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#这种方法可以实现任意进程间的通信，这里写的是主、子进程间的通信</span><br><span class=\"line\">import multiprocessing</span><br><span class=\"line\"></span><br><span class=\"line\">def foo(aa):#必须要接收一个元祖</span><br><span class=\"line\">    message &#x3D; aa.get()  # 管子的另一端放在子进程这里，子进程接收到了数据</span><br><span class=\"line\">    print(&#39;子进程已收到数据...&#39;)</span><br><span class=\"line\">    print(message)  # 子进程打印出了数据内容...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;: </span><br><span class=\"line\"></span><br><span class=\"line\">    xt &#x3D; multiprocessing.Queue()  # 创建进程通信的Queue，你可以理解为我拿了个管子来...</span><br><span class=\"line\">    jc &#x3D; multiprocessing.Process(target&#x3D;foo, args&#x3D;(xt,))  # multiprocessing.Process创建子进程</span><br><span class=\"line\">    jc.start()  # 启动子进程</span><br><span class=\"line\">    print(&#39;主进程准备发送数据...&#39;)</span><br><span class=\"line\">    xt.put(&#39;有内鬼，终止交易！&#39;)  # 将管子的一端放在主进程这里，主进程往管子里丢入数据</span><br><span class=\"line\">    jc.join()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h3 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动一个线程就是把一个函数传入并创建Thread实例，然后调用start()开始执行：</span><br><span class=\"line\">import time, threading</span><br><span class=\"line\"># 新线程执行的代码:</span><br><span class=\"line\">def loop():</span><br><span class=\"line\">    print(&#39;thread %s is running...&#39; % threading.current_thread().name)</span><br><span class=\"line\">    n &#x3D; 0</span><br><span class=\"line\">    while n &lt; 5:</span><br><span class=\"line\">        n &#x3D; n + 1</span><br><span class=\"line\">        print(&#39;thread %s &gt;&gt;&gt; %s&#39; % (threading.current_thread().name, n))</span><br><span class=\"line\">        time.sleep(1)</span><br><span class=\"line\">    print(&#39;thread %s ended.&#39; % threading.current_thread().name)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&#39;thread %s is running...&#39; % threading.current_thread().name)</span><br><span class=\"line\">t &#x3D; threading.Thread(target&#x3D;loop, name&#x3D;&#39;LoopThread&#39;)</span><br><span class=\"line\">t.start()</span><br><span class=\"line\">t.join()</span><br><span class=\"line\">print(&#39;thread %s ended.&#39; % threading.current_thread().name)</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#2d6b96","paginator":"#6AA7D2","button_hover":"#3B8BC4","text_selection":"#6AA7D2","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#6AA7D2","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"文章":"/","归档":"/archives"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":true,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":null,"top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2013,"footer_custom_text":"Hi, welcome to my <a href=\"https://sunyuxianggit.github.io/\">blog</a>!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":true,"url":"https://github.com/sunyuxianggit","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"SunYuxiangのBlog","subtitle":"好记性,不如烂笔头.今天你要写点什么？","description":"","author":"Sun Yuxiang","language":"zh-Hans","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/sunyuxianggit/sunyuxianggit.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"category_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"<h1 id=\"Python-进程和线程学习笔记\"><a href=\"#Python-进程和线程学习笔记\" class=\"headerlink\" title=\"Python 进程和线程学习笔记\"></a>Python 进程和线程学习笔记</h1><ul>\n<li><h3 id=\"进程和线程概述\"><a href=\"#进程和线程概述\" class=\"headerlink\" title=\"进程和线程概述\"></a>进程和线程概述</h3><p>进程：对于操作系统来说，一个任务就是一个进程（Process）</p>\n<p>线程：在一个进程内部，要同时干多件事，就需要同时运行多个“子任务”，我们把进程内的这些“子任务”称为线程（Thread）。</p>\n</li>\n<li><h3 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">multprocessing # Python 中的 multiprocess 包提供了多进程支持</span><br></pre></td></tr></table></figure></li></ul>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#process multprocessing包中的一个类表示进程对象</span><br><span class=\"line\"></span><br><span class=\"line\">from multiprocessing import Process</span><br><span class=\"line\">from tqdm import tqdm</span><br><span class=\"line\">import os</span><br><span class=\"line\"></span><br><span class=\"line\"># 子进程要执行的代码</span><br><span class=\"line\">def run_proc(name):</span><br><span class=\"line\">    print(&#39;Run child process %s (%s)...&#39; % (name, os.getpid())) #getpid()可以拿到进程的ID。</span><br><span class=\"line\">    for i in tqdm(range(10000000)):</span><br><span class=\"line\">        pass</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__&#x3D;&#x3D;&#39;__main__&#39;: </span><br><span class=\"line\"></span><br><span class=\"line\">&#39;&#39;&#39;</span><br><span class=\"line\">有化部分 ，这句代码以上的部分，可以被其它的调用，以下的部分只有这个文件自己可以看见，如果文件被调用了，其他人是无法看见私有化部分的</span><br><span class=\"line\">也就是说你自己运行该模块的时候 这句话是执行的 因为自己运行时__name__就是__main__，而当别人调用你这个模块时，以下代码会被忽略，此时的__name__是模块名</span><br><span class=\"line\">&#39;&#39;&#39;</span><br><span class=\"line\">    print(&#39;Parent process %s.&#39; % os.getpid())</span><br><span class=\"line\">    p &#x3D; Process(target&#x3D;run_proc, args&#x3D;(&#39;test1&#39;,))</span><br><span class=\"line\">    d &#x3D; Process(target&#x3D;run_proc, args&#x3D;(&#39;test2&#39;,))</span><br><span class=\"line\">    print(&#39;Child process will start.&#39;)</span><br><span class=\"line\">    p.start()#调用进程</span><br><span class=\"line\">    d.start()#调用进程</span><br><span class=\"line\">    p.join()#join()方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步</span><br><span class=\"line\">    d.join()</span><br><span class=\"line\">    print(&#39;Child process end.&#39;)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Pool multprocessing包中的一个类，如果要启动大量的子进程，可以用进程池的方式批量创建子进程：</span><br><span class=\"line\"></span><br><span class=\"line\">from multiprocessing import Pool</span><br><span class=\"line\">import os, time, random</span><br><span class=\"line\"># 子进程要执行的代码</span><br><span class=\"line\">def long_time_task(name):</span><br><span class=\"line\">    # for i in tqdm(range(10000000)):</span><br><span class=\"line\">    #     pass</span><br><span class=\"line\">    print(&#39;Run task %s (%s)...&#39; % (name, os.getpid()))</span><br><span class=\"line\">    start &#x3D; time.time()</span><br><span class=\"line\">    time.sleep(random.random() * 3)</span><br><span class=\"line\">    end &#x3D; time.time()</span><br><span class=\"line\">    print(&#39;Task %s runs %0.2f seconds.&#39; % (name, (end - start)))</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__&#x3D;&#x3D;&#39;__main__&#39;:</span><br><span class=\"line\">    print(&#39;Parent process %s.&#39; % os.getpid())</span><br><span class=\"line\">    p &#x3D; Pool(4)</span><br><span class=\"line\">    #创建子进程池</span><br><span class=\"line\">    #参数数决定同时运行多少进程 如果是4 task4会等待 0 1 2 3 运行完在运行，如果是5 就0 1 2 3 4 一起运行</span><br><span class=\"line\">    #如果你的参数大于你的CPU线程数还是要等待</span><br><span class=\"line\">    #把参数去掉，就是按照操作系统的核数来</span><br><span class=\"line\">    </span><br><span class=\"line\">    for i in range(13):</span><br><span class=\"line\">        p.apply_async(long_time_task, args&#x3D;(i,)) #注意这里，因为是类所有调用函数是 P.</span><br><span class=\"line\">    print(&#39;Waiting for all subprocesses done...&#39;)</span><br><span class=\"line\">    p.close()</span><br><span class=\"line\">    p.join()</span><br><span class=\"line\">    print(&#39;All subprocesses done.&#39;)</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#这种方法可以实现任意进程间的通信，这里写的是主、子进程间的通信</span><br><span class=\"line\">import multiprocessing</span><br><span class=\"line\"></span><br><span class=\"line\">def foo(aa):#必须要接收一个元祖</span><br><span class=\"line\">    message &#x3D; aa.get()  # 管子的另一端放在子进程这里，子进程接收到了数据</span><br><span class=\"line\">    print(&#39;子进程已收到数据...&#39;)</span><br><span class=\"line\">    print(message)  # 子进程打印出了数据内容...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;: </span><br><span class=\"line\"></span><br><span class=\"line\">    xt &#x3D; multiprocessing.Queue()  # 创建进程通信的Queue，你可以理解为我拿了个管子来...</span><br><span class=\"line\">    jc &#x3D; multiprocessing.Process(target&#x3D;foo, args&#x3D;(xt,))  # multiprocessing.Process创建子进程</span><br><span class=\"line\">    jc.start()  # 启动子进程</span><br><span class=\"line\">    print(&#39;主进程准备发送数据...&#39;)</span><br><span class=\"line\">    xt.put(&#39;有内鬼，终止交易！&#39;)  # 将管子的一端放在主进程这里，主进程往管子里丢入数据</span><br><span class=\"line\">    jc.join()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h3 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动一个线程就是把一个函数传入并创建Thread实例，然后调用start()开始执行：</span><br><span class=\"line\">import time, threading</span><br><span class=\"line\"># 新线程执行的代码:</span><br><span class=\"line\">def loop():</span><br><span class=\"line\">    print(&#39;thread %s is running...&#39; % threading.current_thread().name)</span><br><span class=\"line\">    n &#x3D; 0</span><br><span class=\"line\">    while n &lt; 5:</span><br><span class=\"line\">        n &#x3D; n + 1</span><br><span class=\"line\">        print(&#39;thread %s &gt;&gt;&gt; %s&#39; % (threading.current_thread().name, n))</span><br><span class=\"line\">        time.sleep(1)</span><br><span class=\"line\">    print(&#39;thread %s ended.&#39; % threading.current_thread().name)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&#39;thread %s is running...&#39; % threading.current_thread().name)</span><br><span class=\"line\">t &#x3D; threading.Thread(target&#x3D;loop, name&#x3D;&#39;LoopThread&#39;)</span><br><span class=\"line\">t.start()</span><br><span class=\"line\">t.join()</span><br><span class=\"line\">print(&#39;thread %s ended.&#39; % threading.current_thread().name)</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>"},{"title":"GameCourse101","date":"2020-03-10T11:14:04.000Z","_content":"\n# GameCourse101\n计算机图形学入门 课程学习笔记\n## 第一节 引入\n## 第二节 线性代数\n### 向量\n\n向量是带有方向的量  \n重要的两个量是方向和长度  \n![](GameCourse101/2020-03-08-12-49-03.png)  <!-- more -->\n数学： 向量  \n物理： 矢量  \n向量长度：  \n![](GameCourse101/2020-03-08-12-49-24.png)  \n向量加法（求和）：  \n几何上  \n![](GameCourse101/2020-03-08-12-49-38.png)  \n数学上  \n![](GameCourse101/2020-03-08-12-49-58.png)  \n我们把向量表示成直角坐标系这种形式是有助于计算向量的长度的。  \n\n#### 向量的点乘和叉乘  \n向量更广泛的用法  \n![](GameCourse101/2020-03-08-12-50-12.png)  \n\n##### 点乘  \n![](GameCourse101/2020-03-08-12-50-25.png)  \n左边是两个向量，右边是一个数字。  \n如果两个向量都是单位向量，那么它们点乘的结果就是余弦的值。  \n\n![](GameCourse101/2020-03-08-12-58-31.png)  \n点乘既然是一种运算，运算法则都会满足一些性质。  \n交换律 结合律 分配律  \n\n![](GameCourse101/2020-03-08-13-08-11.png)  \n如果是在坐标系下，就跟简单。  \n\n![](GameCourse101/2020-03-08-13-02-30.png)  \n1. 点乘在图形学最重要的作用就是找到两个向量的夹角。  \n比如 光从哪个地方射过来（向量）物体表面法线是什么样的（向量）我们从哪里看（向量）\n2. 第二个重要作用就是找到一个向量的投影到另一个向量是长什么样的。  \n投影算出来有什么好处呢？ 我们可以把一个向量分解成两个向量，一个平行一个垂直。这样可以帮助我们把任意向量分解到任意坐标轴。  \n    ![](GameCourse101/2020-03-08-13-17-01.png)\n3. 在图形学里，我们还可以根据点乘的结果判定两个向量是否接近是否远离。\n4. 向量点乘还可以告诉大家一个前与后的信息，如图（向量a和向量b点乘为正值且接近1，向量a和向量c点乘为负值，如果有一个向量跟向量a一样，那点乘结果为1，如果有一个向量正好在虚线上，那点乘的值为0，如果跟向量a正好相反，那点乘结果为-1）  \n![](GameCourse101/2020-03-08-13-44-08.png)  \n\n##### 叉乘（叉积）  \n叉乘是给定两个向量计算出同时垂直与这两个向量的新的向量，另外同时垂直这两个向量也就是必然垂直这两个向量形成的平面\n![](GameCourse101/2020-03-08-13-57-13.png)\n右手螺旋定则（DirectX是右手，openGL是左手），伸出右手，除了拇指以外的四个手指比作向量a，向内握紧比作向量a向向量b运动，那么大拇指就是叉乘的结果。xy，\n向量的叉乘并不满足交换律\n向量的叉积还有一个作用是我们利用它来建立一个三维空间中的直角坐标系\n![](GameCourse101/2020-03-08-14-04-16.png)  \n几何：\n![](GameCourse101/2020-03-08-14-36-32.png)  \n\n叉积怎么算，有什么用处：\n![](GameCourse101/2020-03-08-14-37-55.png)\n特别重要 \n\n![](GameCourse101/2020-03-08-14-38-58.png)\n1. 判定左和右  \n如图左侧，XY为平面，通过右手螺旋定则，Z为朝向我们自身的向量，如果想判断向量b在向量a左侧还是右侧（什么是左侧右侧? 从向量a顺时针旋转到达向量b为左侧，逆时针为右侧），在这里根据图示很容易看出来向量b是在向量a的左侧，如果用数字表示就是 向量a叉乘向量b得到的结果是正值（指向身体）就说明向量b在向量a的左侧，如果向量b叉乘向量a得到的结果是负值（指向身体外侧），那就说明向量a在向量b右侧，\n2. 判定内与外  \n如图右侧，先判断向量AP是否在向量AB的左侧，在判断向量BP是否在向量BC的左侧，在判断向量AP是否在ac的左侧，如果都是在左侧就说明点P在三角形内部，否则肯定有一个判断是在右侧。\n这里假设了ABC三个点是逆时针排布，如果换成顺时针也没有问题，只不过是都在左侧。  \n所以我们可以忽略三角形的排布顺序，只要三个边左或者右保持一致就说明点在三角形内部。这点非常重要，是光栅化的基础（用来判断像素是否在三角形的内部）。\n\n\n\n#### 向量定义坐标系  \n![](GameCourse101/2020-03-08-15-51-31.png)\n向量叉乘可以定义一些互相垂直的轴，就会形成坐标系如图。  \n![](GameCourse101/2020-03-08-15-52-25.png)  \n这里顶一个uvw坐标系，三个向量单位长度都为1，互相垂直，给你u和v 叉乘得到w。\n我们可以利用投影把任意一个向量分解到三个轴上去，利用点乘，因为什么呢？向量P点乘向量U，等于是向量P的长度乘以向量U的长度在乘以cosθ，向量U又恰好是单位向量为1，等于是向量P的长度乘以cosθ，根据下图三角函数，就会得出向量P在向量U上的投影，同理获得向量P在向量V和向量W上的投影，有了这三个投影就可以获得坐标系下的这个向量。\n![](GameCourse101/2020-03-08-16-07-00.png)  \ncosA = c/b  \n\n\n### 矩阵\n![](GameCourse101/2020-03-08-16-47-04.png)\n**在图像学里，变换就是矩阵的最大应用。** \n![](GameCourse101/2020-03-08-20-44-32.png)  \n##### 矩阵乘以和加上一个常量就是把矩阵的每个元素乘以和加上一个常量.  \n![](GameCourse101/2020-03-08-20-53-06.png)  \n矩阵乘矩阵必须要符合条件才能乘，如图必须第一个矩阵的列数和第二个矩阵的行数相同相乘才有意义。  \n关于新得到的矩阵每一个元素都是什么，有不同的数学定义，这个地方比较不容易记住，这里给大家提供一个容易记得方法，比如左下角这个8，他的坐标是三行一列，这里三行对应第一个矩阵（0，4），一列对应第二个矩阵（3，2），这两个向量点乘。  \n![](GameCourse101/2020-03-08-21-50-50.png)  \n矩阵乘法是没有交换律的，但是矩阵是由结合律和分配律。  \n\n##### 矩阵乘向量\n![](GameCourse101/2020-03-08-21-53-53.png)\n>一个矩阵如何和一个向量乘？当我们认为向量是列向量就有意义了（也就是说M永远为1）。    \n\n*这是最重要的核心。*\n下面表示一个2D向量按Y轴镜像的操作。\n\n##### 矩阵转置\n![](GameCourse101/2020-03-08-22-01-06.png)\n性质： 如果要乘两个矩阵在转置好比相对后一个矩阵做装置在乘以前一个矩阵做转置的结果。\n\n##### 特殊的矩阵，单位矩阵\n![](GameCourse101/2020-03-08-22-07-51.png)\n对角阵，只有对角线上有非零的元素，\n矩阵的逆：如果你能找到一个矩阵，和原来的矩阵相乘，不管乘得顺序，得到的结果都是I，那么我们就认为这两个矩阵是互逆的。\n逆矩阵的计算和转置的矩阵很相似。\n\n##### 向量点乘和叉乘的矩阵形式\n![](GameCourse101/2020-03-08-22-12-11.png)\n点乘：向量a点乘向量b 等于向量a转置和向量b的乘法。\n叉乘：相对点乘困难一些，相当于把向量a转换成一个矩阵（dual matrix）乘以向量b","source":"_posts/GameCourse101.md","raw":"---\ntitle: GameCourse101\ndate: 2020-03-10 19:14:04\ntags: computer graphics\n---\n\n# GameCourse101\n计算机图形学入门 课程学习笔记\n## 第一节 引入\n## 第二节 线性代数\n### 向量\n\n向量是带有方向的量  \n重要的两个量是方向和长度  \n![](GameCourse101/2020-03-08-12-49-03.png)  <!-- more -->\n数学： 向量  \n物理： 矢量  \n向量长度：  \n![](GameCourse101/2020-03-08-12-49-24.png)  \n向量加法（求和）：  \n几何上  \n![](GameCourse101/2020-03-08-12-49-38.png)  \n数学上  \n![](GameCourse101/2020-03-08-12-49-58.png)  \n我们把向量表示成直角坐标系这种形式是有助于计算向量的长度的。  \n\n#### 向量的点乘和叉乘  \n向量更广泛的用法  \n![](GameCourse101/2020-03-08-12-50-12.png)  \n\n##### 点乘  \n![](GameCourse101/2020-03-08-12-50-25.png)  \n左边是两个向量，右边是一个数字。  \n如果两个向量都是单位向量，那么它们点乘的结果就是余弦的值。  \n\n![](GameCourse101/2020-03-08-12-58-31.png)  \n点乘既然是一种运算，运算法则都会满足一些性质。  \n交换律 结合律 分配律  \n\n![](GameCourse101/2020-03-08-13-08-11.png)  \n如果是在坐标系下，就跟简单。  \n\n![](GameCourse101/2020-03-08-13-02-30.png)  \n1. 点乘在图形学最重要的作用就是找到两个向量的夹角。  \n比如 光从哪个地方射过来（向量）物体表面法线是什么样的（向量）我们从哪里看（向量）\n2. 第二个重要作用就是找到一个向量的投影到另一个向量是长什么样的。  \n投影算出来有什么好处呢？ 我们可以把一个向量分解成两个向量，一个平行一个垂直。这样可以帮助我们把任意向量分解到任意坐标轴。  \n    ![](GameCourse101/2020-03-08-13-17-01.png)\n3. 在图形学里，我们还可以根据点乘的结果判定两个向量是否接近是否远离。\n4. 向量点乘还可以告诉大家一个前与后的信息，如图（向量a和向量b点乘为正值且接近1，向量a和向量c点乘为负值，如果有一个向量跟向量a一样，那点乘结果为1，如果有一个向量正好在虚线上，那点乘的值为0，如果跟向量a正好相反，那点乘结果为-1）  \n![](GameCourse101/2020-03-08-13-44-08.png)  \n\n##### 叉乘（叉积）  \n叉乘是给定两个向量计算出同时垂直与这两个向量的新的向量，另外同时垂直这两个向量也就是必然垂直这两个向量形成的平面\n![](GameCourse101/2020-03-08-13-57-13.png)\n右手螺旋定则（DirectX是右手，openGL是左手），伸出右手，除了拇指以外的四个手指比作向量a，向内握紧比作向量a向向量b运动，那么大拇指就是叉乘的结果。xy，\n向量的叉乘并不满足交换律\n向量的叉积还有一个作用是我们利用它来建立一个三维空间中的直角坐标系\n![](GameCourse101/2020-03-08-14-04-16.png)  \n几何：\n![](GameCourse101/2020-03-08-14-36-32.png)  \n\n叉积怎么算，有什么用处：\n![](GameCourse101/2020-03-08-14-37-55.png)\n特别重要 \n\n![](GameCourse101/2020-03-08-14-38-58.png)\n1. 判定左和右  \n如图左侧，XY为平面，通过右手螺旋定则，Z为朝向我们自身的向量，如果想判断向量b在向量a左侧还是右侧（什么是左侧右侧? 从向量a顺时针旋转到达向量b为左侧，逆时针为右侧），在这里根据图示很容易看出来向量b是在向量a的左侧，如果用数字表示就是 向量a叉乘向量b得到的结果是正值（指向身体）就说明向量b在向量a的左侧，如果向量b叉乘向量a得到的结果是负值（指向身体外侧），那就说明向量a在向量b右侧，\n2. 判定内与外  \n如图右侧，先判断向量AP是否在向量AB的左侧，在判断向量BP是否在向量BC的左侧，在判断向量AP是否在ac的左侧，如果都是在左侧就说明点P在三角形内部，否则肯定有一个判断是在右侧。\n这里假设了ABC三个点是逆时针排布，如果换成顺时针也没有问题，只不过是都在左侧。  \n所以我们可以忽略三角形的排布顺序，只要三个边左或者右保持一致就说明点在三角形内部。这点非常重要，是光栅化的基础（用来判断像素是否在三角形的内部）。\n\n\n\n#### 向量定义坐标系  \n![](GameCourse101/2020-03-08-15-51-31.png)\n向量叉乘可以定义一些互相垂直的轴，就会形成坐标系如图。  \n![](GameCourse101/2020-03-08-15-52-25.png)  \n这里顶一个uvw坐标系，三个向量单位长度都为1，互相垂直，给你u和v 叉乘得到w。\n我们可以利用投影把任意一个向量分解到三个轴上去，利用点乘，因为什么呢？向量P点乘向量U，等于是向量P的长度乘以向量U的长度在乘以cosθ，向量U又恰好是单位向量为1，等于是向量P的长度乘以cosθ，根据下图三角函数，就会得出向量P在向量U上的投影，同理获得向量P在向量V和向量W上的投影，有了这三个投影就可以获得坐标系下的这个向量。\n![](GameCourse101/2020-03-08-16-07-00.png)  \ncosA = c/b  \n\n\n### 矩阵\n![](GameCourse101/2020-03-08-16-47-04.png)\n**在图像学里，变换就是矩阵的最大应用。** \n![](GameCourse101/2020-03-08-20-44-32.png)  \n##### 矩阵乘以和加上一个常量就是把矩阵的每个元素乘以和加上一个常量.  \n![](GameCourse101/2020-03-08-20-53-06.png)  \n矩阵乘矩阵必须要符合条件才能乘，如图必须第一个矩阵的列数和第二个矩阵的行数相同相乘才有意义。  \n关于新得到的矩阵每一个元素都是什么，有不同的数学定义，这个地方比较不容易记住，这里给大家提供一个容易记得方法，比如左下角这个8，他的坐标是三行一列，这里三行对应第一个矩阵（0，4），一列对应第二个矩阵（3，2），这两个向量点乘。  \n![](GameCourse101/2020-03-08-21-50-50.png)  \n矩阵乘法是没有交换律的，但是矩阵是由结合律和分配律。  \n\n##### 矩阵乘向量\n![](GameCourse101/2020-03-08-21-53-53.png)\n>一个矩阵如何和一个向量乘？当我们认为向量是列向量就有意义了（也就是说M永远为1）。    \n\n*这是最重要的核心。*\n下面表示一个2D向量按Y轴镜像的操作。\n\n##### 矩阵转置\n![](GameCourse101/2020-03-08-22-01-06.png)\n性质： 如果要乘两个矩阵在转置好比相对后一个矩阵做装置在乘以前一个矩阵做转置的结果。\n\n##### 特殊的矩阵，单位矩阵\n![](GameCourse101/2020-03-08-22-07-51.png)\n对角阵，只有对角线上有非零的元素，\n矩阵的逆：如果你能找到一个矩阵，和原来的矩阵相乘，不管乘得顺序，得到的结果都是I，那么我们就认为这两个矩阵是互逆的。\n逆矩阵的计算和转置的矩阵很相似。\n\n##### 向量点乘和叉乘的矩阵形式\n![](GameCourse101/2020-03-08-22-12-11.png)\n点乘：向量a点乘向量b 等于向量a转置和向量b的乘法。\n叉乘：相对点乘困难一些，相当于把向量a转换成一个矩阵（dual matrix）乘以向量b","slug":"GameCourse101","published":1,"updated":"2020-03-10T12:17:28.902Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7lv2jlh0008ycp4harsbaz2","content":"<h1 id=\"GameCourse101\"><a href=\"#GameCourse101\" class=\"headerlink\" title=\"GameCourse101\"></a>GameCourse101</h1><p>计算机图形学入门 课程学习笔记</p>\n<h2 id=\"第一节-引入\"><a href=\"#第一节-引入\" class=\"headerlink\" title=\"第一节 引入\"></a>第一节 引入</h2><h2 id=\"第二节-线性代数\"><a href=\"#第二节-线性代数\" class=\"headerlink\" title=\"第二节 线性代数\"></a>第二节 线性代数</h2><h3 id=\"向量\"><a href=\"#向量\" class=\"headerlink\" title=\"向量\"></a>向量</h3><p>向量是带有方向的量<br>重要的两个量是方向和长度<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-12-49-03.png\" alt>  <a id=\"more\"></a><br>数学： 向量<br>物理： 矢量<br>向量长度：<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-12-49-24.png\" alt><br>向量加法（求和）：<br>几何上<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-12-49-38.png\" alt><br>数学上<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-12-49-58.png\" alt><br>我们把向量表示成直角坐标系这种形式是有助于计算向量的长度的。  </p>\n<h4 id=\"向量的点乘和叉乘\"><a href=\"#向量的点乘和叉乘\" class=\"headerlink\" title=\"向量的点乘和叉乘\"></a>向量的点乘和叉乘</h4><p>向量更广泛的用法<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-12-50-12.png\" alt>  </p>\n<h5 id=\"点乘\"><a href=\"#点乘\" class=\"headerlink\" title=\"点乘\"></a>点乘</h5><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-12-50-25.png\" alt><br>左边是两个向量，右边是一个数字。<br>如果两个向量都是单位向量，那么它们点乘的结果就是余弦的值。  </p>\n<p><img src=\"/2020/03/10/GameCourse101/2020-03-08-12-58-31.png\" alt><br>点乘既然是一种运算，运算法则都会满足一些性质。<br>交换律 结合律 分配律  </p>\n<p><img src=\"/2020/03/10/GameCourse101/2020-03-08-13-08-11.png\" alt><br>如果是在坐标系下，就跟简单。  </p>\n<p><img src=\"/2020/03/10/GameCourse101/2020-03-08-13-02-30.png\" alt>  </p>\n<ol>\n<li>点乘在图形学最重要的作用就是找到两个向量的夹角。<br>比如 光从哪个地方射过来（向量）物体表面法线是什么样的（向量）我们从哪里看（向量）</li>\n<li>第二个重要作用就是找到一个向量的投影到另一个向量是长什么样的。<br>投影算出来有什么好处呢？ 我们可以把一个向量分解成两个向量，一个平行一个垂直。这样可以帮助我们把任意向量分解到任意坐标轴。<br> <img src=\"/2020/03/10/GameCourse101/2020-03-08-13-17-01.png\" alt></li>\n<li>在图形学里，我们还可以根据点乘的结果判定两个向量是否接近是否远离。</li>\n<li>向量点乘还可以告诉大家一个前与后的信息，如图（向量a和向量b点乘为正值且接近1，向量a和向量c点乘为负值，如果有一个向量跟向量a一样，那点乘结果为1，如果有一个向量正好在虚线上，那点乘的值为0，如果跟向量a正好相反，那点乘结果为-1）<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-13-44-08.png\" alt>  </li>\n</ol>\n<h5 id=\"叉乘（叉积）\"><a href=\"#叉乘（叉积）\" class=\"headerlink\" title=\"叉乘（叉积）\"></a>叉乘（叉积）</h5><p>叉乘是给定两个向量计算出同时垂直与这两个向量的新的向量，另外同时垂直这两个向量也就是必然垂直这两个向量形成的平面<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-13-57-13.png\" alt><br>右手螺旋定则（DirectX是右手，openGL是左手），伸出右手，除了拇指以外的四个手指比作向量a，向内握紧比作向量a向向量b运动，那么大拇指就是叉乘的结果。xy，<br>向量的叉乘并不满足交换律<br>向量的叉积还有一个作用是我们利用它来建立一个三维空间中的直角坐标系<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-14-04-16.png\" alt><br>几何：<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-14-36-32.png\" alt>  </p>\n<p>叉积怎么算，有什么用处：<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-14-37-55.png\" alt><br>特别重要 </p>\n<p><img src=\"/2020/03/10/GameCourse101/2020-03-08-14-38-58.png\" alt></p>\n<ol>\n<li>判定左和右<br>如图左侧，XY为平面，通过右手螺旋定则，Z为朝向我们自身的向量，如果想判断向量b在向量a左侧还是右侧（什么是左侧右侧? 从向量a顺时针旋转到达向量b为左侧，逆时针为右侧），在这里根据图示很容易看出来向量b是在向量a的左侧，如果用数字表示就是 向量a叉乘向量b得到的结果是正值（指向身体）就说明向量b在向量a的左侧，如果向量b叉乘向量a得到的结果是负值（指向身体外侧），那就说明向量a在向量b右侧，</li>\n<li>判定内与外<br>如图右侧，先判断向量AP是否在向量AB的左侧，在判断向量BP是否在向量BC的左侧，在判断向量AP是否在ac的左侧，如果都是在左侧就说明点P在三角形内部，否则肯定有一个判断是在右侧。<br>这里假设了ABC三个点是逆时针排布，如果换成顺时针也没有问题，只不过是都在左侧。<br>所以我们可以忽略三角形的排布顺序，只要三个边左或者右保持一致就说明点在三角形内部。这点非常重要，是光栅化的基础（用来判断像素是否在三角形的内部）。</li>\n</ol>\n<h4 id=\"向量定义坐标系\"><a href=\"#向量定义坐标系\" class=\"headerlink\" title=\"向量定义坐标系\"></a>向量定义坐标系</h4><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-15-51-31.png\" alt><br>向量叉乘可以定义一些互相垂直的轴，就会形成坐标系如图。<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-15-52-25.png\" alt><br>这里顶一个uvw坐标系，三个向量单位长度都为1，互相垂直，给你u和v 叉乘得到w。<br>我们可以利用投影把任意一个向量分解到三个轴上去，利用点乘，因为什么呢？向量P点乘向量U，等于是向量P的长度乘以向量U的长度在乘以cosθ，向量U又恰好是单位向量为1，等于是向量P的长度乘以cosθ，根据下图三角函数，就会得出向量P在向量U上的投影，同理获得向量P在向量V和向量W上的投影，有了这三个投影就可以获得坐标系下的这个向量。<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-16-07-00.png\" alt><br>cosA = c/b  </p>\n<h3 id=\"矩阵\"><a href=\"#矩阵\" class=\"headerlink\" title=\"矩阵\"></a>矩阵</h3><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-16-47-04.png\" alt><br><strong>在图像学里，变换就是矩阵的最大应用。</strong><br><img src=\"/2020/03/10/GameCourse101/2020-03-08-20-44-32.png\" alt>  </p>\n<h5 id=\"矩阵乘以和加上一个常量就是把矩阵的每个元素乘以和加上一个常量\"><a href=\"#矩阵乘以和加上一个常量就是把矩阵的每个元素乘以和加上一个常量\" class=\"headerlink\" title=\"矩阵乘以和加上一个常量就是把矩阵的每个元素乘以和加上一个常量.\"></a>矩阵乘以和加上一个常量就是把矩阵的每个元素乘以和加上一个常量.</h5><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-20-53-06.png\" alt><br>矩阵乘矩阵必须要符合条件才能乘，如图必须第一个矩阵的列数和第二个矩阵的行数相同相乘才有意义。<br>关于新得到的矩阵每一个元素都是什么，有不同的数学定义，这个地方比较不容易记住，这里给大家提供一个容易记得方法，比如左下角这个8，他的坐标是三行一列，这里三行对应第一个矩阵（0，4），一列对应第二个矩阵（3，2），这两个向量点乘。<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-21-50-50.png\" alt><br>矩阵乘法是没有交换律的，但是矩阵是由结合律和分配律。  </p>\n<h5 id=\"矩阵乘向量\"><a href=\"#矩阵乘向量\" class=\"headerlink\" title=\"矩阵乘向量\"></a>矩阵乘向量</h5><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-21-53-53.png\" alt></p>\n<blockquote>\n<p>一个矩阵如何和一个向量乘？当我们认为向量是列向量就有意义了（也就是说M永远为1）。    </p>\n</blockquote>\n<p><em>这是最重要的核心。</em><br>下面表示一个2D向量按Y轴镜像的操作。</p>\n<h5 id=\"矩阵转置\"><a href=\"#矩阵转置\" class=\"headerlink\" title=\"矩阵转置\"></a>矩阵转置</h5><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-22-01-06.png\" alt><br>性质： 如果要乘两个矩阵在转置好比相对后一个矩阵做装置在乘以前一个矩阵做转置的结果。</p>\n<h5 id=\"特殊的矩阵，单位矩阵\"><a href=\"#特殊的矩阵，单位矩阵\" class=\"headerlink\" title=\"特殊的矩阵，单位矩阵\"></a>特殊的矩阵，单位矩阵</h5><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-22-07-51.png\" alt><br>对角阵，只有对角线上有非零的元素，<br>矩阵的逆：如果你能找到一个矩阵，和原来的矩阵相乘，不管乘得顺序，得到的结果都是I，那么我们就认为这两个矩阵是互逆的。<br>逆矩阵的计算和转置的矩阵很相似。</p>\n<h5 id=\"向量点乘和叉乘的矩阵形式\"><a href=\"#向量点乘和叉乘的矩阵形式\" class=\"headerlink\" title=\"向量点乘和叉乘的矩阵形式\"></a>向量点乘和叉乘的矩阵形式</h5><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-22-12-11.png\" alt><br>点乘：向量a点乘向量b 等于向量a转置和向量b的乘法。<br>叉乘：相对点乘困难一些，相当于把向量a转换成一个矩阵（dual matrix）乘以向量b</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#2d6b96","paginator":"#6AA7D2","button_hover":"#3B8BC4","text_selection":"#6AA7D2","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#6AA7D2","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"文章":"/","归档":"/archives"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":true,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":null,"top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2013,"footer_custom_text":"Hi, welcome to my <a href=\"https://sunyuxianggit.github.io/\">blog</a>!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":true,"url":"https://github.com/sunyuxianggit","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"SunYuxiangのBlog","subtitle":"好记性,不如烂笔头.今天你要写点什么？","description":"","author":"Sun Yuxiang","language":"zh-Hans","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/sunyuxianggit/sunyuxianggit.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"category_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"<h1 id=\"GameCourse101\"><a href=\"#GameCourse101\" class=\"headerlink\" title=\"GameCourse101\"></a>GameCourse101</h1><p>计算机图形学入门 课程学习笔记</p>\n<h2 id=\"第一节-引入\"><a href=\"#第一节-引入\" class=\"headerlink\" title=\"第一节 引入\"></a>第一节 引入</h2><h2 id=\"第二节-线性代数\"><a href=\"#第二节-线性代数\" class=\"headerlink\" title=\"第二节 线性代数\"></a>第二节 线性代数</h2><h3 id=\"向量\"><a href=\"#向量\" class=\"headerlink\" title=\"向量\"></a>向量</h3><p>向量是带有方向的量<br>重要的两个量是方向和长度<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-12-49-03.png\" alt></p>","more":"<br>数学： 向量<br>物理： 矢量<br>向量长度：<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-12-49-24.png\" alt><br>向量加法（求和）：<br>几何上<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-12-49-38.png\" alt><br>数学上<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-12-49-58.png\" alt><br>我们把向量表示成直角坐标系这种形式是有助于计算向量的长度的。  <p></p>\n<h4 id=\"向量的点乘和叉乘\"><a href=\"#向量的点乘和叉乘\" class=\"headerlink\" title=\"向量的点乘和叉乘\"></a>向量的点乘和叉乘</h4><p>向量更广泛的用法<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-12-50-12.png\" alt>  </p>\n<h5 id=\"点乘\"><a href=\"#点乘\" class=\"headerlink\" title=\"点乘\"></a>点乘</h5><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-12-50-25.png\" alt><br>左边是两个向量，右边是一个数字。<br>如果两个向量都是单位向量，那么它们点乘的结果就是余弦的值。  </p>\n<p><img src=\"/2020/03/10/GameCourse101/2020-03-08-12-58-31.png\" alt><br>点乘既然是一种运算，运算法则都会满足一些性质。<br>交换律 结合律 分配律  </p>\n<p><img src=\"/2020/03/10/GameCourse101/2020-03-08-13-08-11.png\" alt><br>如果是在坐标系下，就跟简单。  </p>\n<p><img src=\"/2020/03/10/GameCourse101/2020-03-08-13-02-30.png\" alt>  </p>\n<ol>\n<li>点乘在图形学最重要的作用就是找到两个向量的夹角。<br>比如 光从哪个地方射过来（向量）物体表面法线是什么样的（向量）我们从哪里看（向量）</li>\n<li>第二个重要作用就是找到一个向量的投影到另一个向量是长什么样的。<br>投影算出来有什么好处呢？ 我们可以把一个向量分解成两个向量，一个平行一个垂直。这样可以帮助我们把任意向量分解到任意坐标轴。<br> <img src=\"/2020/03/10/GameCourse101/2020-03-08-13-17-01.png\" alt></li>\n<li>在图形学里，我们还可以根据点乘的结果判定两个向量是否接近是否远离。</li>\n<li>向量点乘还可以告诉大家一个前与后的信息，如图（向量a和向量b点乘为正值且接近1，向量a和向量c点乘为负值，如果有一个向量跟向量a一样，那点乘结果为1，如果有一个向量正好在虚线上，那点乘的值为0，如果跟向量a正好相反，那点乘结果为-1）<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-13-44-08.png\" alt>  </li>\n</ol>\n<h5 id=\"叉乘（叉积）\"><a href=\"#叉乘（叉积）\" class=\"headerlink\" title=\"叉乘（叉积）\"></a>叉乘（叉积）</h5><p>叉乘是给定两个向量计算出同时垂直与这两个向量的新的向量，另外同时垂直这两个向量也就是必然垂直这两个向量形成的平面<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-13-57-13.png\" alt><br>右手螺旋定则（DirectX是右手，openGL是左手），伸出右手，除了拇指以外的四个手指比作向量a，向内握紧比作向量a向向量b运动，那么大拇指就是叉乘的结果。xy，<br>向量的叉乘并不满足交换律<br>向量的叉积还有一个作用是我们利用它来建立一个三维空间中的直角坐标系<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-14-04-16.png\" alt><br>几何：<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-14-36-32.png\" alt>  </p>\n<p>叉积怎么算，有什么用处：<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-14-37-55.png\" alt><br>特别重要 </p>\n<p><img src=\"/2020/03/10/GameCourse101/2020-03-08-14-38-58.png\" alt></p>\n<ol>\n<li>判定左和右<br>如图左侧，XY为平面，通过右手螺旋定则，Z为朝向我们自身的向量，如果想判断向量b在向量a左侧还是右侧（什么是左侧右侧? 从向量a顺时针旋转到达向量b为左侧，逆时针为右侧），在这里根据图示很容易看出来向量b是在向量a的左侧，如果用数字表示就是 向量a叉乘向量b得到的结果是正值（指向身体）就说明向量b在向量a的左侧，如果向量b叉乘向量a得到的结果是负值（指向身体外侧），那就说明向量a在向量b右侧，</li>\n<li>判定内与外<br>如图右侧，先判断向量AP是否在向量AB的左侧，在判断向量BP是否在向量BC的左侧，在判断向量AP是否在ac的左侧，如果都是在左侧就说明点P在三角形内部，否则肯定有一个判断是在右侧。<br>这里假设了ABC三个点是逆时针排布，如果换成顺时针也没有问题，只不过是都在左侧。<br>所以我们可以忽略三角形的排布顺序，只要三个边左或者右保持一致就说明点在三角形内部。这点非常重要，是光栅化的基础（用来判断像素是否在三角形的内部）。</li>\n</ol>\n<h4 id=\"向量定义坐标系\"><a href=\"#向量定义坐标系\" class=\"headerlink\" title=\"向量定义坐标系\"></a>向量定义坐标系</h4><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-15-51-31.png\" alt><br>向量叉乘可以定义一些互相垂直的轴，就会形成坐标系如图。<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-15-52-25.png\" alt><br>这里顶一个uvw坐标系，三个向量单位长度都为1，互相垂直，给你u和v 叉乘得到w。<br>我们可以利用投影把任意一个向量分解到三个轴上去，利用点乘，因为什么呢？向量P点乘向量U，等于是向量P的长度乘以向量U的长度在乘以cosθ，向量U又恰好是单位向量为1，等于是向量P的长度乘以cosθ，根据下图三角函数，就会得出向量P在向量U上的投影，同理获得向量P在向量V和向量W上的投影，有了这三个投影就可以获得坐标系下的这个向量。<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-16-07-00.png\" alt><br>cosA = c/b  </p>\n<h3 id=\"矩阵\"><a href=\"#矩阵\" class=\"headerlink\" title=\"矩阵\"></a>矩阵</h3><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-16-47-04.png\" alt><br><strong>在图像学里，变换就是矩阵的最大应用。</strong><br><img src=\"/2020/03/10/GameCourse101/2020-03-08-20-44-32.png\" alt>  </p>\n<h5 id=\"矩阵乘以和加上一个常量就是把矩阵的每个元素乘以和加上一个常量\"><a href=\"#矩阵乘以和加上一个常量就是把矩阵的每个元素乘以和加上一个常量\" class=\"headerlink\" title=\"矩阵乘以和加上一个常量就是把矩阵的每个元素乘以和加上一个常量.\"></a>矩阵乘以和加上一个常量就是把矩阵的每个元素乘以和加上一个常量.</h5><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-20-53-06.png\" alt><br>矩阵乘矩阵必须要符合条件才能乘，如图必须第一个矩阵的列数和第二个矩阵的行数相同相乘才有意义。<br>关于新得到的矩阵每一个元素都是什么，有不同的数学定义，这个地方比较不容易记住，这里给大家提供一个容易记得方法，比如左下角这个8，他的坐标是三行一列，这里三行对应第一个矩阵（0，4），一列对应第二个矩阵（3，2），这两个向量点乘。<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-21-50-50.png\" alt><br>矩阵乘法是没有交换律的，但是矩阵是由结合律和分配律。  </p>\n<h5 id=\"矩阵乘向量\"><a href=\"#矩阵乘向量\" class=\"headerlink\" title=\"矩阵乘向量\"></a>矩阵乘向量</h5><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-21-53-53.png\" alt></p>\n<blockquote>\n<p>一个矩阵如何和一个向量乘？当我们认为向量是列向量就有意义了（也就是说M永远为1）。    </p>\n</blockquote>\n<p><em>这是最重要的核心。</em><br>下面表示一个2D向量按Y轴镜像的操作。</p>\n<h5 id=\"矩阵转置\"><a href=\"#矩阵转置\" class=\"headerlink\" title=\"矩阵转置\"></a>矩阵转置</h5><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-22-01-06.png\" alt><br>性质： 如果要乘两个矩阵在转置好比相对后一个矩阵做装置在乘以前一个矩阵做转置的结果。</p>\n<h5 id=\"特殊的矩阵，单位矩阵\"><a href=\"#特殊的矩阵，单位矩阵\" class=\"headerlink\" title=\"特殊的矩阵，单位矩阵\"></a>特殊的矩阵，单位矩阵</h5><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-22-07-51.png\" alt><br>对角阵，只有对角线上有非零的元素，<br>矩阵的逆：如果你能找到一个矩阵，和原来的矩阵相乘，不管乘得顺序，得到的结果都是I，那么我们就认为这两个矩阵是互逆的。<br>逆矩阵的计算和转置的矩阵很相似。</p>\n<h5 id=\"向量点乘和叉乘的矩阵形式\"><a href=\"#向量点乘和叉乘的矩阵形式\" class=\"headerlink\" title=\"向量点乘和叉乘的矩阵形式\"></a>向量点乘和叉乘的矩阵形式</h5><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-22-12-11.png\" alt><br>点乘：向量a点乘向量b 等于向量a转置和向量b的乘法。<br>叉乘：相对点乘困难一些，相当于把向量a转换成一个矩阵（dual matrix）乘以向量b</p>"},{"_content":"# Python文件打包成可执行文件\n\nPython是一个脚本语言，被解释器解释执行。它的发布方式：\n\n## .py 文件\n\n没什么好讲的，开源项目或者个人练习，直接提供源码最简单粗暴，需要使用者自行安装Python并且安装依赖的各种库。\n\n## .pyc 文件\n\n如果觉得源码写的差劲不好意思被别人看到，或者出于保密等不愿意源码被运行者看到，可以使用pyc文件发布，pyc文件是Python解释器可以识别的二进制码，故发布后也是跨平台的，需要使用者安装相应版本的Python和依赖库。\n<!-- more -->\n```\n#代码\nimport py_compile\npy_compile.compile(\"D:\\Python\\main.py\")            # 相对路径或绝对路径\n\n#命令行下\npython -m py_compile test.py\n#会在相同路径里面创建__pycache__文件夹，编译过的pyc文件就在里面\n\n#多个文件\nimport compileall\ncompileall.compile_dir(\"存放海量py的目录\")\n```\n\n## 可执行exe文件\n\n- pyInstaller\n\t  1.安装pyInstaller\n\n\t```\n\t$ pip install pyinstaller #安装\n\t$ pyinstaller --version #查看版本\n\t```\n\n    2.如果查看版本报错\n\n    ```\n    'pyinstall' is not recognized as an internal or external \t\tcommand,operable program or batch file.#需要系统变量里的Path变量下添加其所在目录，然后重启命令行即可.\n    ```\n\n    3.使用pyInstaller：\n  ```pyinstaller -F helloworld.py```\n  \n  \n  \n- py2exe\n\n\t1. 命令行``pip install py2exe``安装\n\t\n\t1. 在命令行内测试你的程序确定可以运行\n\t\n\t   ``python helloworld.py``\n\t\n\t2. 创建你自己的执行脚本 (setup.py)\n\t\n\t   ```\n\t   from distutils.core import setup\n\t   \n\t   import py2exe\n\t   \n\t        \n\t   setup(console=[\"helloworld.py\"]) #这里helloworld.py替换成你的脚本\n\t   ```\n\t\n\t 3. 在命令行Run your setup script\n\t\n\t    ``python setup.py py2exe``\n\t 4. 然后再dist文件夹下就会看到生成的.exe 文件了\n\t\n\t5. 如果出现``IndexError: tuple index out of range``的话是因为py2exe停止支持3.4以上版本，可以换用这个地方的py2exe, 但是好像也是有问题\n\t\n\t   ref：https://stackoverflow.com/questions/41578808/python-indexerror-tuple-index-out-of-range-when-using-py2exe\n\t\n\t   ref：https://github.com/albertosottile/py2exe\n\t\n\t\n\t\n- cx_Freeze\n\n    1. ``$ pip install cx_Freeze``安装\n\n    2. ```$ cxfreeze hello.py --target-dir dist```生成执行文件，如果报错无法识别就参考这个解决\n\n       ref:https://stackoverflow.com/questions/25242860/cxfreeze-command-not-found-in-windows/25243419#25243419 \n\n- auto-py-to-exe 2.6.6\n  1. ``$ pip install auto-py-to-exe`` 安装\n  2. ````$ auto-py-to-exe`` 使用\n\n","source":"_posts/Python文件打包成可执行文件.md","raw":"# Python文件打包成可执行文件\n\nPython是一个脚本语言，被解释器解释执行。它的发布方式：\n\n## .py 文件\n\n没什么好讲的，开源项目或者个人练习，直接提供源码最简单粗暴，需要使用者自行安装Python并且安装依赖的各种库。\n\n## .pyc 文件\n\n如果觉得源码写的差劲不好意思被别人看到，或者出于保密等不愿意源码被运行者看到，可以使用pyc文件发布，pyc文件是Python解释器可以识别的二进制码，故发布后也是跨平台的，需要使用者安装相应版本的Python和依赖库。\n<!-- more -->\n```\n#代码\nimport py_compile\npy_compile.compile(\"D:\\Python\\main.py\")            # 相对路径或绝对路径\n\n#命令行下\npython -m py_compile test.py\n#会在相同路径里面创建__pycache__文件夹，编译过的pyc文件就在里面\n\n#多个文件\nimport compileall\ncompileall.compile_dir(\"存放海量py的目录\")\n```\n\n## 可执行exe文件\n\n- pyInstaller\n\t  1.安装pyInstaller\n\n\t```\n\t$ pip install pyinstaller #安装\n\t$ pyinstaller --version #查看版本\n\t```\n\n    2.如果查看版本报错\n\n    ```\n    'pyinstall' is not recognized as an internal or external \t\tcommand,operable program or batch file.#需要系统变量里的Path变量下添加其所在目录，然后重启命令行即可.\n    ```\n\n    3.使用pyInstaller：\n  ```pyinstaller -F helloworld.py```\n  \n  \n  \n- py2exe\n\n\t1. 命令行``pip install py2exe``安装\n\t\n\t1. 在命令行内测试你的程序确定可以运行\n\t\n\t   ``python helloworld.py``\n\t\n\t2. 创建你自己的执行脚本 (setup.py)\n\t\n\t   ```\n\t   from distutils.core import setup\n\t   \n\t   import py2exe\n\t   \n\t        \n\t   setup(console=[\"helloworld.py\"]) #这里helloworld.py替换成你的脚本\n\t   ```\n\t\n\t 3. 在命令行Run your setup script\n\t\n\t    ``python setup.py py2exe``\n\t 4. 然后再dist文件夹下就会看到生成的.exe 文件了\n\t\n\t5. 如果出现``IndexError: tuple index out of range``的话是因为py2exe停止支持3.4以上版本，可以换用这个地方的py2exe, 但是好像也是有问题\n\t\n\t   ref：https://stackoverflow.com/questions/41578808/python-indexerror-tuple-index-out-of-range-when-using-py2exe\n\t\n\t   ref：https://github.com/albertosottile/py2exe\n\t\n\t\n\t\n- cx_Freeze\n\n    1. ``$ pip install cx_Freeze``安装\n\n    2. ```$ cxfreeze hello.py --target-dir dist```生成执行文件，如果报错无法识别就参考这个解决\n\n       ref:https://stackoverflow.com/questions/25242860/cxfreeze-command-not-found-in-windows/25243419#25243419 \n\n- auto-py-to-exe 2.6.6\n  1. ``$ pip install auto-py-to-exe`` 安装\n  2. ````$ auto-py-to-exe`` 使用\n\n","slug":"Python文件打包成可执行文件","published":1,"date":"2020-03-10T10:49:41.138Z","updated":"2020-03-10T10:49:41.139Z","title":"Python文件打包成可执行文件","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7lv2jli0009ycp4gxt5hhz7","content":"<h1 id=\"Python文件打包成可执行文件\"><a href=\"#Python文件打包成可执行文件\" class=\"headerlink\" title=\"Python文件打包成可执行文件\"></a>Python文件打包成可执行文件</h1><p>Python是一个脚本语言，被解释器解释执行。它的发布方式：</p>\n<h2 id=\"py-文件\"><a href=\"#py-文件\" class=\"headerlink\" title=\".py 文件\"></a>.py 文件</h2><p>没什么好讲的，开源项目或者个人练习，直接提供源码最简单粗暴，需要使用者自行安装Python并且安装依赖的各种库。</p>\n<h2 id=\"pyc-文件\"><a href=\"#pyc-文件\" class=\"headerlink\" title=\".pyc 文件\"></a>.pyc 文件</h2><p>如果觉得源码写的差劲不好意思被别人看到，或者出于保密等不愿意源码被运行者看到，可以使用pyc文件发布，pyc文件是Python解释器可以识别的二进制码，故发布后也是跨平台的，需要使用者安装相应版本的Python和依赖库。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#代码</span><br><span class=\"line\">import py_compile</span><br><span class=\"line\">py_compile.compile(&quot;D:\\Python\\main.py&quot;)            # 相对路径或绝对路径</span><br><span class=\"line\"></span><br><span class=\"line\">#命令行下</span><br><span class=\"line\">python -m py_compile test.py</span><br><span class=\"line\">#会在相同路径里面创建__pycache__文件夹，编译过的pyc文件就在里面</span><br><span class=\"line\"></span><br><span class=\"line\">#多个文件</span><br><span class=\"line\">import compileall</span><br><span class=\"line\">compileall.compile_dir(&quot;存放海量py的目录&quot;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可执行exe文件\"><a href=\"#可执行exe文件\" class=\"headerlink\" title=\"可执行exe文件\"></a>可执行exe文件</h2><ul>\n<li><p>pyInstaller</p>\n<pre><code>1.安装pyInstaller</code></pre>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install pyinstaller #安装</span><br><span class=\"line\">$ pyinstaller --version #查看版本</span><br></pre></td></tr></table></figure>\n\n<p>  2.如果查看版本报错</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#39;pyinstall&#39; is not recognized as an internal or external \t\tcommand,operable program or batch file.#需要系统变量里的Path变量下添加其所在目录，然后重启命令行即可.</span><br></pre></td></tr></table></figure>\n\n<p>  3.使用pyInstaller：</p>\n<figure class=\"highlight plain\"><figcaption><span>-F helloworld.py```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">- py2exe</span><br><span class=\"line\"></span><br><span class=\"line\">\t1. 命令行&#96;&#96;pip install py2exe&#96;&#96;安装</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t1. 在命令行内测试你的程序确定可以运行</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t   &#96;&#96;python helloworld.py&#96;&#96;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t2. 创建你自己的执行脚本 (setup.py)</span><br></pre></td></tr></table></figure>\n<pre><code>from distutils.core import setup\n\nimport py2exe</code></pre></li>\n</ul>\n<pre><code>   setup(console=[&quot;helloworld.py&quot;]) #这里helloworld.py替换成你的脚本\n   ```\n\n 3. 在命令行Run your setup script\n\n    ``python setup.py py2exe``\n 4. 然后再dist文件夹下就会看到生成的.exe 文件了\n\n5. 如果出现``IndexError: tuple index out of range``的话是因为py2exe停止支持3.4以上版本，可以换用这个地方的py2exe, 但是好像也是有问题\n\n   ref：https://stackoverflow.com/questions/41578808/python-indexerror-tuple-index-out-of-range-when-using-py2exe\n\n   ref：https://github.com/albertosottile/py2exe</code></pre><ul>\n<li><p>cx_Freeze</p>\n<ol>\n<li><p><code>$ pip install cx_Freeze</code>安装</p>\n</li>\n<li><p><code>$ cxfreeze hello.py --target-dir dist</code>生成执行文件，如果报错无法识别就参考这个解决</p>\n<p>ref:<a href=\"https://stackoverflow.com/questions/25242860/cxfreeze-command-not-found-in-windows/25243419#25243419\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/25242860/cxfreeze-command-not-found-in-windows/25243419#25243419</a> </p>\n</li>\n</ol>\n</li>\n<li><p>auto-py-to-exe 2.6.6</p>\n<ol>\n<li><code>$ pip install auto-py-to-exe</code> 安装</li>\n<li>````$ auto-py-to-exe`` 使用</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#2d6b96","paginator":"#6AA7D2","button_hover":"#3B8BC4","text_selection":"#6AA7D2","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#6AA7D2","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"文章":"/","归档":"/archives"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":true,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":null,"top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2013,"footer_custom_text":"Hi, welcome to my <a href=\"https://sunyuxianggit.github.io/\">blog</a>!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":true,"url":"https://github.com/sunyuxianggit","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"SunYuxiangのBlog","subtitle":"好记性,不如烂笔头.今天你要写点什么？","description":"","author":"Sun Yuxiang","language":"zh-Hans","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/sunyuxianggit/sunyuxianggit.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"category_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"<h1 id=\"Python文件打包成可执行文件\"><a href=\"#Python文件打包成可执行文件\" class=\"headerlink\" title=\"Python文件打包成可执行文件\"></a>Python文件打包成可执行文件</h1><p>Python是一个脚本语言，被解释器解释执行。它的发布方式：</p>\n<h2 id=\"py-文件\"><a href=\"#py-文件\" class=\"headerlink\" title=\".py 文件\"></a>.py 文件</h2><p>没什么好讲的，开源项目或者个人练习，直接提供源码最简单粗暴，需要使用者自行安装Python并且安装依赖的各种库。</p>\n<h2 id=\"pyc-文件\"><a href=\"#pyc-文件\" class=\"headerlink\" title=\".pyc 文件\"></a>.pyc 文件</h2><p>如果觉得源码写的差劲不好意思被别人看到，或者出于保密等不愿意源码被运行者看到，可以使用pyc文件发布，pyc文件是Python解释器可以识别的二进制码，故发布后也是跨平台的，需要使用者安装相应版本的Python和依赖库。</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#代码</span><br><span class=\"line\">import py_compile</span><br><span class=\"line\">py_compile.compile(&quot;D:\\Python\\main.py&quot;)            # 相对路径或绝对路径</span><br><span class=\"line\"></span><br><span class=\"line\">#命令行下</span><br><span class=\"line\">python -m py_compile test.py</span><br><span class=\"line\">#会在相同路径里面创建__pycache__文件夹，编译过的pyc文件就在里面</span><br><span class=\"line\"></span><br><span class=\"line\">#多个文件</span><br><span class=\"line\">import compileall</span><br><span class=\"line\">compileall.compile_dir(&quot;存放海量py的目录&quot;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可执行exe文件\"><a href=\"#可执行exe文件\" class=\"headerlink\" title=\"可执行exe文件\"></a>可执行exe文件</h2><ul>\n<li><p>pyInstaller</p>\n<pre><code>1.安装pyInstaller</code></pre>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install pyinstaller #安装</span><br><span class=\"line\">$ pyinstaller --version #查看版本</span><br></pre></td></tr></table></figure>\n\n<p>  2.如果查看版本报错</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#39;pyinstall&#39; is not recognized as an internal or external \t\tcommand,operable program or batch file.#需要系统变量里的Path变量下添加其所在目录，然后重启命令行即可.</span><br></pre></td></tr></table></figure>\n\n<p>  3.使用pyInstaller：</p>\n<figure class=\"highlight plain\"><figcaption><span>-F helloworld.py```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">- py2exe</span><br><span class=\"line\"></span><br><span class=\"line\">\t1. 命令行&#96;&#96;pip install py2exe&#96;&#96;安装</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t1. 在命令行内测试你的程序确定可以运行</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t   &#96;&#96;python helloworld.py&#96;&#96;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t2. 创建你自己的执行脚本 (setup.py)</span><br></pre></td></tr></table></figure>\n<pre><code>from distutils.core import setup\n\nimport py2exe</code></pre></li>\n</ul>\n<pre><code>   setup(console=[&quot;helloworld.py&quot;]) #这里helloworld.py替换成你的脚本\n   ```\n\n 3. 在命令行Run your setup script\n\n    ``python setup.py py2exe``\n 4. 然后再dist文件夹下就会看到生成的.exe 文件了\n\n5. 如果出现``IndexError: tuple index out of range``的话是因为py2exe停止支持3.4以上版本，可以换用这个地方的py2exe, 但是好像也是有问题\n\n   ref：https://stackoverflow.com/questions/41578808/python-indexerror-tuple-index-out-of-range-when-using-py2exe\n\n   ref：https://github.com/albertosottile/py2exe</code></pre><ul>\n<li><p>cx_Freeze</p>\n<ol>\n<li><p><code>$ pip install cx_Freeze</code>安装</p>\n</li>\n<li><p><code>$ cxfreeze hello.py --target-dir dist</code>生成执行文件，如果报错无法识别就参考这个解决</p>\n<p>ref:<a href=\"https://stackoverflow.com/questions/25242860/cxfreeze-command-not-found-in-windows/25243419#25243419\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/25242860/cxfreeze-command-not-found-in-windows/25243419#25243419</a> </p>\n</li>\n</ol>\n</li>\n<li><p>auto-py-to-exe 2.6.6</p>\n<ol>\n<li><code>$ pip install auto-py-to-exe</code> 安装</li>\n<li>````$ auto-py-to-exe`` 使用</li>\n</ol>\n</li>\n</ul>"},{"_content":"\n\n# Top 10 ways to make Maya go FASTER\n\n## 1关闭一些显示设置：\n\n首先是阴影，然后OCC，然后运动模糊然后抗锯齿\n\n## 2关闭材质球实时预览\n\n可以改用右键单个refresh swatch\n\n## 3选择暂停viewport\n<!-- more -->\n## 4确保不实用的插件不加载\n\n还可以导入的时候不自动载入ref，选择手动载入\n\n## 5关闭模型的Adaptive open Subdiv\n\n## 6设置Viewport2.0\n\n1浮点渲染目标，此设置与色彩管理有关系，代价是CPU的RAM\n\n推荐，R32G32B32A32_Float > R16G16B16A16_Float\n\n也可以完全禁用\n\n2性能下把透明贴图算法改成 Alpha Cut\n\n代价是牺牲了半透明的效果，但是提高了速度\n\n## 7使用贴图时，最轻量的贴图是JPEG","source":"_posts/Top 10 ways to make Maya go FASTER.md","raw":"\n\n# Top 10 ways to make Maya go FASTER\n\n## 1关闭一些显示设置：\n\n首先是阴影，然后OCC，然后运动模糊然后抗锯齿\n\n## 2关闭材质球实时预览\n\n可以改用右键单个refresh swatch\n\n## 3选择暂停viewport\n<!-- more -->\n## 4确保不实用的插件不加载\n\n还可以导入的时候不自动载入ref，选择手动载入\n\n## 5关闭模型的Adaptive open Subdiv\n\n## 6设置Viewport2.0\n\n1浮点渲染目标，此设置与色彩管理有关系，代价是CPU的RAM\n\n推荐，R32G32B32A32_Float > R16G16B16A16_Float\n\n也可以完全禁用\n\n2性能下把透明贴图算法改成 Alpha Cut\n\n代价是牺牲了半透明的效果，但是提高了速度\n\n## 7使用贴图时，最轻量的贴图是JPEG","slug":"Top 10 ways to make Maya go FASTER","published":1,"date":"2020-03-10T10:49:41.139Z","updated":"2020-03-10T10:49:41.140Z","title":"Top 10 ways to make Maya go FASTER","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7lv2jlj000cycp41obfeq07","content":"<h1 id=\"Top-10-ways-to-make-Maya-go-FASTER\"><a href=\"#Top-10-ways-to-make-Maya-go-FASTER\" class=\"headerlink\" title=\"Top 10 ways to make Maya go FASTER\"></a>Top 10 ways to make Maya go FASTER</h1><h2 id=\"1关闭一些显示设置：\"><a href=\"#1关闭一些显示设置：\" class=\"headerlink\" title=\"1关闭一些显示设置：\"></a>1关闭一些显示设置：</h2><p>首先是阴影，然后OCC，然后运动模糊然后抗锯齿</p>\n<h2 id=\"2关闭材质球实时预览\"><a href=\"#2关闭材质球实时预览\" class=\"headerlink\" title=\"2关闭材质球实时预览\"></a>2关闭材质球实时预览</h2><p>可以改用右键单个refresh swatch</p>\n<h2 id=\"3选择暂停viewport\"><a href=\"#3选择暂停viewport\" class=\"headerlink\" title=\"3选择暂停viewport\"></a>3选择暂停viewport</h2><a id=\"more\"></a>\n<h2 id=\"4确保不实用的插件不加载\"><a href=\"#4确保不实用的插件不加载\" class=\"headerlink\" title=\"4确保不实用的插件不加载\"></a>4确保不实用的插件不加载</h2><p>还可以导入的时候不自动载入ref，选择手动载入</p>\n<h2 id=\"5关闭模型的Adaptive-open-Subdiv\"><a href=\"#5关闭模型的Adaptive-open-Subdiv\" class=\"headerlink\" title=\"5关闭模型的Adaptive open Subdiv\"></a>5关闭模型的Adaptive open Subdiv</h2><h2 id=\"6设置Viewport2-0\"><a href=\"#6设置Viewport2-0\" class=\"headerlink\" title=\"6设置Viewport2.0\"></a>6设置Viewport2.0</h2><p>1浮点渲染目标，此设置与色彩管理有关系，代价是CPU的RAM</p>\n<p>推荐，R32G32B32A32_Float &gt; R16G16B16A16_Float</p>\n<p>也可以完全禁用</p>\n<p>2性能下把透明贴图算法改成 Alpha Cut</p>\n<p>代价是牺牲了半透明的效果，但是提高了速度</p>\n<h2 id=\"7使用贴图时，最轻量的贴图是JPEG\"><a href=\"#7使用贴图时，最轻量的贴图是JPEG\" class=\"headerlink\" title=\"7使用贴图时，最轻量的贴图是JPEG\"></a>7使用贴图时，最轻量的贴图是JPEG</h2>","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#2d6b96","paginator":"#6AA7D2","button_hover":"#3B8BC4","text_selection":"#6AA7D2","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#6AA7D2","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"文章":"/","归档":"/archives"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":true,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":null,"top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2013,"footer_custom_text":"Hi, welcome to my <a href=\"https://sunyuxianggit.github.io/\">blog</a>!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":true,"url":"https://github.com/sunyuxianggit","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"SunYuxiangのBlog","subtitle":"好记性,不如烂笔头.今天你要写点什么？","description":"","author":"Sun Yuxiang","language":"zh-Hans","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/sunyuxianggit/sunyuxianggit.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"category_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"<h1 id=\"Top-10-ways-to-make-Maya-go-FASTER\"><a href=\"#Top-10-ways-to-make-Maya-go-FASTER\" class=\"headerlink\" title=\"Top 10 ways to make Maya go FASTER\"></a>Top 10 ways to make Maya go FASTER</h1><h2 id=\"1关闭一些显示设置：\"><a href=\"#1关闭一些显示设置：\" class=\"headerlink\" title=\"1关闭一些显示设置：\"></a>1关闭一些显示设置：</h2><p>首先是阴影，然后OCC，然后运动模糊然后抗锯齿</p>\n<h2 id=\"2关闭材质球实时预览\"><a href=\"#2关闭材质球实时预览\" class=\"headerlink\" title=\"2关闭材质球实时预览\"></a>2关闭材质球实时预览</h2><p>可以改用右键单个refresh swatch</p>\n<h2 id=\"3选择暂停viewport\"><a href=\"#3选择暂停viewport\" class=\"headerlink\" title=\"3选择暂停viewport\"></a>3选择暂停viewport</h2>","more":"<h2 id=\"4确保不实用的插件不加载\"><a href=\"#4确保不实用的插件不加载\" class=\"headerlink\" title=\"4确保不实用的插件不加载\"></a>4确保不实用的插件不加载</h2><p>还可以导入的时候不自动载入ref，选择手动载入</p>\n<h2 id=\"5关闭模型的Adaptive-open-Subdiv\"><a href=\"#5关闭模型的Adaptive-open-Subdiv\" class=\"headerlink\" title=\"5关闭模型的Adaptive open Subdiv\"></a>5关闭模型的Adaptive open Subdiv</h2><h2 id=\"6设置Viewport2-0\"><a href=\"#6设置Viewport2-0\" class=\"headerlink\" title=\"6设置Viewport2.0\"></a>6设置Viewport2.0</h2><p>1浮点渲染目标，此设置与色彩管理有关系，代价是CPU的RAM</p>\n<p>推荐，R32G32B32A32_Float &gt; R16G16B16A16_Float</p>\n<p>也可以完全禁用</p>\n<p>2性能下把透明贴图算法改成 Alpha Cut</p>\n<p>代价是牺牲了半透明的效果，但是提高了速度</p>\n<h2 id=\"7使用贴图时，最轻量的贴图是JPEG\"><a href=\"#7使用贴图时，最轻量的贴图是JPEG\" class=\"headerlink\" title=\"7使用贴图时，最轻量的贴图是JPEG\"></a>7使用贴图时，最轻量的贴图是JPEG</h2>"},{"title":"使用hexo创建个人blog网页的笔记","date":"2019-12-01T14:53:13.000Z","_content":"\n## 安装支持软件\n\n1. 下载并安装node.js.https://nodejs.org/en/\n\n2. 下载好可以在cmd里面通过查看版本号来确认安装成功。\n\n   ```\n   $ node -v #参看node版本号\n   $ npm -v # 查看npm包管理器版本号\n   ```\n<!--more-->\n3. 由于npm国内下载包速度太慢，所以可以里面npm安装一个cnpm（使用淘宝源）加快速度，不需要可以跳过，同理可以通过查看版本号确认安装成功。\n\n   ```\n   $ npm install -g cnpm --registry=\"https://registry.npm.taobao.org\" #-g表示全局安装\n   $ cnpm -v#参看cnpm 版本号\n   ```\n\n4. 使用cnpm 安装hexo，同理可以通过查看版本号确认安装成功。\n\n   ```\n   $ cnpm install -g hexo-cli #全局安装hexo\n   $ hexo -v #参看hexo版本号\n   ```\n\n\n\n## 使用hexo搭建博客\n\n1. 首先建立一个空的文件夹blog\n\n2. 命令行进入blog文件夹\n\n3. 使用hexo生成博客\n\n   ```\n   $ hexo init #生成博客\n   ```\n\n4. 使用hexo server进行本地预览博客，预览完成后Ctrl+C退出预览\n\n   ```\n   $ hexo s#本地预览博客\n   ```\n\n5. 使用hexo new 新建文章\n\n   ```\n   $ hexo n \"文章名\"\n   ```\n\n6. 先使用hexo clean 清除已经创建的页面，在使用hexo generated生成页面，建议生成先进行本地预览。\n\n   ```\n   $ hexo clean #清除\n   $ hexo g #生成\n   ```\n\n## 如何把博客布置到github上\n\n1. 首先在github自己的账号内新建仓库，注意仓库名就是你的域名。仓库名必须是 [账户名.github.io]\n\n2. 安装git并在git下设置用户名和邮箱\n\n   ```\n   git config --global user.name [username]\n   git config --global user.email [email]\n   ```\n\n3. 在bolg文件夹下安装git部署插件\n\n   ```\n   $ cnpm install --save hexo-deployer-git\n   ```\n\n4. 设置一下bolg文件夹的_config.yml，注意每个冒号后面有空格\n\n   ```\n   # Deployment\n   ## Docs: https://hexo.io/docs/deployment.html\n   deploy:\n     type: git \n     repo: https://github.com/sunyuxianggit/sunyuxianggit.github.io.git\n     branch: master\n   ```\n\n5. 部署到github，中间需要输入github的账号密码。\n\n   ```\n   $ hexo doploy#部署到GitHub\n   ```\n   \n6. 常见错误：\n\n   fatal: in unpopulated submodule '.deploy_git'\n\n   这种情况可以先安装下相关的依赖：\n\n   ```\n   $ npm install hexo-deployer-git –save\n   $ rm -rf .deploy_git#删掉\n   $ hexo g\n   $ hexo d#重新生成和部署\n   ```\n\n   \n\n## 日常更新文章\n\n1. 命令行进入blog文件夹使用```$ hexo new``` 新建文章\n2. 使用```$ hexo clean```清除老页面，然后在使用```$ hexo generated```生成页面\n3. 使用```$ hexo server```本地预览没有问题后，使用 ```$ hexo deploy```部署到Github\n\n## 如何更换主题\n\n1. 命令行进入blog\n\n2. 使用git clone 功能 clone喜欢的主题\n\n   ```\n   $ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n   ```\n\n3. 修改配置文件\n\n   ```\n   # Extensions\n   ## Plugins: https://hexo.io/plugins/\n   ## Themes: https://hexo.io/themes/\n   theme: yilia#这里\n   ```\n\n\n## 多台设备同步管理\n\n1. 原创建博客设备把源文件上传到GitHub，上传时注意检查所有.gitignore文件忽略情况和把node_modules文件夹删掉（因为内部文件名太长，上传的话git报错）.\n2. 另一台电脑上将源代码clone下来之后，直接执行 ```cnpm install```把node_modules安装回来.\n3. 然后```hexo s```正常使用.","source":"_posts/使用hexo创建个人blog网页的笔记.md","raw":"---\ntitle: 使用hexo创建个人blog网页的笔记\ndate: 2019-12-01 22:53:13\ntags: 个人笔记\n---\n\n## 安装支持软件\n\n1. 下载并安装node.js.https://nodejs.org/en/\n\n2. 下载好可以在cmd里面通过查看版本号来确认安装成功。\n\n   ```\n   $ node -v #参看node版本号\n   $ npm -v # 查看npm包管理器版本号\n   ```\n<!--more-->\n3. 由于npm国内下载包速度太慢，所以可以里面npm安装一个cnpm（使用淘宝源）加快速度，不需要可以跳过，同理可以通过查看版本号确认安装成功。\n\n   ```\n   $ npm install -g cnpm --registry=\"https://registry.npm.taobao.org\" #-g表示全局安装\n   $ cnpm -v#参看cnpm 版本号\n   ```\n\n4. 使用cnpm 安装hexo，同理可以通过查看版本号确认安装成功。\n\n   ```\n   $ cnpm install -g hexo-cli #全局安装hexo\n   $ hexo -v #参看hexo版本号\n   ```\n\n\n\n## 使用hexo搭建博客\n\n1. 首先建立一个空的文件夹blog\n\n2. 命令行进入blog文件夹\n\n3. 使用hexo生成博客\n\n   ```\n   $ hexo init #生成博客\n   ```\n\n4. 使用hexo server进行本地预览博客，预览完成后Ctrl+C退出预览\n\n   ```\n   $ hexo s#本地预览博客\n   ```\n\n5. 使用hexo new 新建文章\n\n   ```\n   $ hexo n \"文章名\"\n   ```\n\n6. 先使用hexo clean 清除已经创建的页面，在使用hexo generated生成页面，建议生成先进行本地预览。\n\n   ```\n   $ hexo clean #清除\n   $ hexo g #生成\n   ```\n\n## 如何把博客布置到github上\n\n1. 首先在github自己的账号内新建仓库，注意仓库名就是你的域名。仓库名必须是 [账户名.github.io]\n\n2. 安装git并在git下设置用户名和邮箱\n\n   ```\n   git config --global user.name [username]\n   git config --global user.email [email]\n   ```\n\n3. 在bolg文件夹下安装git部署插件\n\n   ```\n   $ cnpm install --save hexo-deployer-git\n   ```\n\n4. 设置一下bolg文件夹的_config.yml，注意每个冒号后面有空格\n\n   ```\n   # Deployment\n   ## Docs: https://hexo.io/docs/deployment.html\n   deploy:\n     type: git \n     repo: https://github.com/sunyuxianggit/sunyuxianggit.github.io.git\n     branch: master\n   ```\n\n5. 部署到github，中间需要输入github的账号密码。\n\n   ```\n   $ hexo doploy#部署到GitHub\n   ```\n   \n6. 常见错误：\n\n   fatal: in unpopulated submodule '.deploy_git'\n\n   这种情况可以先安装下相关的依赖：\n\n   ```\n   $ npm install hexo-deployer-git –save\n   $ rm -rf .deploy_git#删掉\n   $ hexo g\n   $ hexo d#重新生成和部署\n   ```\n\n   \n\n## 日常更新文章\n\n1. 命令行进入blog文件夹使用```$ hexo new``` 新建文章\n2. 使用```$ hexo clean```清除老页面，然后在使用```$ hexo generated```生成页面\n3. 使用```$ hexo server```本地预览没有问题后，使用 ```$ hexo deploy```部署到Github\n\n## 如何更换主题\n\n1. 命令行进入blog\n\n2. 使用git clone 功能 clone喜欢的主题\n\n   ```\n   $ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n   ```\n\n3. 修改配置文件\n\n   ```\n   # Extensions\n   ## Plugins: https://hexo.io/plugins/\n   ## Themes: https://hexo.io/themes/\n   theme: yilia#这里\n   ```\n\n\n## 多台设备同步管理\n\n1. 原创建博客设备把源文件上传到GitHub，上传时注意检查所有.gitignore文件忽略情况和把node_modules文件夹删掉（因为内部文件名太长，上传的话git报错）.\n2. 另一台电脑上将源代码clone下来之后，直接执行 ```cnpm install```把node_modules安装回来.\n3. 然后```hexo s```正常使用.","slug":"使用hexo创建个人blog网页的笔记","published":1,"updated":"2020-03-10T10:49:41.141Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7lv2jlk000dycp4077vfp9c","content":"<h2 id=\"安装支持软件\"><a href=\"#安装支持软件\" class=\"headerlink\" title=\"安装支持软件\"></a>安装支持软件</h2><ol>\n<li><p>下载并安装node.js.<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/</a></p>\n</li>\n<li><p>下载好可以在cmd里面通过查看版本号来确认安装成功。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v #参看node版本号</span><br><span class=\"line\">$ npm -v # 查看npm包管理器版本号</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a></li>\n<li><p>由于npm国内下载包速度太慢，所以可以里面npm安装一个cnpm（使用淘宝源）加快速度，不需要可以跳过，同理可以通过查看版本号确认安装成功。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g cnpm --registry&#x3D;&quot;https:&#x2F;&#x2F;registry.npm.taobao.org&quot; #-g表示全局安装</span><br><span class=\"line\">$ cnpm -v#参看cnpm 版本号</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用cnpm 安装hexo，同理可以通过查看版本号确认安装成功。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm install -g hexo-cli #全局安装hexo</span><br><span class=\"line\">$ hexo -v #参看hexo版本号</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<h2 id=\"使用hexo搭建博客\"><a href=\"#使用hexo搭建博客\" class=\"headerlink\" title=\"使用hexo搭建博客\"></a>使用hexo搭建博客</h2><ol>\n<li><p>首先建立一个空的文件夹blog</p>\n</li>\n<li><p>命令行进入blog文件夹</p>\n</li>\n<li><p>使用hexo生成博客</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init #生成博客</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用hexo server进行本地预览博客，预览完成后Ctrl+C退出预览</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s#本地预览博客</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用hexo new 新建文章</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo n &quot;文章名&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>先使用hexo clean 清除已经创建的页面，在使用hexo generated生成页面，建议生成先进行本地预览。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean #清除</span><br><span class=\"line\">$ hexo g #生成</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"如何把博客布置到github上\"><a href=\"#如何把博客布置到github上\" class=\"headerlink\" title=\"如何把博客布置到github上\"></a>如何把博客布置到github上</h2><ol>\n<li><p>首先在github自己的账号内新建仓库，注意仓库名就是你的域名。仓库名必须是 [账户名.github.io]</p>\n</li>\n<li><p>安装git并在git下设置用户名和邮箱</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name [username]</span><br><span class=\"line\">git config --global user.email [email]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在bolg文件夹下安装git部署插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置一下bolg文件夹的_config.yml，注意每个冒号后面有空格</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git </span><br><span class=\"line\">  repo: https:&#x2F;&#x2F;github.com&#x2F;sunyuxianggit&#x2F;sunyuxianggit.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>部署到github，中间需要输入github的账号密码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo doploy#部署到GitHub</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>常见错误：</p>\n<p>fatal: in unpopulated submodule ‘.deploy_git’</p>\n<p>这种情况可以先安装下相关的依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git –save</span><br><span class=\"line\">$ rm -rf .deploy_git#删掉</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d#重新生成和部署</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<h2 id=\"日常更新文章\"><a href=\"#日常更新文章\" class=\"headerlink\" title=\"日常更新文章\"></a>日常更新文章</h2><ol>\n<li>命令行进入blog文件夹使用<code>$ hexo new</code> 新建文章</li>\n<li>使用<code>$ hexo clean</code>清除老页面，然后在使用<code>$ hexo generated</code>生成页面</li>\n<li>使用<code>$ hexo server</code>本地预览没有问题后，使用 <code>$ hexo deploy</code>部署到Github</li>\n</ol>\n<h2 id=\"如何更换主题\"><a href=\"#如何更换主题\" class=\"headerlink\" title=\"如何更换主题\"></a>如何更换主题</h2><ol>\n<li><p>命令行进入blog</p>\n</li>\n<li><p>使用git clone 功能 clone喜欢的主题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https:&#x2F;&#x2F;github.com&#x2F;litten&#x2F;hexo-theme-yilia.git themes&#x2F;yilia</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class=\"line\">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class=\"line\">theme: yilia#这里</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<h2 id=\"多台设备同步管理\"><a href=\"#多台设备同步管理\" class=\"headerlink\" title=\"多台设备同步管理\"></a>多台设备同步管理</h2><ol>\n<li>原创建博客设备把源文件上传到GitHub，上传时注意检查所有.gitignore文件忽略情况和把node_modules文件夹删掉（因为内部文件名太长，上传的话git报错）.</li>\n<li>另一台电脑上将源代码clone下来之后，直接执行 <code>cnpm install</code>把node_modules安装回来.</li>\n<li>然后<code>hexo s</code>正常使用.</li>\n</ol>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#2d6b96","paginator":"#6AA7D2","button_hover":"#3B8BC4","text_selection":"#6AA7D2","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#6AA7D2","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"文章":"/","归档":"/archives"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":true,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":null,"top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2013,"footer_custom_text":"Hi, welcome to my <a href=\"https://sunyuxianggit.github.io/\">blog</a>!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":true,"url":"https://github.com/sunyuxianggit","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"SunYuxiangのBlog","subtitle":"好记性,不如烂笔头.今天你要写点什么？","description":"","author":"Sun Yuxiang","language":"zh-Hans","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/sunyuxianggit/sunyuxianggit.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"category_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"<h2 id=\"安装支持软件\"><a href=\"#安装支持软件\" class=\"headerlink\" title=\"安装支持软件\"></a>安装支持软件</h2><ol>\n<li><p>下载并安装node.js.<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/</a></p>\n</li>\n<li><p>下载好可以在cmd里面通过查看版本号来确认安装成功。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v #参看node版本号</span><br><span class=\"line\">$ npm -v # 查看npm包管理器版本号</span><br></pre></td></tr></table></figure></li></ol>","more":"\n<li><p>由于npm国内下载包速度太慢，所以可以里面npm安装一个cnpm（使用淘宝源）加快速度，不需要可以跳过，同理可以通过查看版本号确认安装成功。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g cnpm --registry&#x3D;&quot;https:&#x2F;&#x2F;registry.npm.taobao.org&quot; #-g表示全局安装</span><br><span class=\"line\">$ cnpm -v#参看cnpm 版本号</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用cnpm 安装hexo，同理可以通过查看版本号确认安装成功。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm install -g hexo-cli #全局安装hexo</span><br><span class=\"line\">$ hexo -v #参看hexo版本号</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n\n<h2 id=\"使用hexo搭建博客\"><a href=\"#使用hexo搭建博客\" class=\"headerlink\" title=\"使用hexo搭建博客\"></a>使用hexo搭建博客</h2><ol>\n<li><p>首先建立一个空的文件夹blog</p>\n</li>\n<li><p>命令行进入blog文件夹</p>\n</li>\n<li><p>使用hexo生成博客</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init #生成博客</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用hexo server进行本地预览博客，预览完成后Ctrl+C退出预览</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s#本地预览博客</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用hexo new 新建文章</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo n &quot;文章名&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>先使用hexo clean 清除已经创建的页面，在使用hexo generated生成页面，建议生成先进行本地预览。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean #清除</span><br><span class=\"line\">$ hexo g #生成</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"如何把博客布置到github上\"><a href=\"#如何把博客布置到github上\" class=\"headerlink\" title=\"如何把博客布置到github上\"></a>如何把博客布置到github上</h2><ol>\n<li><p>首先在github自己的账号内新建仓库，注意仓库名就是你的域名。仓库名必须是 [账户名.github.io]</p>\n</li>\n<li><p>安装git并在git下设置用户名和邮箱</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name [username]</span><br><span class=\"line\">git config --global user.email [email]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在bolg文件夹下安装git部署插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置一下bolg文件夹的_config.yml，注意每个冒号后面有空格</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git </span><br><span class=\"line\">  repo: https:&#x2F;&#x2F;github.com&#x2F;sunyuxianggit&#x2F;sunyuxianggit.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>部署到github，中间需要输入github的账号密码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo doploy#部署到GitHub</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>常见错误：</p>\n<p>fatal: in unpopulated submodule ‘.deploy_git’</p>\n<p>这种情况可以先安装下相关的依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git –save</span><br><span class=\"line\">$ rm -rf .deploy_git#删掉</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d#重新生成和部署</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<h2 id=\"日常更新文章\"><a href=\"#日常更新文章\" class=\"headerlink\" title=\"日常更新文章\"></a>日常更新文章</h2><ol>\n<li>命令行进入blog文件夹使用<code>$ hexo new</code> 新建文章</li>\n<li>使用<code>$ hexo clean</code>清除老页面，然后在使用<code>$ hexo generated</code>生成页面</li>\n<li>使用<code>$ hexo server</code>本地预览没有问题后，使用 <code>$ hexo deploy</code>部署到Github</li>\n</ol>\n<h2 id=\"如何更换主题\"><a href=\"#如何更换主题\" class=\"headerlink\" title=\"如何更换主题\"></a>如何更换主题</h2><ol>\n<li><p>命令行进入blog</p>\n</li>\n<li><p>使用git clone 功能 clone喜欢的主题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https:&#x2F;&#x2F;github.com&#x2F;litten&#x2F;hexo-theme-yilia.git themes&#x2F;yilia</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class=\"line\">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class=\"line\">theme: yilia#这里</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<h2 id=\"多台设备同步管理\"><a href=\"#多台设备同步管理\" class=\"headerlink\" title=\"多台设备同步管理\"></a>多台设备同步管理</h2><ol>\n<li>原创建博客设备把源文件上传到GitHub，上传时注意检查所有.gitignore文件忽略情况和把node_modules文件夹删掉（因为内部文件名太长，上传的话git报错）.</li>\n<li>另一台电脑上将源代码clone下来之后，直接执行 <code>cnpm install</code>把node_modules安装回来.</li>\n<li>然后<code>hexo s</code>正常使用.</li>\n</ol>"},{"title":"Hexo博客如何插入图片","date":"2020-03-09T14:47:30.000Z","_content":"\n# Hexo博客如何插入图片\n\n\n\n1. 首先确认主页配置的_config.yml中：post_asset_folder:true.\n  ![图片测试0](图片测试/Snipaste_2020-03-09_22-50-07.png)\n\n2. 在你的hexo目录下执行：\n  `npm install hexo-asset-image --save`\n  若出现错误则先执行：\n  `npm install -g cnpm --registry=https://registry.npm.taobao.org`\n\n  <!-- more -->\n\n3. 等待一小段时间后，再运行hexo n \"xxxx\"来生成md博文时，/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹。\n\n4. 在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中。\n  ![图片测试1](图片测试/Snipaste_2020-03-09_22-50-25.png)\n\n5. 在xxxx.md中按照markdown的格式引入图片.\n\n引用：\n[系列4：总结别人hexo博客如何插图片方法（有自己实现的图片实例）](https://www.jianshu.com/p/a2786cdb06e1)\n\n\n","source":"_posts/图片测试.md","raw":"---\ntitle: Hexo博客如何插入图片\ndate: 2020-03-09 22:47:30\ntags: misc\n---\n\n# Hexo博客如何插入图片\n\n\n\n1. 首先确认主页配置的_config.yml中：post_asset_folder:true.\n  ![图片测试0](图片测试/Snipaste_2020-03-09_22-50-07.png)\n\n2. 在你的hexo目录下执行：\n  `npm install hexo-asset-image --save`\n  若出现错误则先执行：\n  `npm install -g cnpm --registry=https://registry.npm.taobao.org`\n\n  <!-- more -->\n\n3. 等待一小段时间后，再运行hexo n \"xxxx\"来生成md博文时，/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹。\n\n4. 在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中。\n  ![图片测试1](图片测试/Snipaste_2020-03-09_22-50-25.png)\n\n5. 在xxxx.md中按照markdown的格式引入图片.\n\n引用：\n[系列4：总结别人hexo博客如何插图片方法（有自己实现的图片实例）](https://www.jianshu.com/p/a2786cdb06e1)\n\n\n","slug":"图片测试","published":1,"updated":"2020-03-10T12:18:06.817Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7lv2jr1000jycp400pl89o8","content":"<h1 id=\"Hexo博客如何插入图片\"><a href=\"#Hexo博客如何插入图片\" class=\"headerlink\" title=\"Hexo博客如何插入图片\"></a>Hexo博客如何插入图片</h1><ol>\n<li><p>首先确认主页配置的_config.yml中：post_asset_folder:true.<br><img src=\"/2020/03/09/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/Snipaste_2020-03-09_22-50-07.png\" alt=\"图片测试0\"></p>\n</li>\n<li><p>在你的hexo目录下执行：<br><code>npm install hexo-asset-image --save</code><br>若出现错误则先执行：<br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>\n<a id=\"more\"></a>\n</li>\n<li><p>等待一小段时间后，再运行hexo n “xxxx”来生成md博文时，/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹。</p>\n</li>\n<li><p>在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中。<br><img src=\"/2020/03/09/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/Snipaste_2020-03-09_22-50-25.png\" alt=\"图片测试1\"></p>\n</li>\n<li><p>在xxxx.md中按照markdown的格式引入图片.</p>\n</li>\n</ol>\n<p>引用：<br><a href=\"https://www.jianshu.com/p/a2786cdb06e1\" target=\"_blank\" rel=\"noopener\">系列4：总结别人hexo博客如何插图片方法（有自己实现的图片实例）</a></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#2d6b96","paginator":"#6AA7D2","button_hover":"#3B8BC4","text_selection":"#6AA7D2","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#6AA7D2","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"文章":"/","归档":"/archives"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":true,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":null,"top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2013,"footer_custom_text":"Hi, welcome to my <a href=\"https://sunyuxianggit.github.io/\">blog</a>!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":true,"url":"https://github.com/sunyuxianggit","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"SunYuxiangのBlog","subtitle":"好记性,不如烂笔头.今天你要写点什么？","description":"","author":"Sun Yuxiang","language":"zh-Hans","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/sunyuxianggit/sunyuxianggit.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"category_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"<h1 id=\"Hexo博客如何插入图片\"><a href=\"#Hexo博客如何插入图片\" class=\"headerlink\" title=\"Hexo博客如何插入图片\"></a>Hexo博客如何插入图片</h1><ol>\n<li><p>首先确认主页配置的_config.yml中：post_asset_folder:true.<br><img src=\"/2020/03/09/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/Snipaste_2020-03-09_22-50-07.png\" alt=\"图片测试0\"></p>\n</li>\n<li><p>在你的hexo目录下执行：<br><code>npm install hexo-asset-image --save</code><br>若出现错误则先执行：<br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p></li></ol>","more":"\n<li><p>等待一小段时间后，再运行hexo n “xxxx”来生成md博文时，/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹。</p>\n</li>\n<li><p>在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中。<br><img src=\"/2020/03/09/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/Snipaste_2020-03-09_22-50-25.png\" alt=\"图片测试1\"></p>\n</li>\n<li><p>在xxxx.md中按照markdown的格式引入图片.</p>\n</li>\n\n<p>引用：<br><a href=\"https://www.jianshu.com/p/a2786cdb06e1\" target=\"_blank\" rel=\"noopener\">系列4：总结别人hexo博客如何插图片方法（有自己实现的图片实例）</a></p>"}],"PostAsset":[{"_id":"source/_posts/Maya卡顿优化/1558686550786.png","post":"ck7lv2jld0005ycp4bi4o2hpe","slug":"1558686550786.png","modified":1,"renderable":1},{"_id":"source/_posts/Maya卡顿优化/1558686723618.png","post":"ck7lv2jld0005ycp4bi4o2hpe","slug":"1558686723618.png","modified":1,"renderable":1},{"_id":"source/_posts/Maya卡顿优化/1558687101606.png","post":"ck7lv2jld0005ycp4bi4o2hpe","slug":"1558687101606.png","modified":1,"renderable":1},{"_id":"source/_posts/Maya卡顿优化/1558688555512.png","post":"ck7lv2jld0005ycp4bi4o2hpe","slug":"1558688555512.png","modified":1,"renderable":1},{"_id":"source/_posts/Effective-Python/2020-03-07-11-15-23.png","post":"ck7lv2jlc0004ycp492dae9st","slug":"2020-03-07-11-15-23.png","modified":1,"renderable":1},{"_id":"source/_posts/Effective-Python/2020-03-07-11-18-24.png","post":"ck7lv2jlc0004ycp492dae9st","slug":"2020-03-07-11-18-24.png","modified":1,"renderable":1},{"_id":"source/_posts/Effective-Python/2020-03-07-11-19-36.png","post":"ck7lv2jlc0004ycp492dae9st","slug":"2020-03-07-11-19-36.png","modified":1,"renderable":1},{"_id":"source/_posts/Effective-Python/2020-03-07-11-22-33.png","post":"ck7lv2jlc0004ycp492dae9st","slug":"2020-03-07-11-22-33.png","modified":1,"renderable":1},{"_id":"source/_posts/Effective-Python/2020-03-07-14-29-10.png","post":"ck7lv2jlc0004ycp492dae9st","slug":"2020-03-07-14-29-10.png","modified":1,"renderable":1},{"_id":"source/_posts/Effective-Python/2020-03-07-14-32-20.png","post":"ck7lv2jlc0004ycp492dae9st","slug":"2020-03-07-14-32-20.png","modified":1,"renderable":1},{"_id":"source/_posts/Effective-Python/2020-03-07-14-34-59.png","post":"ck7lv2jlc0004ycp492dae9st","slug":"2020-03-07-14-34-59.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-12-49-03.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-12-49-03.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-12-49-24.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-12-49-24.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-12-49-38.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-12-49-38.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-12-49-58.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-12-49-58.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-12-50-12.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-12-50-12.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-12-50-25.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-12-50-25.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-12-58-31.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-12-58-31.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-13-00-54.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-13-00-54.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-13-02-30.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-13-02-30.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-13-08-11.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-13-08-11.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-13-11-22.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-13-11-22.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-13-17-01.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-13-17-01.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-13-44-03.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-13-44-03.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-13-44-08.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-13-44-08.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-13-57-13.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-13-57-13.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-14-04-16.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-14-04-16.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-14-36-32.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-14-36-32.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-14-37-55.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-14-37-55.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-14-38-58.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-14-38-58.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-15-48-53.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-15-48-53.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-15-51-31.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-15-51-31.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-15-52-25.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-15-52-25.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-16-07-00.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-16-07-00.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-16-47-04.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-16-47-04.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-20-44-32.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-20-44-32.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-20-49-51.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-20-49-51.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-20-53-06.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-20-53-06.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-21-50-50.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-21-50-50.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-21-53-53.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-21-53-53.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-22-01-06.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-22-01-06.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-22-07-51.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-22-07-51.png","modified":1,"renderable":1},{"_id":"source/_posts/GameCourse101/2020-03-08-22-12-11.png","post":"ck7lv2jlh0008ycp4harsbaz2","slug":"2020-03-08-22-12-11.png","modified":1,"renderable":1},{"_id":"source/_posts/图片测试/Snipaste_2020-03-09_22-50-07.png","post":"ck7lv2jr1000jycp400pl89o8","slug":"Snipaste_2020-03-09_22-50-07.png","modified":1,"renderable":1},{"_id":"source/_posts/图片测试/Snipaste_2020-03-09_22-50-25.png","slug":"Snipaste_2020-03-09_22-50-25.png","post":"ck7lv2jr1000jycp400pl89o8","modified":1,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"ck7lv2jlc0004ycp492dae9st","tag_id":"ck7lv2jle0006ycp443tfcpaq","_id":"ck7lv2jlj000bycp4dips8d1y"},{"post_id":"ck7lv2jld0005ycp4bi4o2hpe","tag_id":"ck7lv2jli000aycp43gw55u7k","_id":"ck7lv2jlm000fycp4401yajka"},{"post_id":"ck7lv2jlh0008ycp4harsbaz2","tag_id":"ck7lv2jll000eycp4f7414kae","_id":"ck7lv2jln000hycp4424b3ej2"},{"post_id":"ck7lv2jlk000dycp4077vfp9c","tag_id":"ck7lv2jln000gycp4gqru1p3h","_id":"ck7lv2jln000iycp4h4rv4ej8"},{"post_id":"ck7lv2jr1000jycp400pl89o8","tag_id":"ck7lv2jr3000kycp4bjkd2555","_id":"ck7lv2jr4000lycp4g1dvgy03"}],"Tag":[{"name":"python","_id":"ck7lv2jle0006ycp443tfcpaq"},{"name":"Maya","_id":"ck7lv2jli000aycp43gw55u7k"},{"name":"computer graphics","_id":"ck7lv2jll000eycp4f7414kae"},{"name":"个人笔记","_id":"ck7lv2jln000gycp4gqru1p3h"},{"name":"misc","_id":"ck7lv2jr3000kycp4bjkd2555"}]}}
{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/melody/source/melody-favicon.ico","path":"melody-favicon.ico","modified":0,"renderable":1},{"_id":"themes/melody/source/js/hexo-theme-melody.js","path":"js/hexo-theme-melody.js","modified":0,"renderable":1},{"_id":"themes/melody/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/melody/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/melody/source/js/copy.js","path":"js/copy.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/fireworks.js","path":"js/fireworks.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/transition.js","path":"js/transition.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/scroll.js","path":"js/scroll.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/head.js","path":"js/head.js","modified":0,"renderable":1},{"_id":"themes/melody/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/melody/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/anime.min.js","path":"js/third-party/anime.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","path":"js/third-party/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/velocity.min.js","path":"js/third-party/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","path":"js/third-party/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/markdown.min.js","path":"js/third-party/reveal/markdown.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","path":"js/third-party/reveal/head.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/math.min.js","path":"js/third-party/reveal/math.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/notes.min.js","path":"js/third-party/reveal/notes.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/marked.min.js","path":"js/third-party/reveal/marked.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/zoom.min.js","path":"js/third-party/reveal/zoom.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/reveal.min.js","path":"js/third-party/reveal/reveal.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/jquery.min.js","path":"js/third-party/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/melody/source/js/third-party/reveal/highlight.min.js","path":"js/third-party/reveal/highlight.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/melody-favicon.ico","path":"melody-favicon.ico","modified":1,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/hexo-theme-melody.js","path":"js/hexo-theme-melody.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/css/404.styl","path":"css/404.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/copy.js","path":"js/copy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/fireworks.js","path":"js/fireworks.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/katex.js","path":"js/katex.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/head.js","path":"js/head.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/scroll.js","path":"js/scroll.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/transition.js","path":"js/transition.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/third-party/canvas-ribbon.js","path":"js/third-party/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/third-party/anime.min.js","path":"js/third-party/anime.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/third-party/jquery.fancybox.min.js","path":"js/third-party/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/third-party/velocity.min.js","path":"js/third-party/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/third-party/velocity.ui.min.js","path":"js/third-party/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/third-party/jquery.min.js","path":"js/third-party/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/third-party/reveal/math.min.js","path":"js/third-party/reveal/math.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/third-party/reveal/head.min.js","path":"js/third-party/reveal/head.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/third-party/reveal/notes.min.js","path":"js/third-party/reveal/notes.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/third-party/reveal/reveal.min.js","path":"js/third-party/reveal/reveal.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/third-party/reveal/zoom.min.js","path":"js/third-party/reveal/zoom.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/third-party/reveal/markdown.min.js","path":"js/third-party/reveal/markdown.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/third-party/reveal/marked.min.js","path":"js/third-party/reveal/marked.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-melody/source/js/third-party/reveal/highlight.min.js","path":"js/third-party/reveal/highlight.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/melody/.eslintignore","hash":"719a633358c168ec04b544a5a306fc454471f72f","modified":1583837381158},{"_id":"themes/melody/.eslintrc","hash":"2c75ddb670b21591023b2c4f52ecfb02578b5eae","modified":1583837381159},{"_id":"themes/melody/.travis.demo.yml","hash":"977db46c56f95e0b475326ee7499890aa16bd971","modified":1583837381160},{"_id":"themes/melody/FAQ.md","hash":"2e4871193be2bbade191c1064216072cbe61ab72","modified":1583837381161},{"_id":"themes/melody/_config.yml","hash":"786c87007d38612b69e5e6c9ab64c456ca811f7e","modified":1583837381164},{"_id":"themes/melody/package.json","hash":"0dc3179de85b18cbb351c03a3949b262030250f3","modified":1583837381226},{"_id":"themes/melody/LICENSE","hash":"e7e7b7677bb19563a9013e936486bdefeb761d07","modified":1583837381162},{"_id":"themes/melody/stylus_format.json","hash":"53008fbf66531953489ab0f2ce166576b7ba1ab7","modified":1583837381329},{"_id":"themes/melody/scripts/hexo-plugins.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1583837381229},{"_id":"source/categories/index.md","hash":"ba6e88e9d378633c1503e7603fe8c78138a2a3b7","modified":1583837381151},{"_id":"themes/melody/languages/default.yml","hash":"4a60ece6d7a3d23ac2966115835fdcfa7bd3e9e7","modified":1583837381166},{"_id":"themes/melody/languages/zh-Hans.yml","hash":"efa9712848d8316b38270f9674d7392a640d6af1","modified":1583837381168},{"_id":"themes/melody/languages/en.yml","hash":"4a60ece6d7a3d23ac2966115835fdcfa7bd3e9e7","modified":1583837381167},{"_id":"themes/melody/README.md","hash":"69b44680fc2cf884b29d44e279efacf5a3f5f386","modified":1583837381163},{"_id":"source/tags/index.md","hash":"cbb0d61c61ee4009e30ed4b070a098b5dd3f7332","modified":1583837381154},{"_id":"source/_data/melody.yml","hash":"10ca0fd5c26df5cc4e22eaa76bac6f12d1797be8","modified":1583837381117},{"_id":"source/_posts/Blender脚本学习笔记.md","hash":"3d2de5bddee9a270858142271530eed44824ed5e","modified":1583893709953},{"_id":"source/_posts/Effective-Python.md","hash":"772400a3b1293138ca2f87f102fe79e47e018f70","modified":1583893537725},{"_id":"source/_posts/GameCourse101.md","hash":"57a2e53a5758d889fc42bdb9a5e6f84141abd76e","modified":1583893702223},{"_id":"source/_posts/Git-学习笔记.md","hash":"dfb9c6617dc5d0133528c4104ec9bc06e28bef95","modified":1584173734438},{"_id":"source/_posts/Houdini_Entagma_学习笔记.md","hash":"210564f7a19f42f73d1e9e8ff6d256e44ebc972f","modified":1583897464836},{"_id":"source/_posts/Python文件打包成可执行文件.md","hash":"0c9b294231baec1522284b744b86ab8fca2e0b6e","modified":1584107522560},{"_id":"source/_posts/Python 进程和线程学习笔记.md","hash":"ad496c284ea5486a8e337b6b1bd074940ee6d798","modified":1583893472260},{"_id":"source/_posts/Maya卡顿优化.md","hash":"c270fe38e23074fad21c31ea63de08c741a03d26","modified":1583893486913},{"_id":"source/_posts/SubstancePainter_plugin学习笔记.MD","hash":"9395885caeaaf3652a855036b820e35a527d182a","modified":1584106624993},{"_id":"source/_posts/Top 10 ways to make Maya go FASTER.md","hash":"234ac8f6920de58a422ebce7e93f6c3e77481899","modified":1584173718770},{"_id":"themes/melody/layout/archive.pug","hash":"f3198ed4d59ca9d0423060a428106a857247a8f8","modified":1583837381171},{"_id":"themes/melody/layout/category.pug","hash":"27fe85787ee1e4bba75a6eadbf86f7ffc58cb66a","modified":1583837381172},{"_id":"themes/melody/layout/gallery.pug","hash":"1470a86b329eb5c60d6fa6a7bafa25ddf1255f97","modified":1583837381173},{"_id":"themes/melody/layout/index.pug","hash":"d15a36b5c8f1bec367888edb358e70b47eb15ea9","modified":1583837381221},{"_id":"themes/melody/layout/page.pug","hash":"bbcd45cc14b69e260cf7bf851d1926dedc5cd3be","modified":1583837381222},{"_id":"themes/melody/layout/post.pug","hash":"e0d840ee90bf773e1dcc14e884c809822baefb09","modified":1583837381223},{"_id":"themes/melody/layout/slides.pug","hash":"1e84a92d5b854dd233e0b511d59c1cd7c8d647a1","modified":1583837381224},{"_id":"source/_posts/使用hexo创建个人blog网页的笔记.md","hash":"b436f51f4f6f795f6cf8e3235a9e1ce503ac87d8","modified":1583893587333},{"_id":"themes/melody/layout/tag.pug","hash":"6b5c5c08e9a6773a4fce8583fdf614a784beb045","modified":1583837381225},{"_id":"themes/melody/scripts/gallery-tag.js","hash":"b18e4a809de37da54ea914452ce4a24785fa7621","modified":1583837381229},{"_id":"themes/melody/scripts/replace-config.js","hash":"9d5378898a068e77b5e601c950b631144bd743cf","modified":1583837381231},{"_id":"source/_posts/图片测试.md","hash":"d019bf3e5f60b8236c926a902889373e12ee13a0","modified":1583893581966},{"_id":"themes/melody/source/melody-favicon.ico","hash":"1896318abb671b863a88719e6a73aaebc3f6e3f9","modified":1583837381328},{"_id":"themes/melody/source/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1583837381275},{"_id":"source/_posts/GameCourse101/2020-03-08-12-49-03.png","hash":"ccd429e2167313327adc2ef1fbce219ee007a4b1","modified":1583720311889},{"_id":"source/_posts/GameCourse101/2020-03-08-12-50-12.png","hash":"cfedf3dab349a3b4b46fc5d3f416d630ad8e804a","modified":1583720311901},{"_id":"source/_posts/GameCourse101/2020-03-08-12-58-31.png","hash":"f075e4a17c3c4803a5d5aaf59db482d380927843","modified":1583720311911},{"_id":"source/_posts/GameCourse101/2020-03-08-13-02-30.png","hash":"68763a0d3a72ffe797838ff684f6f154aa8fbba0","modified":1583720311914},{"_id":"source/_posts/GameCourse101/2020-03-08-14-04-16.png","hash":"5e949a1428569b20155fc194add0a9edbd97360c","modified":1583720311951},{"_id":"source/_posts/GameCourse101/2020-03-08-14-37-55.png","hash":"6f20088f8bac49f73849a7796fcc35529eb3e8e3","modified":1583720311954},{"_id":"source/_posts/GameCourse101/2020-03-08-14-38-58.png","hash":"a2b59798c741cdd570534a1ddc4b2ded61aa8b7a","modified":1583720311956},{"_id":"source/_posts/GameCourse101/2020-03-08-15-48-53.png","hash":"fdceff9350674c2a7169eb153d3d6abcebab754c","modified":1583720311957},{"_id":"source/_posts/GameCourse101/2020-03-08-20-44-32.png","hash":"c3cb7f2fec6264595e5aa0aba5179088b3e55846","modified":1583720311964},{"_id":"source/_posts/GameCourse101/2020-03-08-16-07-00.png","hash":"e3d9f1455cb3f33fc104251c810c83a1fcb9e29b","modified":1583720311961},{"_id":"source/_posts/Effective-Python/2020-03-07-11-15-23.png","hash":"ef6c037a498ce92560ca0ff1993e6ebc63ca5ebc","modified":1583837381123},{"_id":"source/_posts/Effective-Python/2020-03-07-11-18-24.png","hash":"26ae41def9d23f7601e44e3f36136f8f00d679cc","modified":1583837381124},{"_id":"source/_posts/GameCourse101/2020-03-08-22-07-51.png","hash":"c6dcdcc8dcc6957d4a6dad161b0fc3532c8c0a98","modified":1583720311973},{"_id":"source/_posts/Effective-Python/2020-03-07-11-19-36.png","hash":"7dd89d3e5bb3075e66dd0ae56cd55b0590e8206e","modified":1583837381125},{"_id":"source/_posts/Effective-Python/2020-03-07-11-22-33.png","hash":"153bc4e2a09a7ffda504c0427e7744cde6e85de0","modified":1583837381126},{"_id":"source/_posts/Effective-Python/2020-03-07-14-32-20.png","hash":"ce270b55b9b7a01d26ff7e9f0f82915cb694a62b","modified":1583837381129},{"_id":"source/_posts/Effective-Python/2020-03-07-14-34-59.png","hash":"6768eb6d31c1ab8dc0600268cd5e0f6703033944","modified":1583837381130},{"_id":"source/_posts/Houdini_Entagma_学习笔记/2020-02-26-21-19-46.png","hash":"1f9e54e6e02ba5c0185732c9dbdd72baed7bbaa3","modified":1582723186937},{"_id":"source/_posts/Houdini_Entagma_学习笔记/2020-03-04-16-03-43.png","hash":"4756b27af8b3c32d21b3a9b095ab6222b660f441","modified":1583309023825},{"_id":"source/_posts/Maya卡顿优化/1558686550786.png","hash":"a6db7e5d9831cd9d1464bc7e64ebd7e743cdba2c","modified":1583837381134},{"_id":"source/_posts/Maya卡顿优化/1558687101606.png","hash":"da6b18d10a271a78015fbdbcc56112763df3b1ce","modified":1583837381136},{"_id":"source/_posts/Maya卡顿优化/1558688555512.png","hash":"188099e0ddc4c16041575886bfead22c0400908a","modified":1583837381137},{"_id":"source/_posts/Maya卡顿优化/1558686723618.png","hash":"9de0bf932b050ec7d413e6dc6532a137dbcab2eb","modified":1583837381135},{"_id":"source/_posts/SubstancePainter_plugin学习笔记/2020-03-06-10-43-52.png","hash":"90f33a2e9e85ddb9fa2919d6d60d23f65ddeeb20","modified":1583462633375},{"_id":"source/_posts/SubstancePainter_plugin学习笔记/2020-03-06-10-45-09.png","hash":"00448fed080c21d8b2a2a684febcc51ea0ec3510","modified":1583462710417},{"_id":"source/_posts/SubstancePainter_plugin学习笔记/2020-03-06-10-56-41.png","hash":"cfae91b40f4d8b042af929841277578759696f57","modified":1583463402147},{"_id":"source/_posts/SubstancePainter_plugin学习笔记/2020-03-13-21-25-23.png","hash":"d0b38edddbfc5028eb13db52c1f31b21eaa1b54e","modified":1584105924536},{"_id":"themes/melody/layout/includes/additional-js.pug","hash":"7137f872dde2e44616098f92e1af6bc291e70bbe","modified":1583837381176},{"_id":"themes/melody/layout/includes/footer.pug","hash":"c5968d30a668c3d1b8e658d784b661799d3ba48a","modified":1583837381188},{"_id":"themes/melody/layout/includes/head.pug","hash":"4cf465d5ac4f335a6bc57cec29fddf9ac0943741","modified":1583837381193},{"_id":"themes/melody/layout/includes/config.pug","hash":"42e523fef2e9f285d989d494f0a6fce485921719","modified":1583837381184},{"_id":"themes/melody/layout/includes/header.pug","hash":"664705214dc167e7a323fea6e7874790d870fb3c","modified":1583837381194},{"_id":"themes/melody/layout/includes/layout.pug","hash":"3b4dc121038cbc6509621d9db4e7eafffb850fdc","modified":1583837381195},{"_id":"themes/melody/layout/includes/nav.pug","hash":"90ad9fdeb551f524eac6f25090346a884d13d2dd","modified":1583837381200},{"_id":"themes/melody/layout/includes/pagination.pug","hash":"a28c30fca4780a2afd5375f98833637b6b6e941a","modified":1583837381201},{"_id":"themes/melody/layout/includes/recent-posts.pug","hash":"f37dc3576cc45ad3da097b58f420b5b523d8a9a5","modified":1583837381202},{"_id":"themes/melody/layout/includes/sidebar.pug","hash":"4a531e4f09417e2172ebda39c7d7c856b3979ced","modified":1583837381212},{"_id":"themes/melody/source/css/index.styl","hash":"c2823ad6013df237993eea5cf190c313270da4db","modified":1583837381262},{"_id":"themes/melody/source/css/var.styl","hash":"7a1f4099b71741e3a156003234ef9a9a48b66abe","modified":1583837381263},{"_id":"themes/melody/source/js/copy.js","hash":"8d21285129bf9638d18bacaca21945e24ec5b872","modified":1583837381271},{"_id":"themes/melody/source/js/fireworks.js","hash":"f4f902392525133028f501bef2afa6b1045b5b9c","modified":1583837381273},{"_id":"themes/melody/source/js/fancybox.js","hash":"59f9356b60732438a40a8ab7af17a70171a60b00","modified":1583837381272},{"_id":"themes/melody/source/js/transition.js","hash":"254820390dd5dfe9ee9097f3ef58e8c17b4bb280","modified":1583837381325},{"_id":"themes/melody/source/js/scroll.js","hash":"b45eb54e5c6ba67cea5bee365885735ca4e4f4f9","modified":1583837381277},{"_id":"themes/melody/source/js/sidebar.js","hash":"6906dcca3a6b9bd46489ca378bc1e74e454168ac","modified":1583837381283},{"_id":"themes/melody/source/js/head.js","hash":"1f0693d5d985b4bc5de16c79c5c9d4601260d617","modified":1583837381274},{"_id":"themes/melody/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1583837381266},{"_id":"themes/melody/source/js/utils.js","hash":"5ff6609b1d674f7879f30e491bdd3c69139704da","modified":1583837381327},{"_id":"source/_posts/GameCourse101/2020-03-08-12-49-24.png","hash":"9d51bb8272c69e238b0a0f577da4544fbaed4897","modified":1583720311890},{"_id":"source/_posts/GameCourse101/2020-03-08-12-49-38.png","hash":"11285d3d580332e3d574256be0399dc1124408ae","modified":1583720311892},{"_id":"source/_posts/GameCourse101/2020-03-08-12-49-58.png","hash":"c05d82616188d360c8c80c1295fca0d0faa3c07c","modified":1583720311893},{"_id":"source/_posts/GameCourse101/2020-03-08-12-50-25.png","hash":"3e7c651a70a63cc4c1c6af1d51bb298a3ee0b829","modified":1583720311910},{"_id":"source/_posts/GameCourse101/2020-03-08-13-00-54.png","hash":"0bfd4ccf3dd6f9253bc7e5d3900579ebb3daf781","modified":1583720311912},{"_id":"source/_posts/GameCourse101/2020-03-08-13-08-11.png","hash":"40317519572c5b471ce8669d3e0e9e9e10c816d4","modified":1583720311915},{"_id":"source/_posts/GameCourse101/2020-03-08-13-11-22.png","hash":"146757565455e60dffe126a1132710c66cbfb8b2","modified":1583720311930},{"_id":"source/_posts/GameCourse101/2020-03-08-13-57-13.png","hash":"8431774240c60e8bb1d7963bc83abc9154652c69","modified":1583720311950},{"_id":"source/_posts/GameCourse101/2020-03-08-13-44-03.png","hash":"a18c72c66057a21c12a71815b9ddd3726ca3aeb8","modified":1583720311947},{"_id":"source/_posts/GameCourse101/2020-03-08-13-17-01.png","hash":"b6cc1c36560eb6d3ce611430e1a4a96fb138fcbe","modified":1583720311945},{"_id":"source/_posts/GameCourse101/2020-03-08-13-44-08.png","hash":"a18c72c66057a21c12a71815b9ddd3726ca3aeb8","modified":1583720311948},{"_id":"source/_posts/GameCourse101/2020-03-08-14-36-32.png","hash":"0b10fb2ad8865f34c8ac1f0d40cdab8eb28bd21b","modified":1583720311953},{"_id":"source/_posts/GameCourse101/2020-03-08-15-51-31.png","hash":"d4e73387d1e1710f4a96e80680c1f13958562292","modified":1583720311959},{"_id":"source/_posts/GameCourse101/2020-03-08-15-52-25.png","hash":"6c64d809d6c435c1c369df7e700a095e72510334","modified":1583720311960},{"_id":"source/_posts/GameCourse101/2020-03-08-16-47-04.png","hash":"fef0d7149eb7fbef5d08222179759a686887c783","modified":1583720311963},{"_id":"source/_posts/GameCourse101/2020-03-08-20-49-51.png","hash":"b13198cba6db6ce9d2643cd26e6ebcf3ab491a12","modified":1583720311965},{"_id":"source/_posts/GameCourse101/2020-03-08-21-53-53.png","hash":"5f50fe82d1a6b86fcfa4f6ad7684b091ae1ddffe","modified":1583720311970},{"_id":"source/_posts/GameCourse101/2020-03-08-20-53-06.png","hash":"02f50fb9bab2ef406f04f1d010f130bdd67f3f08","modified":1583720311967},{"_id":"source/_posts/GameCourse101/2020-03-08-21-50-50.png","hash":"227d2b851610f0b91c2a69aee4f0f819096d0e89","modified":1583720311968},{"_id":"source/_posts/GameCourse101/2020-03-08-22-01-06.png","hash":"9b22c9af831d694f768d74efa8dd7d716ea3d6a0","modified":1583720311971},{"_id":"source/_posts/GameCourse101/2020-03-08-22-12-11.png","hash":"2d23720b22e1e7410b68151cad94fb57ad59633f","modified":1583720311974},{"_id":"source/_posts/Effective-Python/2020-03-07-14-29-10.png","hash":"8694daf79f477e9156d598d3eb96247fe3e66791","modified":1583837381127},{"_id":"source/_posts/Houdini_Entagma_学习笔记/![](2020-03-04-13-57-42.png).png","hash":"34425cc976510aef5ec2ed2152d3033dd7104599","modified":1583301731352},{"_id":"source/_posts/Houdini_Entagma_学习笔记/2020-02-26-17-23-21.png","hash":"c363d7da4b98e270f5675b351546911de3c8fd14","modified":1582709002206},{"_id":"source/_posts/Houdini_Entagma_学习笔记/2020-02-27-13-57-56.png","hash":"c1d7069f24996c1c38c061561cae161d2c75ff26","modified":1582783077662},{"_id":"source/_posts/Houdini_Entagma_学习笔记/2020-02-27-14-37-42.png","hash":"c14adea1c95b8d2467f2929e9a95f4d05c18dd81","modified":1582785462987},{"_id":"source/_posts/Houdini_Entagma_学习笔记/2020-03-03-19-00-29.png","hash":"36e5118ef15c7a09ad025397167eb184a0b5a83c","modified":1583233230683},{"_id":"source/_posts/Houdini_Entagma_学习笔记/2020-03-04-14-02-15.png","hash":"34425cc976510aef5ec2ed2152d3033dd7104599","modified":1583301736512},{"_id":"source/_posts/Houdini_Entagma_学习笔记/learn_houdini (3).gif","hash":"e848e0d27ac966133a20b0ddb64a44ef96479587","modified":1582094995547},{"_id":"source/_posts/SubstancePainter_plugin学习笔记/2020-03-06-10-47-53.png","hash":"1ae8cb1529eb623ea46b7c688c846df834dd09d8","modified":1583462874046},{"_id":"source/_posts/图片测试/Snipaste_2020-03-09_22-50-07.png","hash":"8be5e8f90673db830c8910fc15071972dba7964b","modified":1583837381145},{"_id":"themes/melody/layout/includes/gallery/script.pug","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1583837381192},{"_id":"source/_posts/Houdini_Entagma_学习笔记/2020-02-18-20-23-42.png","hash":"92f2dfd9cfe74aa59712f8b3d2d7ae777f1e91a3","modified":1582028623509},{"_id":"source/_posts/Houdini_Entagma_学习笔记/2020-03-03-19-30-55.png","hash":"ca0d34dbf4fad20d0414b9ced8c5b0e48baf2258","modified":1583235056441},{"_id":"themes/melody/layout/includes/comments/disqus.pug","hash":"0d753ace1190deebd9173279ab5369e4a30c53a8","modified":1583837381179},{"_id":"themes/melody/layout/includes/comments/gitalk.pug","hash":"590bc5af43bc55182157dbac65e7cd8bf39f410d","modified":1583837381180},{"_id":"themes/melody/layout/includes/comments/index.pug","hash":"b8c1344a2760a46774f1894967c879d72802556d","modified":1583837381182},{"_id":"themes/melody/layout/includes/comments/laibili.pug","hash":"1ffb80147fd443144ca6cf0230515f229eba6745","modified":1583837381182},{"_id":"themes/melody/layout/includes/comments/valine.pug","hash":"81e10998d5a2d28857f1c32e2d8b1ba1d84ce0f8","modified":1583837381183},{"_id":"themes/melody/layout/includes/comments/gitment.pug","hash":"97f524092775c9b7e618c691df40b4bce9e121ac","modified":1583837381181},{"_id":"themes/melody/layout/includes/count/busuanzi.pug","hash":"760be9ea92e5eb6959f37b76b9c13fb627893b0a","modified":1583837381187},{"_id":"themes/melody/layout/includes/gallery/layout.pug","hash":"8ff96c4f9afb416c5fc586c9585ae51cb6129529","modified":1583837381191},{"_id":"themes/melody/layout/includes/mixins/article-sort.pug","hash":"05c080cbd236b7d94765350cc699b92736ca4609","modified":1583837381198},{"_id":"themes/melody/layout/includes/mixins/slide.pug","hash":"cde884e97dd980bf05910934ce1d52ef3bd5df9c","modified":1583837381199},{"_id":"themes/melody/layout/includes/share/add-this.pug","hash":"055d41a0cc135b8fb02da8faa1df5faacb8fc13d","modified":1583837381210},{"_id":"themes/melody/layout/includes/share/index.pug","hash":"49cf38dc1f25f5646bf28568b08b4e35d5822648","modified":1583837381211},{"_id":"themes/melody/layout/includes/share/share-js.pug","hash":"7d8660614f5b80e9078c184456f4742a520c5d56","modified":1583837381212},{"_id":"themes/melody/layout/includes/search/algolia.pug","hash":"3d2b2de0e199ab1fb151f41f2bbaac909f3d3d12","modified":1583837381205},{"_id":"themes/melody/layout/includes/search/index.pug","hash":"66b4f4e8119e987cd3f9907298689a1408a05859","modified":1583837381206},{"_id":"themes/melody/layout/includes/search/local-search.pug","hash":"205aff585f7763b61b8597c6121e6d8c5f9329a4","modified":1583837381207},{"_id":"themes/melody/layout/includes/third-party/katex.pug","hash":"d5ed449e505740620c8f8a110f124bec8cb46be0","modified":1583837381220},{"_id":"themes/melody/layout/includes/slide/script.pug","hash":"245823713e729136779af3f0cbb33bf1de5a5103","modified":1583837381217},{"_id":"themes/melody/layout/includes/third-party/mathjax.pug","hash":"0afc0e488ef64f5cb27b9fc90b13f0f9e9f958a5","modified":1583837381221},{"_id":"themes/melody/source/css/_layout/comments.styl","hash":"3b32040e894978ec9be6569f44fd5557734f2340","modified":1583837381246},{"_id":"themes/melody/source/css/_layout/pagination.styl","hash":"ad5dc99b438588f92115592ed2d65a47c980720d","modified":1583837381250},{"_id":"themes/melody/source/css/_layout/sidebar.styl","hash":"29b02d3c319d84ab98dddec449f4bc83fbfdad36","modified":1583837381252},{"_id":"themes/melody/source/css/_layout/footer.styl","hash":"367a6d225d2a70aa45bcc48b38989c1efdbebfcc","modified":1583837381247},{"_id":"themes/melody/source/css/_layout/head.styl","hash":"9c14f6d686a00507212e15a0aabd8b9af5634e1d","modified":1583837381248},{"_id":"themes/melody/source/css/_layout/page.styl","hash":"c6da797bf07b5dbf2a94f48237e3e0dc7e976f37","modified":1583837381249},{"_id":"themes/melody/source/css/_highlight/diff.styl","hash":"bb83b379954dc2e7f5a9915e5ed50da7223e3efa","modified":1583837381241},{"_id":"themes/melody/source/css/_highlight/highlight.styl","hash":"26b397cd1528680095407c67f9c8ae069ed4eafa","modified":1583837381242},{"_id":"themes/melody/source/css/_highlight/theme.styl","hash":"89af8e4eb6adacee6693b3df46d87a0b1b2b0d2d","modified":1583837381243},{"_id":"themes/melody/source/css/_third-party/jquery.fancybox.min.css","hash":"f9c94ec04062a1bfe1ef894c49e6ec33fa121778","modified":1583837381260},{"_id":"themes/melody/source/css/_global/index.styl","hash":"a6ad6d2675e975883855a1fa3a634c7ba06d4685","modified":1583837381238},{"_id":"themes/melody/source/css/_third-party/normalize.min.css","hash":"e12eef6d6811c132f4f2fcf6c936be384191bcaf","modified":1583837381261},{"_id":"themes/melody/source/css/_search/index.styl","hash":"b16e4c15ad5844096f427eb3bdb49c5bb0bbcaf7","modified":1583837381256},{"_id":"themes/melody/source/css/_search/algolia.styl","hash":"0168c78d28fbc8996ad9e1764457a6526404515b","modified":1583837381255},{"_id":"themes/melody/source/css/_search/local-search.styl","hash":"adb2663fcfee1c84461231472f228aa82c6478bd","modified":1583837381257},{"_id":"themes/melody/source/js/search/algolia.js","hash":"8a6673cb1616b50a5ac8b2dc20fb3475bc32039f","modified":1583837381281},{"_id":"themes/melody/source/js/search/local-search.js","hash":"a642a93fb52ebc87f05e5d3cee38618013fda539","modified":1583837381282},{"_id":"themes/melody/source/js/third-party/anime.min.js","hash":"7c9416c1b444773b2d82e797131d6047364645a3","modified":1583837381287},{"_id":"themes/melody/source/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1583837381324},{"_id":"themes/melody/source/js/third-party/velocity.min.js","hash":"15a9dc404e02f2cd9b46cc71293b65671976567b","modified":1583837381323},{"_id":"themes/melody/source/img/avatar.png","hash":"0e9d365b378c91a77d9d700276113a10936e0d8e","modified":1583837381267},{"_id":"themes/melody/layout/includes/slide/layout.pug","hash":"ed853a81c74e8f21e5acca0cc4738bc4f204b751","modified":1583837381216},{"_id":"themes/melody/source/css/_layout/post.styl","hash":"5d6d635ca50c762a2ab2cdf8c82b2790b34bf275","modified":1583837381251},{"_id":"themes/melody/source/js/third-party/jquery.fancybox.min.js","hash":"0acabccbb20d722141fa15b37d535807092b2c88","modified":1583837381289},{"_id":"themes/melody/source/js/third-party/reveal/markdown.min.js","hash":"859d70cd7c459819b90fe27afb940d16ecff6614","modified":1583837381314},{"_id":"themes/melody/source/js/third-party/reveal/head.min.js","hash":"e34a3faf6e51034de612d15700e059fe82dba310","modified":1583837381301},{"_id":"themes/melody/source/js/third-party/reveal/math.min.js","hash":"779c98dbd83a528f27ea4b9f2d420c957c0939ba","modified":1583837381317},{"_id":"themes/melody/source/js/third-party/reveal/notes.min.js","hash":"4bb2925b111467791fdef3c4e4b41993d59ce90f","modified":1583837381318},{"_id":"themes/melody/source/js/third-party/reveal/marked.min.js","hash":"abd5391551b7b4e0cc0511c4b5c5ccfe66100f1b","modified":1583837381315},{"_id":"themes/melody/source/js/third-party/reveal/zoom.min.js","hash":"aca47bf417d451c4d364c6eb287a230e4b462b17","modified":1583837381321},{"_id":"themes/melody/source/js/third-party/reveal/reveal.min.js","hash":"d8377a86451712488dea87caf5acbf8e97aa991f","modified":1583837381320},{"_id":"themes/melody/source/js/third-party/jquery.min.js","hash":"67bdacbd077ee59f411109fd119ee9f58db15a5f","modified":1583837381291},{"_id":"source/_posts/Houdini_Entagma_学习笔记/2020-03-03-19-19-50.png","hash":"c79def23138b35b04f31bf92038482e0ff469ebd","modified":1583234391613},{"_id":"source/_posts/Houdini_Entagma_学习笔记/2020-03-03-19-31-43.png","hash":"c6f5ad8f7513998a6bb0b434823d96eea81c6793","modified":1583235103996},{"_id":"source/_posts/图片测试/Snipaste_2020-03-09_22-50-25.png","hash":"623322f58544128fd42966ddae26ecea0f0cc25b","modified":1583837381149},{"_id":"source/_posts/Houdini_Entagma_学习笔记/entagma_attributes.png","hash":"63bf6e0d5acc2e15dc27de0547dc1b20ae4587ab","modified":1583230809180},{"_id":"source/_posts/Houdini_Entagma_学习笔记/entagma_martrix.png","hash":"5750112c510dad622d627dc7a7aa57cb256c1208","modified":1583216739273},{"_id":"themes/melody/source/js/third-party/reveal/highlight.min.js","hash":"10dd530e712a67f25cf27845213c0f28d2fe9e4d","modified":1583837381312},{"_id":"source/_posts/Houdini_Entagma_学习笔记/learn_houdini (1).gif","hash":"69850989101f0cacbe21fff393b9a01cb46c7b4d","modified":1582095152699},{"_id":"source/_posts/Houdini_Entagma_学习笔记/learn_houdini (4).gif","hash":"14d71e460a674505c311cd6e58b39c71d18d7589","modified":1582798807270},{"_id":"source/_posts/Houdini_Entagma_学习笔记/learn_houdini (2).gif","hash":"53942571e06946edd99c085e84606fa0ebb2abb5","modified":1582099442066},{"_id":"public/atom.xml","hash":"ad330f0f104c5f8d7fd44bbb7f4bba21614590d4","modified":1584173744758},{"_id":"public/sitemap.xml","hash":"b8f39455422710c80d82fc89675398a7c1f3ca94","modified":1584173744758},{"_id":"public/categories/index.html","hash":"3b6ba8670f7ad04008406d790b0725c27133a52b","modified":1584174395042},{"_id":"public/tags/index.html","hash":"575decd4b159a5026fa524ca0740a14ab087ac65","modified":1584174395042},{"_id":"public/2020/03/10/Blender脚本学习笔记/index.html","hash":"7d00f8f577d826466744165a33a919122e7a4e29","modified":1584174395042},{"_id":"public/2020/03/09/Maya卡顿优化/index.html","hash":"50b7086598a4593420324a04ff194c67a8e3b806","modified":1584174395042},{"_id":"public/2020/03/09/图片测试/index.html","hash":"c3b7d3fa8f928e5092f5f61817d2e84b2138f027","modified":1584174395042},{"_id":"public/2019/12/03/Git-学习笔记/index.html","hash":"bd1ddea636692316b3108251016567bab5bfab03","modified":1584174395042},{"_id":"public/2019/12/01/Python文件打包成可执行文件/index.html","hash":"505d1e811e6d114fd459c5d63309afd6ae4e8394","modified":1584174395042},{"_id":"public/2019/12/01/Top 10 ways to make Maya go FASTER/index.html","hash":"643dcad6a59926dc6d412c322f4fb15f289a0bea","modified":1584174395042},{"_id":"public/2019/12/01/使用hexo创建个人blog网页的笔记/index.html","hash":"6e9d0ce6de05f2325207ca38631bd9b21661c2c5","modified":1584174395042},{"_id":"public/tags/blender/index.html","hash":"41b6ed2a64a713121045bd5f7e58b17ddaf962b9","modified":1584174395042},{"_id":"public/tags/python/index.html","hash":"fbb95a37e347d9a79f3b4f476c7e8312ce9d7571","modified":1584174395042},{"_id":"public/tags/computer-graphics/index.html","hash":"8bdbf7c4ce146f5a21c43512b4755b01e48b436e","modified":1584174395042},{"_id":"public/tags/Houdini/index.html","hash":"e23b2a2c1f4190189bc61ae3e53496400b115bd7","modified":1584174395042},{"_id":"public/tags/Maya/index.html","hash":"313ce90953d8162aae5f61136e7d6994239b136c","modified":1584174395042},{"_id":"public/tags/maya/index.html","hash":"e984def69a1235e9cb0fdd49f41e9d250f837d2c","modified":1584174395042},{"_id":"public/tags/hexo/index.html","hash":"c44f574551478a57ecce1dbb586439626c269ad5","modified":1584174395042},{"_id":"public/page/2/index.html","hash":"54b7010611b6db7215a05f1fa9d2079a0ac3d6c7","modified":1584174395042},{"_id":"public/archives/index.html","hash":"59f6c61756f607b8e6e83fb2c1c8b370bbc24bb3","modified":1584174395042},{"_id":"public/archives/page/2/index.html","hash":"999d5f25eb3bf910f93fcff5c62aaca7f04cbd8c","modified":1584174395042},{"_id":"public/archives/2019/index.html","hash":"332ff40404e078cc9a1ec59d89be2d4c9e004b8d","modified":1584174395042},{"_id":"public/archives/2019/12/index.html","hash":"45cce80694fabc59b84dc8a74d3ec3ff8ae11ff5","modified":1584174395042},{"_id":"public/archives/2020/index.html","hash":"d329e1bc0188285730e02556f9146fb0ccf89f69","modified":1584174395042},{"_id":"public/archives/2020/03/index.html","hash":"33ac0b53cbf522afae25ba80a2cccea5fca555cc","modified":1584174395042},{"_id":"public/2020/03/10/Effective-Python/index.html","hash":"822d9a5e88e5a2e6aec8810eaebd396cd06c3ac3","modified":1584174395042},{"_id":"public/2020/03/10/GameCourse101/index.html","hash":"0c7bac180af96006475739a939e5da73ccf5ef77","modified":1584174395042},{"_id":"public/2019/12/01/Houdini_Entagma_学习笔记/index.html","hash":"3bb1fabb3bffa8f639cfd481a51a6d3e79a9eca7","modified":1584174395042},{"_id":"public/2019/12/01/Python 进程和线程学习笔记/index.html","hash":"917988b60255fdad8832ff8b9b3656c6eed2431d","modified":1584174395042},{"_id":"public/index.html","hash":"b3d77b35ab49a841b54f7362f6964a9a62211f6e","modified":1584174395042},{"_id":"public/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1584173006044},{"_id":"public/2020/03/10/Effective-Python/2020-03-07-11-19-36.png","hash":"7dd89d3e5bb3075e66dd0ae56cd55b0590e8206e","modified":1584173006044},{"_id":"public/2020/03/10/Effective-Python/2020-03-07-11-15-23.png","hash":"ef6c037a498ce92560ca0ff1993e6ebc63ca5ebc","modified":1584173006044},{"_id":"public/2020/03/10/Effective-Python/2020-03-07-11-18-24.png","hash":"26ae41def9d23f7601e44e3f36136f8f00d679cc","modified":1584173006044},{"_id":"public/2020/03/10/Effective-Python/2020-03-07-14-32-20.png","hash":"ce270b55b9b7a01d26ff7e9f0f82915cb694a62b","modified":1584173006044},{"_id":"public/2020/03/10/Effective-Python/2020-03-07-11-22-33.png","hash":"153bc4e2a09a7ffda504c0427e7744cde6e85de0","modified":1584173006044},{"_id":"public/2020/03/10/Effective-Python/2020-03-07-14-34-59.png","hash":"6768eb6d31c1ab8dc0600268cd5e0f6703033944","modified":1584173006044},{"_id":"public/2020/03/09/Maya卡顿优化/1558687101606.png","hash":"da6b18d10a271a78015fbdbcc56112763df3b1ce","modified":1584173006044},{"_id":"public/2020/03/09/Maya卡顿优化/1558686550786.png","hash":"a6db7e5d9831cd9d1464bc7e64ebd7e743cdba2c","modified":1584173006044},{"_id":"public/2020/03/09/Maya卡顿优化/1558686723618.png","hash":"9de0bf932b050ec7d413e6dc6532a137dbcab2eb","modified":1584173006044},{"_id":"public/2020/03/09/Maya卡顿优化/1558688555512.png","hash":"188099e0ddc4c16041575886bfead22c0400908a","modified":1584173006044},{"_id":"public/2019/12/01/Houdini_Entagma_学习笔记/2020-02-26-21-19-46.png","hash":"1f9e54e6e02ba5c0185732c9dbdd72baed7bbaa3","modified":1584173006044},{"_id":"public/2019/12/01/Houdini_Entagma_学习笔记/2020-03-04-16-03-43.png","hash":"4756b27af8b3c32d21b3a9b095ab6222b660f441","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-12-49-03.png","hash":"ccd429e2167313327adc2ef1fbce219ee007a4b1","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-12-50-12.png","hash":"cfedf3dab349a3b4b46fc5d3f416d630ad8e804a","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-12-50-25.png","hash":"3e7c651a70a63cc4c1c6af1d51bb298a3ee0b829","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-13-02-30.png","hash":"68763a0d3a72ffe797838ff684f6f154aa8fbba0","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-12-58-31.png","hash":"f075e4a17c3c4803a5d5aaf59db482d380927843","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-14-04-16.png","hash":"5e949a1428569b20155fc194add0a9edbd97360c","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-14-38-58.png","hash":"a2b59798c741cdd570534a1ddc4b2ded61aa8b7a","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-14-37-55.png","hash":"6f20088f8bac49f73849a7796fcc35529eb3e8e3","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-15-48-53.png","hash":"fdceff9350674c2a7169eb153d3d6abcebab754c","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-16-07-00.png","hash":"e3d9f1455cb3f33fc104251c810c83a1fcb9e29b","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-20-44-32.png","hash":"c3cb7f2fec6264595e5aa0aba5179088b3e55846","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-22-07-51.png","hash":"c6dcdcc8dcc6957d4a6dad161b0fc3532c8c0a98","modified":1584173006044},{"_id":"public/melody-favicon.ico","hash":"1896318abb671b863a88719e6a73aaebc3f6e3f9","modified":1584174533020},{"_id":"public/img/avatar.png","hash":"a44601fac9a81dd7e392d05ea5ddc65c96b051df","modified":1584174395042},{"_id":"public/2020/03/10/Effective-Python/2020-03-07-14-29-10.png","hash":"8694daf79f477e9156d598d3eb96247fe3e66791","modified":1584173006044},{"_id":"public/2019/12/01/Houdini_Entagma_学习笔记/2020-02-27-13-57-56.png","hash":"c1d7069f24996c1c38c061561cae161d2c75ff26","modified":1584173006044},{"_id":"public/2019/12/01/Houdini_Entagma_学习笔记/2020-02-26-17-23-21.png","hash":"c363d7da4b98e270f5675b351546911de3c8fd14","modified":1584173006044},{"_id":"public/2019/12/01/Houdini_Entagma_学习笔记/![](2020-03-04-13-57-42.png).png","hash":"34425cc976510aef5ec2ed2152d3033dd7104599","modified":1584173006044},{"_id":"public/2019/12/01/Houdini_Entagma_学习笔记/2020-02-27-14-37-42.png","hash":"c14adea1c95b8d2467f2929e9a95f4d05c18dd81","modified":1584173006044},{"_id":"public/2019/12/01/Houdini_Entagma_学习笔记/2020-03-03-19-00-29.png","hash":"36e5118ef15c7a09ad025397167eb184a0b5a83c","modified":1584173006044},{"_id":"public/2019/12/01/Houdini_Entagma_学习笔记/2020-03-04-14-02-15.png","hash":"34425cc976510aef5ec2ed2152d3033dd7104599","modified":1584173006044},{"_id":"public/2019/12/01/Houdini_Entagma_学习笔记/learn_houdini (3).gif","hash":"e848e0d27ac966133a20b0ddb64a44ef96479587","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-12-49-24.png","hash":"9d51bb8272c69e238b0a0f577da4544fbaed4897","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-12-49-38.png","hash":"11285d3d580332e3d574256be0399dc1124408ae","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-12-49-58.png","hash":"c05d82616188d360c8c80c1295fca0d0faa3c07c","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-13-11-22.png","hash":"146757565455e60dffe126a1132710c66cbfb8b2","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-13-00-54.png","hash":"0bfd4ccf3dd6f9253bc7e5d3900579ebb3daf781","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-13-08-11.png","hash":"40317519572c5b471ce8669d3e0e9e9e10c816d4","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-13-44-08.png","hash":"a18c72c66057a21c12a71815b9ddd3726ca3aeb8","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-13-57-13.png","hash":"8431774240c60e8bb1d7963bc83abc9154652c69","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-13-17-01.png","hash":"b6cc1c36560eb6d3ce611430e1a4a96fb138fcbe","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-13-44-03.png","hash":"a18c72c66057a21c12a71815b9ddd3726ca3aeb8","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-14-36-32.png","hash":"0b10fb2ad8865f34c8ac1f0d40cdab8eb28bd21b","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-15-51-31.png","hash":"d4e73387d1e1710f4a96e80680c1f13958562292","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-16-47-04.png","hash":"fef0d7149eb7fbef5d08222179759a686887c783","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-15-52-25.png","hash":"6c64d809d6c435c1c369df7e700a095e72510334","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-20-49-51.png","hash":"b13198cba6db6ce9d2643cd26e6ebcf3ab491a12","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-21-50-50.png","hash":"227d2b851610f0b91c2a69aee4f0f819096d0e89","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-21-53-53.png","hash":"5f50fe82d1a6b86fcfa4f6ad7684b091ae1ddffe","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-20-53-06.png","hash":"02f50fb9bab2ef406f04f1d010f130bdd67f3f08","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-22-01-06.png","hash":"9b22c9af831d694f768d74efa8dd7d716ea3d6a0","modified":1584173006044},{"_id":"public/2020/03/10/GameCourse101/2020-03-08-22-12-11.png","hash":"2d23720b22e1e7410b68151cad94fb57ad59633f","modified":1584173006044},{"_id":"public/2020/03/09/图片测试/Snipaste_2020-03-09_22-50-07.png","hash":"8be5e8f90673db830c8910fc15071972dba7964b","modified":1584173006044},{"_id":"public/js/copy.js","hash":"ce7f8601c7c75ced79e2e9851beec37299d49fd1","modified":1584174395042},{"_id":"public/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1584173006044},{"_id":"public/js/fireworks.js","hash":"17d5770d46d9b531b675b129835561146290af83","modified":1584173006044},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1584173006044},{"_id":"public/js/transition.js","hash":"11c3b82a5e9ef2bf7bd712b6c211d86426f9a23e","modified":1584174395042},{"_id":"public/js/scroll.js","hash":"467f883ca2ace0c0fb46ae24919223560a6fb72c","modified":1584174395042},{"_id":"public/js/fancybox.js","hash":"2d3eaa654b2524c41dc5aba1d5e2e7cc9aaefd26","modified":1584174395042},{"_id":"public/js/sidebar.js","hash":"a42109c5a69dedc87e1aaf8cb2383fd43069677e","modified":1584173006044},{"_id":"public/js/head.js","hash":"555e9caa046d5a174af8d20c75e9e89c25aabb6c","modified":1584174395042},{"_id":"public/js/utils.js","hash":"f514662ad80803e1bb5f6bc653c4b9ad06ea4932","modified":1584173006044},{"_id":"public/js/search/algolia.js","hash":"8d2cc7ac4a015563344a3981c3040d308489935c","modified":1584173006044},{"_id":"public/js/third-party/anime.min.js","hash":"3c46c9597c721644a515c1c54ab13f46406657f7","modified":1584173006044},{"_id":"public/js/search/local-search.js","hash":"b7e77c27097d9d3ced13618912069d1ddf1cd64a","modified":1584173006044},{"_id":"public/js/third-party/reveal/markdown.min.js","hash":"859d70cd7c459819b90fe27afb940d16ecff6614","modified":1584173006044},{"_id":"public/js/third-party/reveal/head.min.js","hash":"95c9de30444117adbbb3218070fda00af187a76a","modified":1584173006044},{"_id":"public/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1584173006044},{"_id":"public/js/third-party/reveal/math.min.js","hash":"779c98dbd83a528f27ea4b9f2d420c957c0939ba","modified":1584173006044},{"_id":"public/js/third-party/reveal/notes.min.js","hash":"4bb2925b111467791fdef3c4e4b41993d59ce90f","modified":1584173006044},{"_id":"public/js/third-party/reveal/zoom.min.js","hash":"aca47bf417d451c4d364c6eb287a230e4b462b17","modified":1584173006044},{"_id":"public/css/index.css","hash":"80a56653a29c2ae5584f7e86b8dd2601b65aa4fb","modified":1584174395042},{"_id":"public/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1584173006044},{"_id":"public/js/third-party/velocity.min.js","hash":"69c85b9d6a931a7d3a5b0657e60112c31fb3b286","modified":1584173006044},{"_id":"public/js/third-party/reveal/reveal.min.js","hash":"d8377a86451712488dea87caf5acbf8e97aa991f","modified":1584173006044},{"_id":"public/js/third-party/reveal/marked.min.js","hash":"37f3186f93ec854f56bf745a5988a89225e8da6c","modified":1584173006044},{"_id":"public/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1584173006044},{"_id":"public/js/third-party/reveal/highlight.min.js","hash":"10dd530e712a67f25cf27845213c0f28d2fe9e4d","modified":1584173006044},{"_id":"public/2019/12/01/Houdini_Entagma_学习笔记/2020-02-18-20-23-42.png","hash":"92f2dfd9cfe74aa59712f8b3d2d7ae777f1e91a3","modified":1584173006044},{"_id":"public/2019/12/01/Houdini_Entagma_学习笔记/2020-03-03-19-30-55.png","hash":"ca0d34dbf4fad20d0414b9ced8c5b0e48baf2258","modified":1584173006044},{"_id":"public/2019/12/01/Houdini_Entagma_学习笔记/2020-03-03-19-31-43.png","hash":"c6f5ad8f7513998a6bb0b434823d96eea81c6793","modified":1584173006044},{"_id":"public/2019/12/01/Houdini_Entagma_学习笔记/2020-03-03-19-19-50.png","hash":"c79def23138b35b04f31bf92038482e0ff469ebd","modified":1584173006044},{"_id":"public/2020/03/09/图片测试/Snipaste_2020-03-09_22-50-25.png","hash":"623322f58544128fd42966ddae26ecea0f0cc25b","modified":1584173006044},{"_id":"public/2019/12/01/Houdini_Entagma_学习笔记/entagma_attributes.png","hash":"63bf6e0d5acc2e15dc27de0547dc1b20ae4587ab","modified":1584173006044},{"_id":"public/2019/12/01/Houdini_Entagma_学习笔记/entagma_martrix.png","hash":"5750112c510dad622d627dc7a7aa57cb256c1208","modified":1584173006044},{"_id":"public/2019/12/01/Houdini_Entagma_学习笔记/learn_houdini (1).gif","hash":"69850989101f0cacbe21fff393b9a01cb46c7b4d","modified":1584173006044},{"_id":"public/2019/12/01/Houdini_Entagma_学习笔记/learn_houdini (4).gif","hash":"14d71e460a674505c311cd6e58b39c71d18d7589","modified":1584173006044},{"_id":"public/2019/12/01/Houdini_Entagma_学习笔记/learn_houdini (2).gif","hash":"53942571e06946edd99c085e84606fa0ebb2abb5","modified":1584173006044},{"_id":"source/_posts/SubstancePainter-Plugin-Study-Notes.md","hash":"d23402f640032a7a8b00034748277d2c054b73d7","modified":1584173595540},{"_id":"source/_posts/SubstancePainter-Plugin-Study-Notes/2020-03-13-21-25-23.png","hash":"d0b38edddbfc5028eb13db52c1f31b21eaa1b54e","modified":1584105924536},{"_id":"source/_posts/SubstancePainter-Plugin-Study-Notes/2020-03-06-10-45-09.png","hash":"00448fed080c21d8b2a2a684febcc51ea0ec3510","modified":1583462710417},{"_id":"source/_posts/SubstancePainter-Plugin-Study-Notes/2020-03-06-10-56-41.png","hash":"cfae91b40f4d8b042af929841277578759696f57","modified":1583463402147},{"_id":"source/_posts/SubstancePainter-Plugin-Study-Notes/2020-03-06-10-43-52.png","hash":"90f33a2e9e85ddb9fa2919d6d60d23f65ddeeb20","modified":1583462633375},{"_id":"source/_posts/SubstancePainter-Plugin-Study-Notes/2020-03-06-10-47-53.png","hash":"1ae8cb1529eb623ea46b7c688c846df834dd09d8","modified":1583462874046},{"_id":"public/tags/SubstancePainter/index.html","hash":"81a1ad4c75c86b09fc2a9d2eaded86b250cc8f06","modified":1584174395042},{"_id":"public/2020/03/14/SubstancePainter-Plugin-Study-Notes/index.html","hash":"2c9f7fb959d84a868e51ebe6bb9a0d29f78e0723","modified":1584174395042},{"_id":"public/2020/03/14/SubstancePainter-Plugin-Study-Notes/2020-03-06-10-45-09.png","hash":"00448fed080c21d8b2a2a684febcc51ea0ec3510","modified":1584173604233},{"_id":"public/2020/03/14/SubstancePainter-Plugin-Study-Notes/2020-03-06-10-56-41.png","hash":"cfae91b40f4d8b042af929841277578759696f57","modified":1584173604233},{"_id":"public/2020/03/14/SubstancePainter-Plugin-Study-Notes/2020-03-13-21-25-23.png","hash":"d0b38edddbfc5028eb13db52c1f31b21eaa1b54e","modified":1584173604233},{"_id":"public/2020/03/14/SubstancePainter-Plugin-Study-Notes/2020-03-06-10-43-52.png","hash":"90f33a2e9e85ddb9fa2919d6d60d23f65ddeeb20","modified":1584173604233},{"_id":"public/2020/03/14/SubstancePainter-Plugin-Study-Notes/2020-03-06-10-47-53.png","hash":"1ae8cb1529eb623ea46b7c688c846df834dd09d8","modified":1584173604233},{"_id":"public/tags/Git/index.html","hash":"cf5f830868607000dac9f8096ef3c20feedbe69c","modified":1584174395042},{"_id":"themes/hexo-theme-melody/.eslintrc","hash":"2c75ddb670b21591023b2c4f52ecfb02578b5eae","modified":1584174296162},{"_id":"themes/hexo-theme-melody/.eslintignore","hash":"719a633358c168ec04b544a5a306fc454471f72f","modified":1584174296160},{"_id":"themes/hexo-theme-melody/.travis.demo.yml","hash":"977db46c56f95e0b475326ee7499890aa16bd971","modified":1584174296172},{"_id":"themes/hexo-theme-melody/.gitignore","hash":"371c0a57184696c2069b146fc8ccaa285ca7626c","modified":1584174296171},{"_id":"themes/hexo-theme-melody/FAQ.md","hash":"2e4871193be2bbade191c1064216072cbe61ab72","modified":1584174296178},{"_id":"themes/hexo-theme-melody/CHANGELOG.md","hash":"1bd1bad3e3450b69f4b303459ddd18c9ec545e9a","modified":1584174296177},{"_id":"themes/hexo-theme-melody/LICENSE","hash":"f6ad35196b942786fa91aedc1c0f45bf89de3fd3","modified":1584174296179},{"_id":"themes/hexo-theme-melody/_config.yml","hash":"06d5f00811b8fc68d2a391180af7cbe8a3b848c9","modified":1584174296182},{"_id":"themes/hexo-theme-melody/README.md","hash":"afbc589a9023a2b827f611e880e2b63d573e9d6c","modified":1584174296180},{"_id":"themes/hexo-theme-melody/package.json","hash":"ec19e33a67d5ff52d4fb941477fb4c3494f44a07","modified":1584174296295},{"_id":"themes/hexo-theme-melody/stylus_format.json","hash":"53008fbf66531953489ab0f2ce166576b7ba1ab7","modified":1584174296436},{"_id":"themes/hexo-theme-melody/scripts/hexo-plugins.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1584174296300},{"_id":"themes/hexo-theme-melody/.github/FUNDING.yml","hash":"e56cf70f2fc56e2433ac3bca379e2704a41c7889","modified":1584174296169},{"_id":"themes/hexo-theme-melody/.github/ISSUE_TEMPLATE.md","hash":"d1420092142acd3f38c31099934d84bf5c4a4b7c","modified":1584174296170},{"_id":"themes/hexo-theme-melody/.vscode/settings.json","hash":"defe04b1c276769d86dfb931c373595939729e92","modified":1584174296176},{"_id":"themes/hexo-theme-melody/languages/en.yml","hash":"4f87bdc1526111b59785f1dce1025435f7ed8e97","modified":1584174296186},{"_id":"themes/hexo-theme-melody/languages/default.yml","hash":"4f87bdc1526111b59785f1dce1025435f7ed8e97","modified":1584174296185},{"_id":"themes/hexo-theme-melody/languages/zh-Hans.yml","hash":"1868dda88a019692d1993d5ee6b1b854f1da9d88","modified":1584174296187},{"_id":"themes/hexo-theme-melody/scripts/gallery-tag.js","hash":"b18e4a809de37da54ea914452ce4a24785fa7621","modified":1584174296298},{"_id":"themes/hexo-theme-melody/.vscode/launch.json","hash":"52d28f3455d1e9ff1d7c56316773a77710e89751","modified":1584174296175},{"_id":"themes/hexo-theme-melody/scripts/replace-config.js","hash":"9d5378898a068e77b5e601c950b631144bd743cf","modified":1584174296301},{"_id":"themes/hexo-theme-melody/layout/404.pug","hash":"0ad5d251ba70edad5c04a45d13ca6a8db3bf7b42","modified":1584174296190},{"_id":"themes/hexo-theme-melody/layout/gallery.pug","hash":"1470a86b329eb5c60d6fa6a7bafa25ddf1255f97","modified":1584174296192},{"_id":"themes/hexo-theme-melody/layout/index.pug","hash":"d15a36b5c8f1bec367888edb358e70b47eb15ea9","modified":1584174296290},{"_id":"themes/hexo-theme-melody/layout/page.pug","hash":"59ade962030ec41b86f7d754c53d974b8d4d2068","modified":1584174296291},{"_id":"themes/hexo-theme-melody/layout/post.pug","hash":"40cb5814e69027ac030792a3b8d72bb43811f8e6","modified":1584174296292},{"_id":"themes/hexo-theme-melody/layout/tag.pug","hash":"6b5c5c08e9a6773a4fce8583fdf614a784beb045","modified":1584174296294},{"_id":"themes/hexo-theme-melody/layout/slides.pug","hash":"1e84a92d5b854dd233e0b511d59c1cd7c8d647a1","modified":1584174296293},{"_id":"themes/hexo-theme-melody/layout/archive.pug","hash":"f3198ed4d59ca9d0423060a428106a857247a8f8","modified":1584174296190},{"_id":"themes/hexo-theme-melody/layout/category.pug","hash":"27fe85787ee1e4bba75a6eadbf86f7ffc58cb66a","modified":1584174296191},{"_id":"themes/hexo-theme-melody/source/melody-favicon.ico","hash":"1896318abb671b863a88719e6a73aaebc3f6e3f9","modified":1583837381328},{"_id":"themes/hexo-theme-melody/source/js/hexo-theme-melody.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1584174296377},{"_id":"themes/hexo-theme-melody/layout/includes/footer.pug","hash":"c5968d30a668c3d1b8e658d784b661799d3ba48a","modified":1584174296214},{"_id":"themes/hexo-theme-melody/layout/includes/head.pug","hash":"5c5ad5baa1d44bd4264cc1af0042123ace8aa853","modified":1584174296219},{"_id":"themes/hexo-theme-melody/layout/includes/header.pug","hash":"2d6ab2df1c048654c5b32eeed789e19949853d93","modified":1584174296221},{"_id":"themes/hexo-theme-melody/layout/includes/additional-js.pug","hash":"92c27adaf87d1108da8ba31c31ceae0e2083484c","modified":1584174296200},{"_id":"themes/hexo-theme-melody/layout/includes/layout.pug","hash":"80e59c4023baa2504bff0e9a69efab3314f8ffdb","modified":1584174296222},{"_id":"themes/hexo-theme-melody/layout/includes/nav.pug","hash":"e1f5053a66a48b6fb6c4390ae55f5bd8e397ff8e","modified":1584174296227},{"_id":"themes/hexo-theme-melody/layout/includes/recent-posts.pug","hash":"f37dc3576cc45ad3da097b58f420b5b523d8a9a5","modified":1584174296229},{"_id":"themes/hexo-theme-melody/layout/includes/pagination.pug","hash":"11a7d975f7e44932ea509a1a9d29f3e1ddece73e","modified":1584174296228},{"_id":"themes/hexo-theme-melody/layout/includes/sidebar.pug","hash":"5fd5e002d0ab203489c840451e4fa9d3535610e2","modified":1584174296278},{"_id":"themes/hexo-theme-melody/layout/includes/config.pug","hash":"42e523fef2e9f285d989d494f0a6fce485921719","modified":1584174296209},{"_id":"themes/hexo-theme-melody/source/css/404.styl","hash":"e16201381c7f064f1923a12a23136cec6db0a8a0","modified":1584174296306},{"_id":"themes/hexo-theme-melody/source/css/index.styl","hash":"c2823ad6013df237993eea5cf190c313270da4db","modified":1584174296359},{"_id":"themes/hexo-theme-melody/source/css/var.styl","hash":"bfce8a6dd838762e3db0b0052887220eb260dc7b","modified":1584174296361},{"_id":"themes/hexo-theme-melody/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1584174296368},{"_id":"themes/hexo-theme-melody/source/img/avatar.png","hash":"a44601fac9a81dd7e392d05ea5ddc65c96b051df","modified":1584174296369},{"_id":"themes/hexo-theme-melody/source/js/copy.js","hash":"a3a7c3158ea23a3bf63f7900750cc0928b73e25f","modified":1584174296372},{"_id":"themes/hexo-theme-melody/source/js/fireworks.js","hash":"f4f902392525133028f501bef2afa6b1045b5b9c","modified":1584174296375},{"_id":"themes/hexo-theme-melody/source/js/fancybox.js","hash":"91d2acc362c03d905b2d40bda42e08c0ae81c4f7","modified":1584174296373},{"_id":"themes/hexo-theme-melody/source/js/katex.js","hash":"8cc3bcbfd489f86714e815dc6ab8bad466c49664","modified":1584174296379},{"_id":"themes/hexo-theme-melody/source/js/head.js","hash":"24bc79d4382730d79174cdc2cd3de6368dee8034","modified":1584174296376},{"_id":"themes/hexo-theme-melody/source/js/scroll.js","hash":"ec2d51d4c98af4e1162a79e430340a7aeb3a7165","modified":1584174296380},{"_id":"themes/hexo-theme-melody/source/js/sidebar.js","hash":"6906dcca3a6b9bd46489ca378bc1e74e454168ac","modified":1584174296386},{"_id":"themes/hexo-theme-melody/source/js/transition.js","hash":"24db2b0ae93ea925fb18be6d466365a4cd9f6576","modified":1584174296433},{"_id":"themes/hexo-theme-melody/source/js/utils.js","hash":"5ff6609b1d674f7879f30e491bdd3c69139704da","modified":1584174296434},{"_id":"themes/hexo-theme-melody/layout/includes/gallery/script.pug","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1584174296218},{"_id":"themes/hexo-theme-melody/layout/includes/404/404-nav.pug","hash":"f085a65214c2656ef6a104a2ae9fa1f8fbc196c1","modified":1584174296198},{"_id":"themes/hexo-theme-melody/layout/includes/404/layout.pug","hash":"24e9cee9d7c96712fffc404671d88f1d9c0a5a9b","modified":1584174296199},{"_id":"themes/hexo-theme-melody/layout/includes/count/busuanzi.pug","hash":"760be9ea92e5eb6959f37b76b9c13fb627893b0a","modified":1584174296213},{"_id":"themes/hexo-theme-melody/layout/includes/gallery/layout.pug","hash":"8ff96c4f9afb416c5fc586c9585ae51cb6129529","modified":1584174296217},{"_id":"themes/hexo-theme-melody/layout/includes/mixins/slide.pug","hash":"cde884e97dd980bf05910934ce1d52ef3bd5df9c","modified":1584174296226},{"_id":"themes/hexo-theme-melody/layout/includes/search/algolia.pug","hash":"3d2b2de0e199ab1fb151f41f2bbaac909f3d3d12","modified":1584174296254},{"_id":"themes/hexo-theme-melody/layout/includes/mixins/article-sort.pug","hash":"05c080cbd236b7d94765350cc699b92736ca4609","modified":1584174296225},{"_id":"themes/hexo-theme-melody/layout/includes/search/index.pug","hash":"66b4f4e8119e987cd3f9907298689a1408a05859","modified":1584174296262},{"_id":"themes/hexo-theme-melody/layout/includes/search/local-search.pug","hash":"205aff585f7763b61b8597c6121e6d8c5f9329a4","modified":1584174296266},{"_id":"themes/hexo-theme-melody/layout/includes/share/add-this.pug","hash":"055d41a0cc135b8fb02da8faa1df5faacb8fc13d","modified":1584174296274},{"_id":"themes/hexo-theme-melody/layout/includes/share/index.pug","hash":"42794c93723016ce1f23b81325e723a6f23f72d0","modified":1584174296275},{"_id":"themes/hexo-theme-melody/layout/includes/share/share-js.pug","hash":"c1ab921b1874d0026a7e1c23833600e3ea158881","modified":1584174296276},{"_id":"themes/hexo-theme-melody/layout/includes/slide/script.pug","hash":"cacee97b98943fecc3ad50c1b45f71a4cf2e8c4b","modified":1584174296283},{"_id":"themes/hexo-theme-melody/layout/includes/slide/layout.pug","hash":"171ce0b25aad4f5f4095f5da0caa7e9d26664a03","modified":1584174296282},{"_id":"themes/hexo-theme-melody/layout/includes/third-party/canvas-ribbon.pug","hash":"a72c4b5943e9e88588983ab1c1cfeaf210142c56","modified":1584174296287},{"_id":"themes/hexo-theme-melody/layout/includes/third-party/katex.pug","hash":"19ffed43fa22c3bf1c8d974a8d33f73a9a67d098","modified":1584174296288},{"_id":"themes/hexo-theme-melody/layout/includes/comments/disqus.pug","hash":"0d753ace1190deebd9173279ab5369e4a30c53a8","modified":1584174296204},{"_id":"themes/hexo-theme-melody/layout/includes/comments/laibili.pug","hash":"1ffb80147fd443144ca6cf0230515f229eba6745","modified":1584174296207},{"_id":"themes/hexo-theme-melody/layout/includes/third-party/mathjax.pug","hash":"0afc0e488ef64f5cb27b9fc90b13f0f9e9f958a5","modified":1584174296289},{"_id":"themes/hexo-theme-melody/layout/includes/comments/gitalk.pug","hash":"590bc5af43bc55182157dbac65e7cd8bf39f410d","modified":1584174296205},{"_id":"themes/hexo-theme-melody/layout/includes/comments/gitment.pug","hash":"97f524092775c9b7e618c691df40b4bce9e121ac","modified":1584174296206},{"_id":"themes/hexo-theme-melody/layout/includes/comments/valine.pug","hash":"81e10998d5a2d28857f1c32e2d8b1ba1d84ce0f8","modified":1584174296208},{"_id":"themes/hexo-theme-melody/layout/includes/comments/index.pug","hash":"b8c1344a2760a46774f1894967c879d72802556d","modified":1584174296206},{"_id":"themes/hexo-theme-melody/source/css/_global/index.styl","hash":"a6ad6d2675e975883855a1fa3a634c7ba06d4685","modified":1584174296310},{"_id":"themes/hexo-theme-melody/source/css/_search/algolia.styl","hash":"0168c78d28fbc8996ad9e1764457a6526404515b","modified":1584174296352},{"_id":"themes/hexo-theme-melody/source/css/_search/index.styl","hash":"b16e4c15ad5844096f427eb3bdb49c5bb0bbcaf7","modified":1584174296353},{"_id":"themes/hexo-theme-melody/source/css/_third-party/jquery.fancybox.min.css","hash":"f9c94ec04062a1bfe1ef894c49e6ec33fa121778","modified":1584174296357},{"_id":"themes/hexo-theme-melody/source/css/_third-party/normalize.min.css","hash":"e12eef6d6811c132f4f2fcf6c936be384191bcaf","modified":1584174296357},{"_id":"themes/hexo-theme-melody/source/css/_highlight/diff.styl","hash":"4e761f65c28f9df474fa2bd4d891c22db1aafa27","modified":1584174296313},{"_id":"themes/hexo-theme-melody/source/css/_search/local-search.styl","hash":"adb2663fcfee1c84461231472f228aa82c6478bd","modified":1584174296354},{"_id":"themes/hexo-theme-melody/source/css/_highlight/highlight.styl","hash":"ca5913698ddd97a55adcc98097038e4190cd7b58","modified":1584174296335},{"_id":"themes/hexo-theme-melody/source/css/_highlight/theme.styl","hash":"89af8e4eb6adacee6693b3df46d87a0b1b2b0d2d","modified":1584174296337},{"_id":"themes/hexo-theme-melody/source/css/_layout/comments.styl","hash":"3b32040e894978ec9be6569f44fd5557734f2340","modified":1584174296341},{"_id":"themes/hexo-theme-melody/source/css/_layout/page.styl","hash":"65420e8415cc117916c8b13f214d3a76815692dd","modified":1584174296345},{"_id":"themes/hexo-theme-melody/source/css/_layout/pagination.styl","hash":"ad5dc99b438588f92115592ed2d65a47c980720d","modified":1584174296346},{"_id":"themes/hexo-theme-melody/source/css/_layout/footer.styl","hash":"cb6db6151a49db6af0f7f6c8ee4c84872a75e437","modified":1584174296342},{"_id":"themes/hexo-theme-melody/source/css/_layout/post.styl","hash":"430bb7c32e743c3f78da947d56274bb8343cf2ef","modified":1584174296347},{"_id":"themes/hexo-theme-melody/source/css/_layout/sidebar.styl","hash":"29b02d3c319d84ab98dddec449f4bc83fbfdad36","modified":1584174296348},{"_id":"themes/hexo-theme-melody/source/css/_layout/head.styl","hash":"41fe374cfa854be779b07d91f918836e8c03d54a","modified":1584174296343},{"_id":"themes/hexo-theme-melody/source/js/third-party/canvas-ribbon.js","hash":"48abc9e33d90de08a49d63e1bcd21defe0461309","modified":1584174296392},{"_id":"themes/hexo-theme-melody/source/js/third-party/anime.min.js","hash":"7c9416c1b444773b2d82e797131d6047364645a3","modified":1584174296391},{"_id":"themes/hexo-theme-melody/source/js/third-party/jquery.fancybox.min.js","hash":"0acabccbb20d722141fa15b37d535807092b2c88","modified":1584174296394},{"_id":"themes/hexo-theme-melody/source/js/third-party/velocity.min.js","hash":"15a9dc404e02f2cd9b46cc71293b65671976567b","modified":1584174296430},{"_id":"themes/hexo-theme-melody/source/js/third-party/velocity.ui.min.js","hash":"d8124c091d19fa4072616a44a8897fabc6599fce","modified":1584174296431},{"_id":"themes/hexo-theme-melody/source/js/search/local-search.js","hash":"a642a93fb52ebc87f05e5d3cee38618013fda539","modified":1584174296385},{"_id":"themes/hexo-theme-melody/source/js/search/algolia.js","hash":"8a6673cb1616b50a5ac8b2dc20fb3475bc32039f","modified":1584174296384},{"_id":"themes/hexo-theme-melody/source/js/third-party/jquery.min.js","hash":"67bdacbd077ee59f411109fd119ee9f58db15a5f","modified":1584174296397},{"_id":"themes/hexo-theme-melody/source/js/third-party/reveal/math.min.js","hash":"779c98dbd83a528f27ea4b9f2d420c957c0939ba","modified":1584174296424},{"_id":"themes/hexo-theme-melody/source/js/third-party/reveal/head.min.js","hash":"e34a3faf6e51034de612d15700e059fe82dba310","modified":1584174296402},{"_id":"themes/hexo-theme-melody/source/js/third-party/reveal/notes.min.js","hash":"4bb2925b111467791fdef3c4e4b41993d59ce90f","modified":1584174296425},{"_id":"themes/hexo-theme-melody/source/js/third-party/reveal/reveal.min.js","hash":"d8377a86451712488dea87caf5acbf8e97aa991f","modified":1584174296427},{"_id":"themes/hexo-theme-melody/source/js/third-party/reveal/zoom.min.js","hash":"aca47bf417d451c4d364c6eb287a230e4b462b17","modified":1584174296428},{"_id":"themes/hexo-theme-melody/source/js/third-party/reveal/markdown.min.js","hash":"859d70cd7c459819b90fe27afb940d16ecff6614","modified":1584174296407},{"_id":"themes/hexo-theme-melody/source/js/third-party/reveal/marked.min.js","hash":"abd5391551b7b4e0cc0511c4b5c5ccfe66100f1b","modified":1584174296423},{"_id":"themes/hexo-theme-melody/source/js/third-party/reveal/highlight.min.js","hash":"10dd530e712a67f25cf27845213c0f28d2fe9e4d","modified":1584174296406},{"_id":"public/js/katex.js","hash":"a5a999b357c0fd9aeacae721bf121f30d40d6726","modified":1584174395042},{"_id":"public/css/404.css","hash":"712ecbf4ac203ab5f1ea92989c0f0062a3d0aca9","modified":1584174395042},{"_id":"public/js/third-party/canvas-ribbon.js","hash":"8fd084e962fb2028be9f748b5cb5f53d030d1d03","modified":1584174395042}],"Category":[],"Data":[{"_id":"melody","data":{"theme_color":{"enable":true,"main":"#2d6b96","paginator":"#6AA7D2","button_hover":"#3B8BC4","text_selection":"#6AA7D2","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#6AA7D2","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"文章":"/","归档":"/archives"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":true,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":null,"top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2013,"footer_custom_text":"Hi, welcome to my <a href=\"https://sunyuxianggit.github.io/\">blog</a>!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":true,"url":"https://github.com/sunyuxianggit","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true}}}],"Page":[{"title":"分类","date":"2019-12-15T07:21:30.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-12-15 15:21:30\n---\n","updated":"2020-03-10T10:49:41.151Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck7rbphz00000w8p4f9bs1h0g","content":"","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#2d6b96","paginator":"#6AA7D2","button_hover":"#3B8BC4","text_selection":"#6AA7D2","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#6AA7D2","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"文章":"/","归档":"/archives"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":true,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":null,"top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2013,"footer_custom_text":"Hi, welcome to my <a href=\"https://sunyuxianggit.github.io/\">blog</a>!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":true,"url":"https://github.com/sunyuxianggit","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"SunYuxiangのBlog","subtitle":"好记性,不如烂笔头.今天你要写点什么？","description":"","author":"Sun Yuxiang","language":"zh-Hans","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/sunyuxianggit/sunyuxianggit.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false}}}}},"excerpt":"","more":""},{"title":"标签","date":"2019-12-15T07:19:36.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-12-15 15:19:36\n---\n","updated":"2020-03-10T10:49:41.154Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck7rbphz60002w8p439pzhjgt","content":"","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#2d6b96","paginator":"#6AA7D2","button_hover":"#3B8BC4","text_selection":"#6AA7D2","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#6AA7D2","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"文章":"/","归档":"/archives"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":true,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":null,"top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2013,"footer_custom_text":"Hi, welcome to my <a href=\"https://sunyuxianggit.github.io/\">blog</a>!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":true,"url":"https://github.com/sunyuxianggit","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"SunYuxiangのBlog","subtitle":"好记性,不如烂笔头.今天你要写点什么？","description":"","author":"Sun Yuxiang","language":"zh-Hans","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/sunyuxianggit/sunyuxianggit.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false}}}}},"excerpt":"","more":""}],"Post":[{"title":"Blender脚本学习笔记","date":"2020-03-10T11:14:04.000Z","_content":"\n\n### 编辑器\n\n- 安装python3.0以上(Blender 2.8是 python3.x)\n\n- Vscode 安装python 和 blender Development 插件\n\n- 终端安装 fake-bpy 包``pip install fake-bpy-module-2.80``\n\n   https://github.com/nutti/fake-bpy-module\n\n  安装完上面这些，vscode里面就会有自动补全\n\n  Debug\n\n- ctrl + shift + P, select \"Blender: Start\"\n\n- 选择你的blender安装路径, vscode会连接到blender\n\n- ctrl + shift + P, \"Blender: Run script\" 并且可以使用断点调试\n\n   <!-- more -->\n\n\n### 插件路径\n\n- 目录：user\\AppData\\Roaming\\Blender Foundation\\Blender\\scripts\\addons,代表非系统原生的用户插件,blender所有安装的外部插件都会被解压放置到这个文件夹下。\n\n  安装插件可以在blender的addon界面直接选择zip文件安装，也可以把插件文件夹直接拖入此目录。\n\n- 目录：D:\\blender-2.81a\\2.81\\scripts\\addons\n\n  第二个是软件原生插件路径，不建议将自己写的插件放入此地，此地不少系统插件的代码可在以后做参考用，值得了解。\n\n### 如何查看命令 \n\n- 类似maya 直接执行某个功能，看info输出命令（A+X\t清空nfo）\n- 选中命令直接 Copy Data Path.\n- 鼠标悬停在某个命令上看提示，如果没有提示，要去perfence里面的interface下勾选Python Tooltips.\n- 控制台直接输入``dir（某个模块名）``查看输出\n- 打开blender的text editor，很多模板文件可供使用：\n- 用python console中的.后代码提示快捷键自动补全查看方法（ctrl+space）\n- 查询api\n- 全球最大爱好者论坛https://blender.stackexchange.com/\n- 查看各类开源插件\n\n### 基础知识\n\n- bpy 意思是 blender python\n\n- 常规得到某个物体信息流程 \n\n  1 viewport选中物体 \n\n  2 查看Transform的提示 \n\n  3 调用各种信息 类似 .location\n\n常用命令\n\n``bpy.context.`` 正文，当前环境的所有内容的意思\n\n``bpy.context.object`` 物体\n\n``mesh = bpy.data.objects[\"mesh\"]`` Mesh变量存储物体mesh\n\n``bpy.ops.object.select_all(action='SELECT')``全选命令\n\n``bpy.ops.object.select_all(action='DESELECT')``全不选命令\n\n``bpy.context.view_layer.objects.active = mesh``大纲选中，激活物体\n\n``bpy.context.object.location`` 拿到选中物体的世界坐标\n\n``bpy.context.object.location.z``拿到选中物体的世界坐标中的Z坐标数值\n\n``bpy.context.object.location.z += random()`` 选中物体的世界坐标中的Z坐标数值随机加一个数\n\n``bpy.context.object.name``查看选中物体的名字\n\n``bpy.ops.object.duplicate(linked=False,mode='TRANSLATION')``复制模型\n\n``bpy.ops.object.modifier_add(type='DECIMATE')``添加编辑器\n\n``bpy.context.object.modifiers[\"Decimate\"].ratio = 0.1``设置编辑器参数\n\n``bpy.ops.object.modifier_apply(apply_as='DATA', modifier=\"Decimate\")``#应用编辑器\n\n``bpy.context.object.name = \"要改的名字\"`` 选中物体的名字\n\n``bpy.ops.mesh.primitive_cube_add()``创建box\n\n``bpy.context.object.active_material``返回当前选择物体的材质球\n\n``bpy.data.materials.get(材质球名称字符串)``拿到当前场景的某个材质\n\n``bpy.context.view_layer.objects.active.material_slots.data.active_material= 某个材质`` 给当前激活的物体材质球插槽赋予某个材质\n\n``bpy.ops.wm.save_mainfile(filepath=\"E:\\\\Test\\\\testsave.blend\") ``存储当前文件\n\n``bpy.ops.wm.open_mainfile(filepath=BlendFilePath)`` 打开文件\n\n得到当前版本的blender文件夹路径\n\n```\nimport sys\nargv = sys.argv #当前blender的路径例：['D:\\\\blender-2.81a\\\\blender.exe']\n```\n\n遍历列表选中物体：\n\n```\nfor i in bpy.context.visible_objects:#迭代所有可见物体\n\tif i.name == \"要选物体的名字\":\n\t\ti.select_set(state=True)\nfor i in bpy.context.visible_objects:\n    if i.type == \"MESH\":#判断物体类型是模型\n        bpy.context.view_layer.objects.active = i #当前激活物体定义为i\n        bpy.ops.object.mode_set(mode='EDIT') #编辑模式\n        bpy.context.tool_settings.mesh_select_mode = (False, True, False)#编辑模式的（点线面）\n        bpy.ops.mesh.select_all(action='SELECT')#全选命令\n        bpy.ops.object.mode_set(mode='OBJECT')#关闭编辑模式\n```\n\n","source":"_posts/Blender脚本学习笔记.md","raw":"---\ntitle: Blender脚本学习笔记\ndate: 2020-03-10 19:14:04\ntags: blender\n---\n\n\n### 编辑器\n\n- 安装python3.0以上(Blender 2.8是 python3.x)\n\n- Vscode 安装python 和 blender Development 插件\n\n- 终端安装 fake-bpy 包``pip install fake-bpy-module-2.80``\n\n   https://github.com/nutti/fake-bpy-module\n\n  安装完上面这些，vscode里面就会有自动补全\n\n  Debug\n\n- ctrl + shift + P, select \"Blender: Start\"\n\n- 选择你的blender安装路径, vscode会连接到blender\n\n- ctrl + shift + P, \"Blender: Run script\" 并且可以使用断点调试\n\n   <!-- more -->\n\n\n### 插件路径\n\n- 目录：user\\AppData\\Roaming\\Blender Foundation\\Blender\\scripts\\addons,代表非系统原生的用户插件,blender所有安装的外部插件都会被解压放置到这个文件夹下。\n\n  安装插件可以在blender的addon界面直接选择zip文件安装，也可以把插件文件夹直接拖入此目录。\n\n- 目录：D:\\blender-2.81a\\2.81\\scripts\\addons\n\n  第二个是软件原生插件路径，不建议将自己写的插件放入此地，此地不少系统插件的代码可在以后做参考用，值得了解。\n\n### 如何查看命令 \n\n- 类似maya 直接执行某个功能，看info输出命令（A+X\t清空nfo）\n- 选中命令直接 Copy Data Path.\n- 鼠标悬停在某个命令上看提示，如果没有提示，要去perfence里面的interface下勾选Python Tooltips.\n- 控制台直接输入``dir（某个模块名）``查看输出\n- 打开blender的text editor，很多模板文件可供使用：\n- 用python console中的.后代码提示快捷键自动补全查看方法（ctrl+space）\n- 查询api\n- 全球最大爱好者论坛https://blender.stackexchange.com/\n- 查看各类开源插件\n\n### 基础知识\n\n- bpy 意思是 blender python\n\n- 常规得到某个物体信息流程 \n\n  1 viewport选中物体 \n\n  2 查看Transform的提示 \n\n  3 调用各种信息 类似 .location\n\n常用命令\n\n``bpy.context.`` 正文，当前环境的所有内容的意思\n\n``bpy.context.object`` 物体\n\n``mesh = bpy.data.objects[\"mesh\"]`` Mesh变量存储物体mesh\n\n``bpy.ops.object.select_all(action='SELECT')``全选命令\n\n``bpy.ops.object.select_all(action='DESELECT')``全不选命令\n\n``bpy.context.view_layer.objects.active = mesh``大纲选中，激活物体\n\n``bpy.context.object.location`` 拿到选中物体的世界坐标\n\n``bpy.context.object.location.z``拿到选中物体的世界坐标中的Z坐标数值\n\n``bpy.context.object.location.z += random()`` 选中物体的世界坐标中的Z坐标数值随机加一个数\n\n``bpy.context.object.name``查看选中物体的名字\n\n``bpy.ops.object.duplicate(linked=False,mode='TRANSLATION')``复制模型\n\n``bpy.ops.object.modifier_add(type='DECIMATE')``添加编辑器\n\n``bpy.context.object.modifiers[\"Decimate\"].ratio = 0.1``设置编辑器参数\n\n``bpy.ops.object.modifier_apply(apply_as='DATA', modifier=\"Decimate\")``#应用编辑器\n\n``bpy.context.object.name = \"要改的名字\"`` 选中物体的名字\n\n``bpy.ops.mesh.primitive_cube_add()``创建box\n\n``bpy.context.object.active_material``返回当前选择物体的材质球\n\n``bpy.data.materials.get(材质球名称字符串)``拿到当前场景的某个材质\n\n``bpy.context.view_layer.objects.active.material_slots.data.active_material= 某个材质`` 给当前激活的物体材质球插槽赋予某个材质\n\n``bpy.ops.wm.save_mainfile(filepath=\"E:\\\\Test\\\\testsave.blend\") ``存储当前文件\n\n``bpy.ops.wm.open_mainfile(filepath=BlendFilePath)`` 打开文件\n\n得到当前版本的blender文件夹路径\n\n```\nimport sys\nargv = sys.argv #当前blender的路径例：['D:\\\\blender-2.81a\\\\blender.exe']\n```\n\n遍历列表选中物体：\n\n```\nfor i in bpy.context.visible_objects:#迭代所有可见物体\n\tif i.name == \"要选物体的名字\":\n\t\ti.select_set(state=True)\nfor i in bpy.context.visible_objects:\n    if i.type == \"MESH\":#判断物体类型是模型\n        bpy.context.view_layer.objects.active = i #当前激活物体定义为i\n        bpy.ops.object.mode_set(mode='EDIT') #编辑模式\n        bpy.context.tool_settings.mesh_select_mode = (False, True, False)#编辑模式的（点线面）\n        bpy.ops.mesh.select_all(action='SELECT')#全选命令\n        bpy.ops.object.mode_set(mode='OBJECT')#关闭编辑模式\n```\n\n","slug":"Blender脚本学习笔记","published":1,"updated":"2020-03-11T02:28:29.953Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7rbphz30001w8p42pydc3eo","content":"<h3 id=\"编辑器\"><a href=\"#编辑器\" class=\"headerlink\" title=\"编辑器\"></a>编辑器</h3><ul>\n<li><p>安装python3.0以上(Blender 2.8是 python3.x)</p>\n</li>\n<li><p>Vscode 安装python 和 blender Development 插件</p>\n</li>\n<li><p>终端安装 fake-bpy 包<code>pip install fake-bpy-module-2.80</code></p>\n<p> <a href=\"https://github.com/nutti/fake-bpy-module\" target=\"_blank\" rel=\"noopener\">https://github.com/nutti/fake-bpy-module</a></p>\n<p>安装完上面这些，vscode里面就会有自动补全</p>\n<p>Debug</p>\n</li>\n<li><p>ctrl + shift + P, select “Blender: Start”</p>\n</li>\n<li><p>选择你的blender安装路径, vscode会连接到blender</p>\n</li>\n<li><p>ctrl + shift + P, “Blender: Run script” 并且可以使用断点调试</p>\n <a id=\"more\"></a>\n\n\n</li>\n</ul>\n<h3 id=\"插件路径\"><a href=\"#插件路径\" class=\"headerlink\" title=\"插件路径\"></a>插件路径</h3><ul>\n<li><p>目录：user\\AppData\\Roaming\\Blender Foundation\\Blender\\scripts\\addons,代表非系统原生的用户插件,blender所有安装的外部插件都会被解压放置到这个文件夹下。</p>\n<p>安装插件可以在blender的addon界面直接选择zip文件安装，也可以把插件文件夹直接拖入此目录。</p>\n</li>\n<li><p>目录：D:\\blender-2.81a\\2.81\\scripts\\addons</p>\n<p>第二个是软件原生插件路径，不建议将自己写的插件放入此地，此地不少系统插件的代码可在以后做参考用，值得了解。</p>\n</li>\n</ul>\n<h3 id=\"如何查看命令\"><a href=\"#如何查看命令\" class=\"headerlink\" title=\"如何查看命令\"></a>如何查看命令</h3><ul>\n<li>类似maya 直接执行某个功能，看info输出命令（A+X    清空nfo）</li>\n<li>选中命令直接 Copy Data Path.</li>\n<li>鼠标悬停在某个命令上看提示，如果没有提示，要去perfence里面的interface下勾选Python Tooltips.</li>\n<li>控制台直接输入<code>dir（某个模块名）</code>查看输出</li>\n<li>打开blender的text editor，很多模板文件可供使用：</li>\n<li>用python console中的.后代码提示快捷键自动补全查看方法（ctrl+space）</li>\n<li>查询api</li>\n<li>全球最大爱好者论坛<a href=\"https://blender.stackexchange.com/\" target=\"_blank\" rel=\"noopener\">https://blender.stackexchange.com/</a></li>\n<li>查看各类开源插件</li>\n</ul>\n<h3 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h3><ul>\n<li><p>bpy 意思是 blender python</p>\n</li>\n<li><p>常规得到某个物体信息流程 </p>\n<p>1 viewport选中物体 </p>\n<p>2 查看Transform的提示 </p>\n<p>3 调用各种信息 类似 .location</p>\n</li>\n</ul>\n<p>常用命令</p>\n<p><code>bpy.context.</code> 正文，当前环境的所有内容的意思</p>\n<p><code>bpy.context.object</code> 物体</p>\n<p><code>mesh = bpy.data.objects[&quot;mesh&quot;]</code> Mesh变量存储物体mesh</p>\n<p><code>bpy.ops.object.select_all(action=&#39;SELECT&#39;)</code>全选命令</p>\n<p><code>bpy.ops.object.select_all(action=&#39;DESELECT&#39;)</code>全不选命令</p>\n<p><code>bpy.context.view_layer.objects.active = mesh</code>大纲选中，激活物体</p>\n<p><code>bpy.context.object.location</code> 拿到选中物体的世界坐标</p>\n<p><code>bpy.context.object.location.z</code>拿到选中物体的世界坐标中的Z坐标数值</p>\n<p><code>bpy.context.object.location.z += random()</code> 选中物体的世界坐标中的Z坐标数值随机加一个数</p>\n<p><code>bpy.context.object.name</code>查看选中物体的名字</p>\n<p><code>bpy.ops.object.duplicate(linked=False,mode=&#39;TRANSLATION&#39;)</code>复制模型</p>\n<p><code>bpy.ops.object.modifier_add(type=&#39;DECIMATE&#39;)</code>添加编辑器</p>\n<p><code>bpy.context.object.modifiers[&quot;Decimate&quot;].ratio = 0.1</code>设置编辑器参数</p>\n<p><code>bpy.ops.object.modifier_apply(apply_as=&#39;DATA&#39;, modifier=&quot;Decimate&quot;)</code>#应用编辑器</p>\n<p><code>bpy.context.object.name = &quot;要改的名字&quot;</code> 选中物体的名字</p>\n<p><code>bpy.ops.mesh.primitive_cube_add()</code>创建box</p>\n<p><code>bpy.context.object.active_material</code>返回当前选择物体的材质球</p>\n<p><code>bpy.data.materials.get(材质球名称字符串)</code>拿到当前场景的某个材质</p>\n<p><code>bpy.context.view_layer.objects.active.material_slots.data.active_material= 某个材质</code> 给当前激活的物体材质球插槽赋予某个材质</p>\n<p><code>bpy.ops.wm.save_mainfile(filepath=&quot;E:\\\\Test\\\\testsave.blend&quot;)</code>存储当前文件</p>\n<p><code>bpy.ops.wm.open_mainfile(filepath=BlendFilePath)</code> 打开文件</p>\n<p>得到当前版本的blender文件夹路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys</span><br><span class=\"line\">argv &#x3D; sys.argv #当前blender的路径例：[&#39;D:\\\\blender-2.81a\\\\blender.exe&#39;]</span><br></pre></td></tr></table></figure>\n\n<p>遍历列表选中物体：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i in bpy.context.visible_objects:#迭代所有可见物体</span><br><span class=\"line\">\tif i.name &#x3D;&#x3D; &quot;要选物体的名字&quot;:</span><br><span class=\"line\">\t\ti.select_set(state&#x3D;True)</span><br><span class=\"line\">for i in bpy.context.visible_objects:</span><br><span class=\"line\">    if i.type &#x3D;&#x3D; &quot;MESH&quot;:#判断物体类型是模型</span><br><span class=\"line\">        bpy.context.view_layer.objects.active &#x3D; i #当前激活物体定义为i</span><br><span class=\"line\">        bpy.ops.object.mode_set(mode&#x3D;&#39;EDIT&#39;) #编辑模式</span><br><span class=\"line\">        bpy.context.tool_settings.mesh_select_mode &#x3D; (False, True, False)#编辑模式的（点线面）</span><br><span class=\"line\">        bpy.ops.mesh.select_all(action&#x3D;&#39;SELECT&#39;)#全选命令</span><br><span class=\"line\">        bpy.ops.object.mode_set(mode&#x3D;&#39;OBJECT&#39;)#关闭编辑模式</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#2d6b96","paginator":"#6AA7D2","button_hover":"#3B8BC4","text_selection":"#6AA7D2","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#6AA7D2","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"文章":"/","归档":"/archives"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":true,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":null,"top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2013,"footer_custom_text":"Hi, welcome to my <a href=\"https://sunyuxianggit.github.io/\">blog</a>!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":true,"url":"https://github.com/sunyuxianggit","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"SunYuxiangのBlog","subtitle":"好记性,不如烂笔头.今天你要写点什么？","description":"","author":"Sun Yuxiang","language":"zh-Hans","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/sunyuxianggit/sunyuxianggit.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false}}}}},"excerpt":"<h3 id=\"编辑器\"><a href=\"#编辑器\" class=\"headerlink\" title=\"编辑器\"></a>编辑器</h3><ul>\n<li><p>安装python3.0以上(Blender 2.8是 python3.x)</p>\n</li>\n<li><p>Vscode 安装python 和 blender Development 插件</p>\n</li>\n<li><p>终端安装 fake-bpy 包<code>pip install fake-bpy-module-2.80</code></p>\n<p> <a href=\"https://github.com/nutti/fake-bpy-module\" target=\"_blank\" rel=\"noopener\">https://github.com/nutti/fake-bpy-module</a></p>\n<p>安装完上面这些，vscode里面就会有自动补全</p>\n<p>Debug</p>\n</li>\n<li><p>ctrl + shift + P, select “Blender: Start”</p>\n</li>\n<li><p>选择你的blender安装路径, vscode会连接到blender</p>\n</li>\n<li><p>ctrl + shift + P, “Blender: Run script” 并且可以使用断点调试</p></li></ul>","more":"\n\n<h3 id=\"插件路径\"><a href=\"#插件路径\" class=\"headerlink\" title=\"插件路径\"></a>插件路径</h3><ul>\n<li><p>目录：user\\AppData\\Roaming\\Blender Foundation\\Blender\\scripts\\addons,代表非系统原生的用户插件,blender所有安装的外部插件都会被解压放置到这个文件夹下。</p>\n<p>安装插件可以在blender的addon界面直接选择zip文件安装，也可以把插件文件夹直接拖入此目录。</p>\n</li>\n<li><p>目录：D:\\blender-2.81a\\2.81\\scripts\\addons</p>\n<p>第二个是软件原生插件路径，不建议将自己写的插件放入此地，此地不少系统插件的代码可在以后做参考用，值得了解。</p>\n</li>\n</ul>\n<h3 id=\"如何查看命令\"><a href=\"#如何查看命令\" class=\"headerlink\" title=\"如何查看命令\"></a>如何查看命令</h3><ul>\n<li>类似maya 直接执行某个功能，看info输出命令（A+X    清空nfo）</li>\n<li>选中命令直接 Copy Data Path.</li>\n<li>鼠标悬停在某个命令上看提示，如果没有提示，要去perfence里面的interface下勾选Python Tooltips.</li>\n<li>控制台直接输入<code>dir（某个模块名）</code>查看输出</li>\n<li>打开blender的text editor，很多模板文件可供使用：</li>\n<li>用python console中的.后代码提示快捷键自动补全查看方法（ctrl+space）</li>\n<li>查询api</li>\n<li>全球最大爱好者论坛<a href=\"https://blender.stackexchange.com/\" target=\"_blank\" rel=\"noopener\">https://blender.stackexchange.com/</a></li>\n<li>查看各类开源插件</li>\n</ul>\n<h3 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h3><ul>\n<li><p>bpy 意思是 blender python</p>\n</li>\n<li><p>常规得到某个物体信息流程 </p>\n<p>1 viewport选中物体 </p>\n<p>2 查看Transform的提示 </p>\n<p>3 调用各种信息 类似 .location</p>\n</li>\n</ul>\n<p>常用命令</p>\n<p><code>bpy.context.</code> 正文，当前环境的所有内容的意思</p>\n<p><code>bpy.context.object</code> 物体</p>\n<p><code>mesh = bpy.data.objects[&quot;mesh&quot;]</code> Mesh变量存储物体mesh</p>\n<p><code>bpy.ops.object.select_all(action=&#39;SELECT&#39;)</code>全选命令</p>\n<p><code>bpy.ops.object.select_all(action=&#39;DESELECT&#39;)</code>全不选命令</p>\n<p><code>bpy.context.view_layer.objects.active = mesh</code>大纲选中，激活物体</p>\n<p><code>bpy.context.object.location</code> 拿到选中物体的世界坐标</p>\n<p><code>bpy.context.object.location.z</code>拿到选中物体的世界坐标中的Z坐标数值</p>\n<p><code>bpy.context.object.location.z += random()</code> 选中物体的世界坐标中的Z坐标数值随机加一个数</p>\n<p><code>bpy.context.object.name</code>查看选中物体的名字</p>\n<p><code>bpy.ops.object.duplicate(linked=False,mode=&#39;TRANSLATION&#39;)</code>复制模型</p>\n<p><code>bpy.ops.object.modifier_add(type=&#39;DECIMATE&#39;)</code>添加编辑器</p>\n<p><code>bpy.context.object.modifiers[&quot;Decimate&quot;].ratio = 0.1</code>设置编辑器参数</p>\n<p><code>bpy.ops.object.modifier_apply(apply_as=&#39;DATA&#39;, modifier=&quot;Decimate&quot;)</code>#应用编辑器</p>\n<p><code>bpy.context.object.name = &quot;要改的名字&quot;</code> 选中物体的名字</p>\n<p><code>bpy.ops.mesh.primitive_cube_add()</code>创建box</p>\n<p><code>bpy.context.object.active_material</code>返回当前选择物体的材质球</p>\n<p><code>bpy.data.materials.get(材质球名称字符串)</code>拿到当前场景的某个材质</p>\n<p><code>bpy.context.view_layer.objects.active.material_slots.data.active_material= 某个材质</code> 给当前激活的物体材质球插槽赋予某个材质</p>\n<p><code>bpy.ops.wm.save_mainfile(filepath=&quot;E:\\\\Test\\\\testsave.blend&quot;)</code>存储当前文件</p>\n<p><code>bpy.ops.wm.open_mainfile(filepath=BlendFilePath)</code> 打开文件</p>\n<p>得到当前版本的blender文件夹路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys</span><br><span class=\"line\">argv &#x3D; sys.argv #当前blender的路径例：[&#39;D:\\\\blender-2.81a\\\\blender.exe&#39;]</span><br></pre></td></tr></table></figure>\n\n<p>遍历列表选中物体：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i in bpy.context.visible_objects:#迭代所有可见物体</span><br><span class=\"line\">\tif i.name &#x3D;&#x3D; &quot;要选物体的名字&quot;:</span><br><span class=\"line\">\t\ti.select_set(state&#x3D;True)</span><br><span class=\"line\">for i in bpy.context.visible_objects:</span><br><span class=\"line\">    if i.type &#x3D;&#x3D; &quot;MESH&quot;:#判断物体类型是模型</span><br><span class=\"line\">        bpy.context.view_layer.objects.active &#x3D; i #当前激活物体定义为i</span><br><span class=\"line\">        bpy.ops.object.mode_set(mode&#x3D;&#39;EDIT&#39;) #编辑模式</span><br><span class=\"line\">        bpy.context.tool_settings.mesh_select_mode &#x3D; (False, True, False)#编辑模式的（点线面）</span><br><span class=\"line\">        bpy.ops.mesh.select_all(action&#x3D;&#39;SELECT&#39;)#全选命令</span><br><span class=\"line\">        bpy.ops.object.mode_set(mode&#x3D;&#39;OBJECT&#39;)#关闭编辑模式</span><br></pre></td></tr></table></figure>"},{"title":"Effective Python","date":"2020-03-10T11:14:04.000Z","_content":"\n\n编写高质量代码的59+91个建议读书笔记\n\n### 第一条\n* 确认自己所用的python版本。\n* 确保该版本与你想使用的python版本相符。\n* 优先使用python3\n\n##### Windows平台下：\n`$python --version`\n![a](Effective-Python/2020-03-07-11-15-23.png)\n\n<!-- more -->\n\n##### 其他程序内：\n* Autodesk Maya:\n![b](Effective-Python/2020-03-07-11-18-24.png)\n\n* Substance Designer:\n![c](Effective-Python/2020-03-07-11-19-36.png)\n注：SD里sys.version_info报错，原因未知\n\n* Houdini：\n![d](Effective-Python/2020-03-07-11-22-33.png)\n\nTips： Python中sys模块还有一个常用功能：\n`sys.path`可以用来找到应用程序内的python编译器位置.\n\n### 第二条\n遵循PEP8 风格指南\n《Python Enhancement Proposal #8》（8号Python增强法案）又叫PEP8,它是针对Python代码格式而编订的风格指南。\n* 使用空格来表示缩进，而不要用制表符（tab）。\n* 和语法相关的每一层缩进都用四个空格表示。\n* 每行的字符数不应超过79。\n* 对于占据多行的长表达式，除了首行之外的其余各行都应该在通常的缩进级别之上再加四个空格。\n* 文件中的代码与函数和类之间应该用两个空行隔开。\n* 在同一个类中，各方法之间应该用一个空行隔开。\n* 在使用下标来获取列表元素、调用函数或给关键字参数赋值的时候，不要再两边添加空格。\n* 为变量赋值的时候，赋值符号的左侧和右侧应该各自写上一个空格，而且只写一个。\n\n命名：PEP8 提倡采用不同的命名风格来编写Python代码中的各个部分,以便再阅读代码时可以根据这些名称看出它们的角色。\n* 函数、变量名及属性应该用小写字母，各单词之间用下划线相连，例如，lowercase_underscore。\n* 受保护的实例属性，应该以单个下划线开头，例如，_leading_underscore.\n* 私有的实例属性，应该以两个下划线开头，例如__double_leading_underscore.\n* 类与异常， 应该以每个单词首字母均大写的形式来命名，例如，CapitalizedWord。\n* 模块级别的常量，应该全部采用大写字母来拼写，各单词之间以下划线连接，例如，ALL_CAPS。\n* 类中的实例方法（instance method），应该把首个参数命名self，以表示该对象自身.\n* 类方法（class method）的首个参数，应该命名cls，以表示该类自身。\n\n表达式和语句《The Zen of Python》（python之禅）中说，每件事都应该有直白的做法，而且最好只有一种。\n* 采用内联形式的否定词 ，而不要把否定词放在整个表达式的前面，例如，应该写 if a is not b 而不是 if not a is b。\n* 不要通过检测长度的方法来判断列表是否为空，而是应该采用if not somelist来判定。\n* 同上条，如果判断列表不为空也是一样的， \n* 不要编写单行的if语句、for循环、while循环及except复合语句，而是应该把这些语句分成多行来书写，以示清晰。\n* import语句应该重视放在文件开头.\n* 引入模块的时候，总是应该使用绝对名称，而不应该根据当前模块的路径来使用相对名称，例如，引入bar包中的foo模块时，应该完成的写出 from bar import foo，而不应该简写为import foo。\n* 如果一定要以相对的名称来编写import语句，那就采用明确的写法:from.import foo。\n* 文件中的那些import语句应该按照顺序划分为三个部分，分别为标准库模块、第三方模块以及自用模块。各import语句应该按照模块的字母顺序来排列。\n\nTips： vscode可以采用pylint来自动检测受测代码是否符合pep8。\nhttps://www.pylint.org/\n\n### 第三条\n##### 了解bytes、str、和unicode的区别\n* python3有两种表示字符序列的类型，bytes和str，前者的实例中包含原始的8位值，后者的实例中包含Unicode字符。\n* python2中也有两种表示字符序列的类型，str和Unicode. 前者包含原始的八位值，后者的实例着包含unicode字符。\n![e](Effective-Python/2020-03-07-14-29-10.png)\n* bytes 类型，是指一堆字节的集合，十六进制表现形式，两个十六进制数构成一个 byte ，以 b 开头的字符串是 bytes 类型。计算机只能存储二进制，字符、图片、视频、音乐等想存到硬盘上，必须以正确的方式编码成二进制后再存，但是转成二进制后不是直接以 0101010 的形式表示的，而是用bytes() 的类型来表示的。\n* 把Unicode字符表示为二进制数据（原始八位值）有很多办法，常见且推荐的编码方式就是UTF-8。\n* 但是python3 的str实例和python2的Unicode实例都没有和特定的二进制编码形式相关联，想要把Unicode字符转换为二进制数据，就必须使用encode方法，想要把二进制数据转化成为Unicode字符，则必须使用decode 方法。\n![f](Effective-Python/2020-03-07-14-34-59.png)\n* 在 Python3 中内存里的字符串是以 Unicode 编码的，Unicode 的其中一个特性就是跟所有语言编码都有映射关系，所以 UTF-8 格式的文件，在 Windows 电脑上若是不能看，就可以把 UTF-8 先解码成 Unicode ，再由 Unicode 编码成 GBK 就可以了。\n![g](Effective-Python/2020-03-07-14-32-20.png)\n##### 字符串的转换\n* 在Python3中，接受str或byts，并总是返回str的方法:\n    ```py\n    def to_str(bytes_or_str):\n        if isinstance(bytes_or_str, bytes):#注意这个函数\n            value = bytes_or_str.decode('utf-8')\n        else:\n            value = bytes_or_str\n        return value\n    ```\n* 接受str或bytes，并总是返回bytes的方法：\n    ```py\n    def to_bytes(bytes_or_str):\n        if isinstance(bytes_or_str, str):\n            value = bytes_or_str.encode('utf-8')\n        else:\n            value = bytes_or_str\n        return value\n    ```\n* 在Python2中，接受str或unicode，并总是返回unicode的方法：\n    ```\n    def to_unicode(unicode_or_str):\n        if isinstance(unicode_or_str, str):\n            value = unicode_or_str.decode('utf-8')\n        else:\n            value = unicode_or_str\n        return value\n    ```\n* 接受str或unicode，并总是返回str的方法：\n    ```\n    def to_str(unicode_or_str):\n        if isinstance(unicode_or_str, unicode):\n            value = unicode_or_str.encode('utf-8')\n        else:\n            value = unicode_or_str\n        return value\n    ```\n##### 推荐的文件操作符\n如果通过open函数获取文件句柄，该句柄会采用UTF-8编码格式来操作文件。\n而在Python2中，文件操作的默认编码格式则是二进制形式。这可能会导致程序出现奇怪的错误。\n例如，向文件中随机写入一些二进制数据。下面这种方法Python2中可以正常运行，但是在Python3中则不行：\n```py\nwith open('/tmp/random.bin', 'w') as f:\n    f.write(os.urandom(10))\n>>> TypeError: must be str, not bytes\n```\n上述情况是因为Python3给open函数添加了名为encoding的新参数，而这个新参数默认值是’utf-8′。这样在文件句柄上进行read和write操作时，系统就要求开发者必须传入包含unicode字符的str实例，而不接受包含二进制数据的bytes实例。\n\n解决这个问题，可以用二进制写入模式(‘wb’)来开启待操作的文件，按照这种方式可同时适配Python2和Python3：\n\n```py\nwith open('/tmp/random.bin', 'wb') as f:\n    f.write(os.urandom(10))\n```\n(读取文件也同理，可使用’rb’模式)\n\n### 第四条\n用辅助函数来取代复杂的表达式\n* 开发者很容易过度运用Python的语法特性，从而写出那种特别复杂并且难以理解的单行表达式。\n* 请把复杂的表达式移入辅助函数中。如果要反复使用相同的逻辑，那就更应该那么做。\n* 使用if/esle表达式，要比用or或者and 这样的Boolean操作符写出的表达式更清晰。\n\n### 第五条\n了解切割序列的方法\npython提供了一种把序列切成小块的写法，这种切片操作很容易四开发者轻易的访问序列中的某些元素所构成的子集。  \n最简单的用法，就是对内置list和bytes进行切割。  \n切割操作还可以延伸到实现了__getitem__和__setitem__这两个特殊方法的python类上，参见28条。\n* 不要写多余的代码。但start索引为零或者end索引为序列长度时，应该将其忽略\n* 切片操作不会计较start或者end索引是否越界，这样我们很容易从前端或者后端开始。\n* 对list赋值时，如果使用切片操作，就会把原列表中处在相关范围内的值替换成新值，即便它们的长度不同也依然可以替换。\n\n### 第六条\n在单词切片操作内，不要同时指定start、 end 和 stride \n* 问题在于采用stride方式进行切片时，经常会出现不符合预期的结果\n* 切割列表时，如果制定了stride，代码就会变得费解。尤其是stride为负值的时候更是如此.\n* 在同一个切片操作内，不要同时使用start、end和stride. 如果确实需要执行这种操作，那就考虑将其拆解为两条赋值语句，其中一条做范围切割，另一条做步进，或者考虑使用内置itertools模块中的islice.\n\ntips：\n`mystring[::-1]#反转字符串`\n\n### 第七条\n用列表推导来取代map和filter\npython提供了一种精炼的写法，可以根据一个列表来制作另外一个列表.这种表达式称为list comprehension （列表推导）\n* 列表推导要比内置的map和filter函数清晰\n* 列表推导可以很跳过输入列表中的某些元素\n* 字典与集也支持推导表达式\n\n### 第八条\n不要使用含有两个以上表达式的列表推导\n* 列表推导支持多级循环，每一级循环也支持多项条件\n* 超过两个表达式的列表推导难以理解，应该尽量避免\nTips：\n```py\nmatrix = [[1,2,3],[4,5,6],[7,8,9]]\nflat = [x for row in matrix for x in row]\nprint(flat)\n>>>[1,2,3,4,5,6,7,8,9]\n```\n\n```py\na = [1,2,3,4,5,6,7,8,9,10]\n#下面两种写法是等效的\n#要从列表中取出大于4的偶数\nb = [x for x in a if x>4 if x %2 ==0]\nc = [x for x in a if x>4 and x%2==0]\n```\n\n### 第九条\n用生成器表达式来改写数据量较大的列表推导\n列表推导的缺点是，对于输入序列中的每个值来说，都要创建一项仅含一项元素的全新列表，但输入数据较大时，可能会消耗大量内存，并导致程序崩溃。\n为了解决此问题，python 提供了生成式表达式\n```py\nit = (len(x) for x in open(temp.txt))\nprint(it)\n>>>\n<generator object <genexpr> at 0x101b81480>\nprint(next(it))\nprint(next(it))\n>>>\n100\n57\n```\n\nTips：\n获取文件每行的字符数\n\n```py\nvalue = [len(x) for x in open(temp.txt)]\nprint(value)\n```\n\n* 当输入的数据量较大时，列表推导可能会因为占用太对内存而出问题。\n* 由生成表达式所返回的迭代器，可以逐次产生输出值，从而避免了内存用量问题。\n* 把某个生成器表达式说返回的迭代器，放在另一个生成器表达式的for子表达式中，即可将二者组合起来。\n* 串在一起的生成器表达式执行速度很快。 \n\n### 第十条\n尽量用enumerate取代range\n在一些列的整数上面迭代，内置的range函数很有用，\n当迭代列表的时候，通常还想知道当前元素在列表中的索引。\n```py\nfor i in range(len(flavor_list)):\n    flavor = flavor_lsit[i]\n    print(\"%d:%s\"%(i+1,flavor))\n```\n这种代码不利于理解，python提供了enumerate来解决此问题。enumerate可以把各种迭代器包装为生成器，以便稍后产生输出值，生成器每次产生一对输出值，前者为循环下标，后者表示从迭代器中获取到的下一个序列元素，这样写出来的代码会非常整洁。\n```py\nfor i ,flavor in enumerate(flavor_list):\n    print(\"%d:%s\"%(i+1,flavor))\n```\n\n* enumerate函数提供了一种精简的写法，可以在遍历迭代器时获知每个元素的索引\n* 尽量用enumerate来改写那种将range与下标访问相结合的序列遍历代码\n* 可以给enumerate 提供第二个参数，已指定开始计数时所用的值（默认为0）\n\n\nTips:\n还可以直接指定enumerate开始计数所用的值。\n```py\nfor i ,flavor in enumerate(flavor_list，1):\n    print(\"%d:%s\"%(i,flavor))\n```\n\n### 第十一条\n用zip函数同时遍历两个迭代器\n\n* 使用for循环\n```py\nnames = ['Cecilia', 'Kufu', 'JayChou']\nletters = [len(n) for n in names]\nlongest_name = None\nmax_letters = 0\n\nfor name, count in zip(names, letters):\n    if count > max_letters:\n        longest_name = name\n        max_letters = count\n>>>\nCecilia\n```\n上面这段代码问题在一，整个循环语句看上去很乱，用下标来访问names和letters会使代码不易阅读。\n改用enumerate可以稍稍缓解这个问题，但仍然不够理想。\n\n* 使用for循环加enumerate\n```py\nnames = ['Cecilia', 'Kufu', 'JayChou']\nletters = [len(n) for n in names]\nlongest_name = None\nmax_letters = 0\n\nfor i, name in enumerate(names)：\n    count =letters[i]\n    if count > max_letters:\n        longest_name = name\n        max_letters = count\n```\n* 使用zip\n```py\nnames = ['Cecilia', 'Kufu', 'JayChou']\nletters = [len(n) for n in names]\nlongest_name = None\nmax_letters = 0\n\nfor name, count in zip(names, letter):\n    if count > max_letters:\n        longest_name = name\n        max_letters = count\n```\n\n* 内置的zip函数可以平行的遍历多个迭代器\n* Python3中的zip相当于生成器，会在遍历过程中逐次产生元组，而Python2中的zip则是直接把这些元组完全生成号，并一次性的返回给整份列表。\n* 如果提供的迭代器长度不等，那么zip就会自动提前终止。\n* itertools 内置模块中的zip_longest函数可以平行的遍历多个迭代器，而不用在乎它们的长度是否相等。\n\n\n### 不要在for和while循环后面写else语块\n\n* python 有种特殊语法，可在 for及 while 循环的内部语句块之后紧跟一个else块。\n* 只有当整个循环主体都没遇到break语句时，循环后面的else块才会执行。\n* 不要再循环后面使用else块，因为在这种写法即不直观，又容易引人误解。\n\n\n\n\n### 引用\nhttps://www.cnblogs.com/lipandeng/p/11162039.html\nhttps://lingyunfx.com/?page_id=152","source":"_posts/Effective-Python.md","raw":"---\ntitle: Effective Python\ndate: 2020-03-10 19:14:04\ntags: python\n---\n\n\n编写高质量代码的59+91个建议读书笔记\n\n### 第一条\n* 确认自己所用的python版本。\n* 确保该版本与你想使用的python版本相符。\n* 优先使用python3\n\n##### Windows平台下：\n`$python --version`\n![a](Effective-Python/2020-03-07-11-15-23.png)\n\n<!-- more -->\n\n##### 其他程序内：\n* Autodesk Maya:\n![b](Effective-Python/2020-03-07-11-18-24.png)\n\n* Substance Designer:\n![c](Effective-Python/2020-03-07-11-19-36.png)\n注：SD里sys.version_info报错，原因未知\n\n* Houdini：\n![d](Effective-Python/2020-03-07-11-22-33.png)\n\nTips： Python中sys模块还有一个常用功能：\n`sys.path`可以用来找到应用程序内的python编译器位置.\n\n### 第二条\n遵循PEP8 风格指南\n《Python Enhancement Proposal #8》（8号Python增强法案）又叫PEP8,它是针对Python代码格式而编订的风格指南。\n* 使用空格来表示缩进，而不要用制表符（tab）。\n* 和语法相关的每一层缩进都用四个空格表示。\n* 每行的字符数不应超过79。\n* 对于占据多行的长表达式，除了首行之外的其余各行都应该在通常的缩进级别之上再加四个空格。\n* 文件中的代码与函数和类之间应该用两个空行隔开。\n* 在同一个类中，各方法之间应该用一个空行隔开。\n* 在使用下标来获取列表元素、调用函数或给关键字参数赋值的时候，不要再两边添加空格。\n* 为变量赋值的时候，赋值符号的左侧和右侧应该各自写上一个空格，而且只写一个。\n\n命名：PEP8 提倡采用不同的命名风格来编写Python代码中的各个部分,以便再阅读代码时可以根据这些名称看出它们的角色。\n* 函数、变量名及属性应该用小写字母，各单词之间用下划线相连，例如，lowercase_underscore。\n* 受保护的实例属性，应该以单个下划线开头，例如，_leading_underscore.\n* 私有的实例属性，应该以两个下划线开头，例如__double_leading_underscore.\n* 类与异常， 应该以每个单词首字母均大写的形式来命名，例如，CapitalizedWord。\n* 模块级别的常量，应该全部采用大写字母来拼写，各单词之间以下划线连接，例如，ALL_CAPS。\n* 类中的实例方法（instance method），应该把首个参数命名self，以表示该对象自身.\n* 类方法（class method）的首个参数，应该命名cls，以表示该类自身。\n\n表达式和语句《The Zen of Python》（python之禅）中说，每件事都应该有直白的做法，而且最好只有一种。\n* 采用内联形式的否定词 ，而不要把否定词放在整个表达式的前面，例如，应该写 if a is not b 而不是 if not a is b。\n* 不要通过检测长度的方法来判断列表是否为空，而是应该采用if not somelist来判定。\n* 同上条，如果判断列表不为空也是一样的， \n* 不要编写单行的if语句、for循环、while循环及except复合语句，而是应该把这些语句分成多行来书写，以示清晰。\n* import语句应该重视放在文件开头.\n* 引入模块的时候，总是应该使用绝对名称，而不应该根据当前模块的路径来使用相对名称，例如，引入bar包中的foo模块时，应该完成的写出 from bar import foo，而不应该简写为import foo。\n* 如果一定要以相对的名称来编写import语句，那就采用明确的写法:from.import foo。\n* 文件中的那些import语句应该按照顺序划分为三个部分，分别为标准库模块、第三方模块以及自用模块。各import语句应该按照模块的字母顺序来排列。\n\nTips： vscode可以采用pylint来自动检测受测代码是否符合pep8。\nhttps://www.pylint.org/\n\n### 第三条\n##### 了解bytes、str、和unicode的区别\n* python3有两种表示字符序列的类型，bytes和str，前者的实例中包含原始的8位值，后者的实例中包含Unicode字符。\n* python2中也有两种表示字符序列的类型，str和Unicode. 前者包含原始的八位值，后者的实例着包含unicode字符。\n![e](Effective-Python/2020-03-07-14-29-10.png)\n* bytes 类型，是指一堆字节的集合，十六进制表现形式，两个十六进制数构成一个 byte ，以 b 开头的字符串是 bytes 类型。计算机只能存储二进制，字符、图片、视频、音乐等想存到硬盘上，必须以正确的方式编码成二进制后再存，但是转成二进制后不是直接以 0101010 的形式表示的，而是用bytes() 的类型来表示的。\n* 把Unicode字符表示为二进制数据（原始八位值）有很多办法，常见且推荐的编码方式就是UTF-8。\n* 但是python3 的str实例和python2的Unicode实例都没有和特定的二进制编码形式相关联，想要把Unicode字符转换为二进制数据，就必须使用encode方法，想要把二进制数据转化成为Unicode字符，则必须使用decode 方法。\n![f](Effective-Python/2020-03-07-14-34-59.png)\n* 在 Python3 中内存里的字符串是以 Unicode 编码的，Unicode 的其中一个特性就是跟所有语言编码都有映射关系，所以 UTF-8 格式的文件，在 Windows 电脑上若是不能看，就可以把 UTF-8 先解码成 Unicode ，再由 Unicode 编码成 GBK 就可以了。\n![g](Effective-Python/2020-03-07-14-32-20.png)\n##### 字符串的转换\n* 在Python3中，接受str或byts，并总是返回str的方法:\n    ```py\n    def to_str(bytes_or_str):\n        if isinstance(bytes_or_str, bytes):#注意这个函数\n            value = bytes_or_str.decode('utf-8')\n        else:\n            value = bytes_or_str\n        return value\n    ```\n* 接受str或bytes，并总是返回bytes的方法：\n    ```py\n    def to_bytes(bytes_or_str):\n        if isinstance(bytes_or_str, str):\n            value = bytes_or_str.encode('utf-8')\n        else:\n            value = bytes_or_str\n        return value\n    ```\n* 在Python2中，接受str或unicode，并总是返回unicode的方法：\n    ```\n    def to_unicode(unicode_or_str):\n        if isinstance(unicode_or_str, str):\n            value = unicode_or_str.decode('utf-8')\n        else:\n            value = unicode_or_str\n        return value\n    ```\n* 接受str或unicode，并总是返回str的方法：\n    ```\n    def to_str(unicode_or_str):\n        if isinstance(unicode_or_str, unicode):\n            value = unicode_or_str.encode('utf-8')\n        else:\n            value = unicode_or_str\n        return value\n    ```\n##### 推荐的文件操作符\n如果通过open函数获取文件句柄，该句柄会采用UTF-8编码格式来操作文件。\n而在Python2中，文件操作的默认编码格式则是二进制形式。这可能会导致程序出现奇怪的错误。\n例如，向文件中随机写入一些二进制数据。下面这种方法Python2中可以正常运行，但是在Python3中则不行：\n```py\nwith open('/tmp/random.bin', 'w') as f:\n    f.write(os.urandom(10))\n>>> TypeError: must be str, not bytes\n```\n上述情况是因为Python3给open函数添加了名为encoding的新参数，而这个新参数默认值是’utf-8′。这样在文件句柄上进行read和write操作时，系统就要求开发者必须传入包含unicode字符的str实例，而不接受包含二进制数据的bytes实例。\n\n解决这个问题，可以用二进制写入模式(‘wb’)来开启待操作的文件，按照这种方式可同时适配Python2和Python3：\n\n```py\nwith open('/tmp/random.bin', 'wb') as f:\n    f.write(os.urandom(10))\n```\n(读取文件也同理，可使用’rb’模式)\n\n### 第四条\n用辅助函数来取代复杂的表达式\n* 开发者很容易过度运用Python的语法特性，从而写出那种特别复杂并且难以理解的单行表达式。\n* 请把复杂的表达式移入辅助函数中。如果要反复使用相同的逻辑，那就更应该那么做。\n* 使用if/esle表达式，要比用or或者and 这样的Boolean操作符写出的表达式更清晰。\n\n### 第五条\n了解切割序列的方法\npython提供了一种把序列切成小块的写法，这种切片操作很容易四开发者轻易的访问序列中的某些元素所构成的子集。  \n最简单的用法，就是对内置list和bytes进行切割。  \n切割操作还可以延伸到实现了__getitem__和__setitem__这两个特殊方法的python类上，参见28条。\n* 不要写多余的代码。但start索引为零或者end索引为序列长度时，应该将其忽略\n* 切片操作不会计较start或者end索引是否越界，这样我们很容易从前端或者后端开始。\n* 对list赋值时，如果使用切片操作，就会把原列表中处在相关范围内的值替换成新值，即便它们的长度不同也依然可以替换。\n\n### 第六条\n在单词切片操作内，不要同时指定start、 end 和 stride \n* 问题在于采用stride方式进行切片时，经常会出现不符合预期的结果\n* 切割列表时，如果制定了stride，代码就会变得费解。尤其是stride为负值的时候更是如此.\n* 在同一个切片操作内，不要同时使用start、end和stride. 如果确实需要执行这种操作，那就考虑将其拆解为两条赋值语句，其中一条做范围切割，另一条做步进，或者考虑使用内置itertools模块中的islice.\n\ntips：\n`mystring[::-1]#反转字符串`\n\n### 第七条\n用列表推导来取代map和filter\npython提供了一种精炼的写法，可以根据一个列表来制作另外一个列表.这种表达式称为list comprehension （列表推导）\n* 列表推导要比内置的map和filter函数清晰\n* 列表推导可以很跳过输入列表中的某些元素\n* 字典与集也支持推导表达式\n\n### 第八条\n不要使用含有两个以上表达式的列表推导\n* 列表推导支持多级循环，每一级循环也支持多项条件\n* 超过两个表达式的列表推导难以理解，应该尽量避免\nTips：\n```py\nmatrix = [[1,2,3],[4,5,6],[7,8,9]]\nflat = [x for row in matrix for x in row]\nprint(flat)\n>>>[1,2,3,4,5,6,7,8,9]\n```\n\n```py\na = [1,2,3,4,5,6,7,8,9,10]\n#下面两种写法是等效的\n#要从列表中取出大于4的偶数\nb = [x for x in a if x>4 if x %2 ==0]\nc = [x for x in a if x>4 and x%2==0]\n```\n\n### 第九条\n用生成器表达式来改写数据量较大的列表推导\n列表推导的缺点是，对于输入序列中的每个值来说，都要创建一项仅含一项元素的全新列表，但输入数据较大时，可能会消耗大量内存，并导致程序崩溃。\n为了解决此问题，python 提供了生成式表达式\n```py\nit = (len(x) for x in open(temp.txt))\nprint(it)\n>>>\n<generator object <genexpr> at 0x101b81480>\nprint(next(it))\nprint(next(it))\n>>>\n100\n57\n```\n\nTips：\n获取文件每行的字符数\n\n```py\nvalue = [len(x) for x in open(temp.txt)]\nprint(value)\n```\n\n* 当输入的数据量较大时，列表推导可能会因为占用太对内存而出问题。\n* 由生成表达式所返回的迭代器，可以逐次产生输出值，从而避免了内存用量问题。\n* 把某个生成器表达式说返回的迭代器，放在另一个生成器表达式的for子表达式中，即可将二者组合起来。\n* 串在一起的生成器表达式执行速度很快。 \n\n### 第十条\n尽量用enumerate取代range\n在一些列的整数上面迭代，内置的range函数很有用，\n当迭代列表的时候，通常还想知道当前元素在列表中的索引。\n```py\nfor i in range(len(flavor_list)):\n    flavor = flavor_lsit[i]\n    print(\"%d:%s\"%(i+1,flavor))\n```\n这种代码不利于理解，python提供了enumerate来解决此问题。enumerate可以把各种迭代器包装为生成器，以便稍后产生输出值，生成器每次产生一对输出值，前者为循环下标，后者表示从迭代器中获取到的下一个序列元素，这样写出来的代码会非常整洁。\n```py\nfor i ,flavor in enumerate(flavor_list):\n    print(\"%d:%s\"%(i+1,flavor))\n```\n\n* enumerate函数提供了一种精简的写法，可以在遍历迭代器时获知每个元素的索引\n* 尽量用enumerate来改写那种将range与下标访问相结合的序列遍历代码\n* 可以给enumerate 提供第二个参数，已指定开始计数时所用的值（默认为0）\n\n\nTips:\n还可以直接指定enumerate开始计数所用的值。\n```py\nfor i ,flavor in enumerate(flavor_list，1):\n    print(\"%d:%s\"%(i,flavor))\n```\n\n### 第十一条\n用zip函数同时遍历两个迭代器\n\n* 使用for循环\n```py\nnames = ['Cecilia', 'Kufu', 'JayChou']\nletters = [len(n) for n in names]\nlongest_name = None\nmax_letters = 0\n\nfor name, count in zip(names, letters):\n    if count > max_letters:\n        longest_name = name\n        max_letters = count\n>>>\nCecilia\n```\n上面这段代码问题在一，整个循环语句看上去很乱，用下标来访问names和letters会使代码不易阅读。\n改用enumerate可以稍稍缓解这个问题，但仍然不够理想。\n\n* 使用for循环加enumerate\n```py\nnames = ['Cecilia', 'Kufu', 'JayChou']\nletters = [len(n) for n in names]\nlongest_name = None\nmax_letters = 0\n\nfor i, name in enumerate(names)：\n    count =letters[i]\n    if count > max_letters:\n        longest_name = name\n        max_letters = count\n```\n* 使用zip\n```py\nnames = ['Cecilia', 'Kufu', 'JayChou']\nletters = [len(n) for n in names]\nlongest_name = None\nmax_letters = 0\n\nfor name, count in zip(names, letter):\n    if count > max_letters:\n        longest_name = name\n        max_letters = count\n```\n\n* 内置的zip函数可以平行的遍历多个迭代器\n* Python3中的zip相当于生成器，会在遍历过程中逐次产生元组，而Python2中的zip则是直接把这些元组完全生成号，并一次性的返回给整份列表。\n* 如果提供的迭代器长度不等，那么zip就会自动提前终止。\n* itertools 内置模块中的zip_longest函数可以平行的遍历多个迭代器，而不用在乎它们的长度是否相等。\n\n\n### 不要在for和while循环后面写else语块\n\n* python 有种特殊语法，可在 for及 while 循环的内部语句块之后紧跟一个else块。\n* 只有当整个循环主体都没遇到break语句时，循环后面的else块才会执行。\n* 不要再循环后面使用else块，因为在这种写法即不直观，又容易引人误解。\n\n\n\n\n### 引用\nhttps://www.cnblogs.com/lipandeng/p/11162039.html\nhttps://lingyunfx.com/?page_id=152","slug":"Effective-Python","published":1,"updated":"2020-03-11T02:25:37.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7rbphz60003w8p4gr0aanw4","content":"<p>编写高质量代码的59+91个建议读书笔记</p>\n<h3 id=\"第一条\"><a href=\"#第一条\" class=\"headerlink\" title=\"第一条\"></a>第一条</h3><ul>\n<li>确认自己所用的python版本。</li>\n<li>确保该版本与你想使用的python版本相符。</li>\n<li>优先使用python3</li>\n</ul>\n<h5 id=\"Windows平台下：\"><a href=\"#Windows平台下：\" class=\"headerlink\" title=\"Windows平台下：\"></a>Windows平台下：</h5><p><code>$python --version</code><br><img src=\"/2020/03/10/Effective-Python/2020-03-07-11-15-23.png\" alt=\"a\"></p>\n<a id=\"more\"></a>\n\n<h5 id=\"其他程序内：\"><a href=\"#其他程序内：\" class=\"headerlink\" title=\"其他程序内：\"></a>其他程序内：</h5><ul>\n<li><p>Autodesk Maya:<br><img src=\"/2020/03/10/Effective-Python/2020-03-07-11-18-24.png\" alt=\"b\"></p>\n</li>\n<li><p>Substance Designer:<br><img src=\"/2020/03/10/Effective-Python/2020-03-07-11-19-36.png\" alt=\"c\"><br>注：SD里sys.version_info报错，原因未知</p>\n</li>\n<li><p>Houdini：<br><img src=\"/2020/03/10/Effective-Python/2020-03-07-11-22-33.png\" alt=\"d\"></p>\n</li>\n</ul>\n<p>Tips： Python中sys模块还有一个常用功能：<br><code>sys.path</code>可以用来找到应用程序内的python编译器位置.</p>\n<h3 id=\"第二条\"><a href=\"#第二条\" class=\"headerlink\" title=\"第二条\"></a>第二条</h3><p>遵循PEP8 风格指南<br>《Python Enhancement Proposal #8》（8号Python增强法案）又叫PEP8,它是针对Python代码格式而编订的风格指南。</p>\n<ul>\n<li>使用空格来表示缩进，而不要用制表符（tab）。</li>\n<li>和语法相关的每一层缩进都用四个空格表示。</li>\n<li>每行的字符数不应超过79。</li>\n<li>对于占据多行的长表达式，除了首行之外的其余各行都应该在通常的缩进级别之上再加四个空格。</li>\n<li>文件中的代码与函数和类之间应该用两个空行隔开。</li>\n<li>在同一个类中，各方法之间应该用一个空行隔开。</li>\n<li>在使用下标来获取列表元素、调用函数或给关键字参数赋值的时候，不要再两边添加空格。</li>\n<li>为变量赋值的时候，赋值符号的左侧和右侧应该各自写上一个空格，而且只写一个。</li>\n</ul>\n<p>命名：PEP8 提倡采用不同的命名风格来编写Python代码中的各个部分,以便再阅读代码时可以根据这些名称看出它们的角色。</p>\n<ul>\n<li>函数、变量名及属性应该用小写字母，各单词之间用下划线相连，例如，lowercase_underscore。</li>\n<li>受保护的实例属性，应该以单个下划线开头，例如，_leading_underscore.</li>\n<li>私有的实例属性，应该以两个下划线开头，例如__double_leading_underscore.</li>\n<li>类与异常， 应该以每个单词首字母均大写的形式来命名，例如，CapitalizedWord。</li>\n<li>模块级别的常量，应该全部采用大写字母来拼写，各单词之间以下划线连接，例如，ALL_CAPS。</li>\n<li>类中的实例方法（instance method），应该把首个参数命名self，以表示该对象自身.</li>\n<li>类方法（class method）的首个参数，应该命名cls，以表示该类自身。</li>\n</ul>\n<p>表达式和语句《The Zen of Python》（python之禅）中说，每件事都应该有直白的做法，而且最好只有一种。</p>\n<ul>\n<li>采用内联形式的否定词 ，而不要把否定词放在整个表达式的前面，例如，应该写 if a is not b 而不是 if not a is b。</li>\n<li>不要通过检测长度的方法来判断列表是否为空，而是应该采用if not somelist来判定。</li>\n<li>同上条，如果判断列表不为空也是一样的， </li>\n<li>不要编写单行的if语句、for循环、while循环及except复合语句，而是应该把这些语句分成多行来书写，以示清晰。</li>\n<li>import语句应该重视放在文件开头.</li>\n<li>引入模块的时候，总是应该使用绝对名称，而不应该根据当前模块的路径来使用相对名称，例如，引入bar包中的foo模块时，应该完成的写出 from bar import foo，而不应该简写为import foo。</li>\n<li>如果一定要以相对的名称来编写import语句，那就采用明确的写法:from.import foo。</li>\n<li>文件中的那些import语句应该按照顺序划分为三个部分，分别为标准库模块、第三方模块以及自用模块。各import语句应该按照模块的字母顺序来排列。</li>\n</ul>\n<p>Tips： vscode可以采用pylint来自动检测受测代码是否符合pep8。<br><a href=\"https://www.pylint.org/\" target=\"_blank\" rel=\"noopener\">https://www.pylint.org/</a></p>\n<h3 id=\"第三条\"><a href=\"#第三条\" class=\"headerlink\" title=\"第三条\"></a>第三条</h3><h5 id=\"了解bytes、str、和unicode的区别\"><a href=\"#了解bytes、str、和unicode的区别\" class=\"headerlink\" title=\"了解bytes、str、和unicode的区别\"></a>了解bytes、str、和unicode的区别</h5><ul>\n<li>python3有两种表示字符序列的类型，bytes和str，前者的实例中包含原始的8位值，后者的实例中包含Unicode字符。</li>\n<li>python2中也有两种表示字符序列的类型，str和Unicode. 前者包含原始的八位值，后者的实例着包含unicode字符。<br><img src=\"/2020/03/10/Effective-Python/2020-03-07-14-29-10.png\" alt=\"e\"></li>\n<li>bytes 类型，是指一堆字节的集合，十六进制表现形式，两个十六进制数构成一个 byte ，以 b 开头的字符串是 bytes 类型。计算机只能存储二进制，字符、图片、视频、音乐等想存到硬盘上，必须以正确的方式编码成二进制后再存，但是转成二进制后不是直接以 0101010 的形式表示的，而是用bytes() 的类型来表示的。</li>\n<li>把Unicode字符表示为二进制数据（原始八位值）有很多办法，常见且推荐的编码方式就是UTF-8。</li>\n<li>但是python3 的str实例和python2的Unicode实例都没有和特定的二进制编码形式相关联，想要把Unicode字符转换为二进制数据，就必须使用encode方法，想要把二进制数据转化成为Unicode字符，则必须使用decode 方法。<br><img src=\"/2020/03/10/Effective-Python/2020-03-07-14-34-59.png\" alt=\"f\"></li>\n<li>在 Python3 中内存里的字符串是以 Unicode 编码的，Unicode 的其中一个特性就是跟所有语言编码都有映射关系，所以 UTF-8 格式的文件，在 Windows 电脑上若是不能看，就可以把 UTF-8 先解码成 Unicode ，再由 Unicode 编码成 GBK 就可以了。<br><img src=\"/2020/03/10/Effective-Python/2020-03-07-14-32-20.png\" alt=\"g\"><h5 id=\"字符串的转换\"><a href=\"#字符串的转换\" class=\"headerlink\" title=\"字符串的转换\"></a>字符串的转换</h5></li>\n<li>在Python3中，接受str或byts，并总是返回str的方法:  <figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_str</span><span class=\"params\">(bytes_or_str)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> isinstance(bytes_or_str, bytes):<span class=\"comment\">#注意这个函数</span></span><br><span class=\"line\">        value = bytes_or_str.decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        value = bytes_or_str</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br></pre></td></tr></table></figure></li>\n<li>接受str或bytes，并总是返回bytes的方法：  <figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_bytes</span><span class=\"params\">(bytes_or_str)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> isinstance(bytes_or_str, str):</span><br><span class=\"line\">        value = bytes_or_str.encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        value = bytes_or_str</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br></pre></td></tr></table></figure></li>\n<li>在Python2中，接受str或unicode，并总是返回unicode的方法：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def to_unicode(unicode_or_str):</span><br><span class=\"line\">    if isinstance(unicode_or_str, str):</span><br><span class=\"line\">        value &#x3D; unicode_or_str.decode(&#39;utf-8&#39;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        value &#x3D; unicode_or_str</span><br><span class=\"line\">    return value</span><br></pre></td></tr></table></figure></li>\n<li>接受str或unicode，并总是返回str的方法：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def to_str(unicode_or_str):</span><br><span class=\"line\">    if isinstance(unicode_or_str, unicode):</span><br><span class=\"line\">        value &#x3D; unicode_or_str.encode(&#39;utf-8&#39;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        value &#x3D; unicode_or_str</span><br><span class=\"line\">    return value</span><br></pre></td></tr></table></figure>\n<h5 id=\"推荐的文件操作符\"><a href=\"#推荐的文件操作符\" class=\"headerlink\" title=\"推荐的文件操作符\"></a>推荐的文件操作符</h5>如果通过open函数获取文件句柄，该句柄会采用UTF-8编码格式来操作文件。<br>而在Python2中，文件操作的默认编码格式则是二进制形式。这可能会导致程序出现奇怪的错误。<br>例如，向文件中随机写入一些二进制数据。下面这种方法Python2中可以正常运行，但是在Python3中则不行：<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'/tmp/random.bin'</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(os.urandom(<span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>TypeError: must be str, <span class=\"keyword\">not</span> bytes</span><br></pre></td></tr></table></figure>\n上述情况是因为Python3给open函数添加了名为encoding的新参数，而这个新参数默认值是’utf-8′。这样在文件句柄上进行read和write操作时，系统就要求开发者必须传入包含unicode字符的str实例，而不接受包含二进制数据的bytes实例。</li>\n</ul>\n<p>解决这个问题，可以用二进制写入模式(‘wb’)来开启待操作的文件，按照这种方式可同时适配Python2和Python3：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'/tmp/random.bin'</span>, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(os.urandom(<span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n<p>(读取文件也同理，可使用’rb’模式)</p>\n<h3 id=\"第四条\"><a href=\"#第四条\" class=\"headerlink\" title=\"第四条\"></a>第四条</h3><p>用辅助函数来取代复杂的表达式</p>\n<ul>\n<li>开发者很容易过度运用Python的语法特性，从而写出那种特别复杂并且难以理解的单行表达式。</li>\n<li>请把复杂的表达式移入辅助函数中。如果要反复使用相同的逻辑，那就更应该那么做。</li>\n<li>使用if/esle表达式，要比用or或者and 这样的Boolean操作符写出的表达式更清晰。</li>\n</ul>\n<h3 id=\"第五条\"><a href=\"#第五条\" class=\"headerlink\" title=\"第五条\"></a>第五条</h3><p>了解切割序列的方法<br>python提供了一种把序列切成小块的写法，这种切片操作很容易四开发者轻易的访问序列中的某些元素所构成的子集。<br>最简单的用法，就是对内置list和bytes进行切割。<br>切割操作还可以延伸到实现了<strong>getitem</strong>和<strong>setitem</strong>这两个特殊方法的python类上，参见28条。</p>\n<ul>\n<li>不要写多余的代码。但start索引为零或者end索引为序列长度时，应该将其忽略</li>\n<li>切片操作不会计较start或者end索引是否越界，这样我们很容易从前端或者后端开始。</li>\n<li>对list赋值时，如果使用切片操作，就会把原列表中处在相关范围内的值替换成新值，即便它们的长度不同也依然可以替换。</li>\n</ul>\n<h3 id=\"第六条\"><a href=\"#第六条\" class=\"headerlink\" title=\"第六条\"></a>第六条</h3><p>在单词切片操作内，不要同时指定start、 end 和 stride </p>\n<ul>\n<li>问题在于采用stride方式进行切片时，经常会出现不符合预期的结果</li>\n<li>切割列表时，如果制定了stride，代码就会变得费解。尤其是stride为负值的时候更是如此.</li>\n<li>在同一个切片操作内，不要同时使用start、end和stride. 如果确实需要执行这种操作，那就考虑将其拆解为两条赋值语句，其中一条做范围切割，另一条做步进，或者考虑使用内置itertools模块中的islice.</li>\n</ul>\n<p>tips：<br><code>mystring[::-1]#反转字符串</code></p>\n<h3 id=\"第七条\"><a href=\"#第七条\" class=\"headerlink\" title=\"第七条\"></a>第七条</h3><p>用列表推导来取代map和filter<br>python提供了一种精炼的写法，可以根据一个列表来制作另外一个列表.这种表达式称为list comprehension （列表推导）</p>\n<ul>\n<li>列表推导要比内置的map和filter函数清晰</li>\n<li>列表推导可以很跳过输入列表中的某些元素</li>\n<li>字典与集也支持推导表达式</li>\n</ul>\n<h3 id=\"第八条\"><a href=\"#第八条\" class=\"headerlink\" title=\"第八条\"></a>第八条</h3><p>不要使用含有两个以上表达式的列表推导</p>\n<ul>\n<li>列表推导支持多级循环，每一级循环也支持多项条件</li>\n<li>超过两个表达式的列表推导难以理解，应该尽量避免<br>Tips：<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">matrix = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>],[<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]]</span><br><span class=\"line\">flat = [x <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> matrix <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> row]</span><br><span class=\"line\">print(flat)</span><br><span class=\"line\">&gt;&gt;&gt;[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>]</span><br><span class=\"line\"><span class=\"comment\">#下面两种写法是等效的</span></span><br><span class=\"line\"><span class=\"comment\">#要从列表中取出大于4的偶数</span></span><br><span class=\"line\">b = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> a <span class=\"keyword\">if</span> x&gt;<span class=\"number\">4</span> <span class=\"keyword\">if</span> x %<span class=\"number\">2</span> ==<span class=\"number\">0</span>]</span><br><span class=\"line\">c = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> a <span class=\"keyword\">if</span> x&gt;<span class=\"number\">4</span> <span class=\"keyword\">and</span> x%<span class=\"number\">2</span>==<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第九条\"><a href=\"#第九条\" class=\"headerlink\" title=\"第九条\"></a>第九条</h3><p>用生成器表达式来改写数据量较大的列表推导<br>列表推导的缺点是，对于输入序列中的每个值来说，都要创建一项仅含一项元素的全新列表，但输入数据较大时，可能会消耗大量内存，并导致程序崩溃。<br>为了解决此问题，python 提供了生成式表达式</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it = (len(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> open(temp.txt))</span><br><span class=\"line\">print(it)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">&lt;generator object &lt;genexpr&gt; at <span class=\"number\">0x101b81480</span>&gt;</span><br><span class=\"line\">print(next(it))</span><br><span class=\"line\">print(next(it))</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">57</span></span><br></pre></td></tr></table></figure>\n\n<p>Tips：<br>获取文件每行的字符数</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value = [len(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> open(temp.txt)]</span><br><span class=\"line\">print(value)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当输入的数据量较大时，列表推导可能会因为占用太对内存而出问题。</li>\n<li>由生成表达式所返回的迭代器，可以逐次产生输出值，从而避免了内存用量问题。</li>\n<li>把某个生成器表达式说返回的迭代器，放在另一个生成器表达式的for子表达式中，即可将二者组合起来。</li>\n<li>串在一起的生成器表达式执行速度很快。 </li>\n</ul>\n<h3 id=\"第十条\"><a href=\"#第十条\" class=\"headerlink\" title=\"第十条\"></a>第十条</h3><p>尽量用enumerate取代range<br>在一些列的整数上面迭代，内置的range函数很有用，<br>当迭代列表的时候，通常还想知道当前元素在列表中的索引。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(flavor_list)):</span><br><span class=\"line\">    flavor = flavor_lsit[i]</span><br><span class=\"line\">    print(<span class=\"string\">\"%d:%s\"</span>%(i+<span class=\"number\">1</span>,flavor))</span><br></pre></td></tr></table></figure>\n<p>这种代码不利于理解，python提供了enumerate来解决此问题。enumerate可以把各种迭代器包装为生成器，以便稍后产生输出值，生成器每次产生一对输出值，前者为循环下标，后者表示从迭代器中获取到的下一个序列元素，这样写出来的代码会非常整洁。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i ,flavor <span class=\"keyword\">in</span> enumerate(flavor_list):</span><br><span class=\"line\">    print(<span class=\"string\">\"%d:%s\"</span>%(i+<span class=\"number\">1</span>,flavor))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>enumerate函数提供了一种精简的写法，可以在遍历迭代器时获知每个元素的索引</li>\n<li>尽量用enumerate来改写那种将range与下标访问相结合的序列遍历代码</li>\n<li>可以给enumerate 提供第二个参数，已指定开始计数时所用的值（默认为0）</li>\n</ul>\n<p>Tips:<br>还可以直接指定enumerate开始计数所用的值。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i ,flavor <span class=\"keyword\">in</span> enumerate(flavor_list，<span class=\"number\">1</span>):</span><br><span class=\"line\">    print(<span class=\"string\">\"%d:%s\"</span>%(i,flavor))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第十一条\"><a href=\"#第十一条\" class=\"headerlink\" title=\"第十一条\"></a>第十一条</h3><p>用zip函数同时遍历两个迭代器</p>\n<ul>\n<li><p>使用for循环</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">names = [<span class=\"string\">'Cecilia'</span>, <span class=\"string\">'Kufu'</span>, <span class=\"string\">'JayChou'</span>]</span><br><span class=\"line\">letters = [len(n) <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> names]</span><br><span class=\"line\">longest_name = <span class=\"literal\">None</span></span><br><span class=\"line\">max_letters = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> name, count <span class=\"keyword\">in</span> zip(names, letters):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> count &gt; max_letters:</span><br><span class=\"line\">        longest_name = name</span><br><span class=\"line\">        max_letters = count</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">Cecilia</span><br></pre></td></tr></table></figure>\n<p>上面这段代码问题在一，整个循环语句看上去很乱，用下标来访问names和letters会使代码不易阅读。<br>改用enumerate可以稍稍缓解这个问题，但仍然不够理想。</p>\n</li>\n<li><p>使用for循环加enumerate</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">names = [<span class=\"string\">'Cecilia'</span>, <span class=\"string\">'Kufu'</span>, <span class=\"string\">'JayChou'</span>]</span><br><span class=\"line\">letters = [len(n) <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> names]</span><br><span class=\"line\">longest_name = <span class=\"literal\">None</span></span><br><span class=\"line\">max_letters = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i, name <span class=\"keyword\">in</span> enumerate(names)：</span><br><span class=\"line\">    count =letters[i]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> count &gt; max_letters:</span><br><span class=\"line\">        longest_name = name</span><br><span class=\"line\">        max_letters = count</span><br></pre></td></tr></table></figure></li>\n<li><p>使用zip</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">names = [<span class=\"string\">'Cecilia'</span>, <span class=\"string\">'Kufu'</span>, <span class=\"string\">'JayChou'</span>]</span><br><span class=\"line\">letters = [len(n) <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> names]</span><br><span class=\"line\">longest_name = <span class=\"literal\">None</span></span><br><span class=\"line\">max_letters = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> name, count <span class=\"keyword\">in</span> zip(names, letter):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> count &gt; max_letters:</span><br><span class=\"line\">        longest_name = name</span><br><span class=\"line\">        max_letters = count</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>内置的zip函数可以平行的遍历多个迭代器</p>\n</li>\n<li><p>Python3中的zip相当于生成器，会在遍历过程中逐次产生元组，而Python2中的zip则是直接把这些元组完全生成号，并一次性的返回给整份列表。</p>\n</li>\n<li><p>如果提供的迭代器长度不等，那么zip就会自动提前终止。</p>\n</li>\n<li><p>itertools 内置模块中的zip_longest函数可以平行的遍历多个迭代器，而不用在乎它们的长度是否相等。</p>\n</li>\n</ul>\n<h3 id=\"不要在for和while循环后面写else语块\"><a href=\"#不要在for和while循环后面写else语块\" class=\"headerlink\" title=\"不要在for和while循环后面写else语块\"></a>不要在for和while循环后面写else语块</h3><ul>\n<li>python 有种特殊语法，可在 for及 while 循环的内部语句块之后紧跟一个else块。</li>\n<li>只有当整个循环主体都没遇到break语句时，循环后面的else块才会执行。</li>\n<li>不要再循环后面使用else块，因为在这种写法即不直观，又容易引人误解。</li>\n</ul>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p><a href=\"https://www.cnblogs.com/lipandeng/p/11162039.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/lipandeng/p/11162039.html</a><br><a href=\"https://lingyunfx.com/?page_id=152\" target=\"_blank\" rel=\"noopener\">https://lingyunfx.com/?page_id=152</a></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#2d6b96","paginator":"#6AA7D2","button_hover":"#3B8BC4","text_selection":"#6AA7D2","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#6AA7D2","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"文章":"/","归档":"/archives"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":true,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":null,"top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2013,"footer_custom_text":"Hi, welcome to my <a href=\"https://sunyuxianggit.github.io/\">blog</a>!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":true,"url":"https://github.com/sunyuxianggit","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"SunYuxiangのBlog","subtitle":"好记性,不如烂笔头.今天你要写点什么？","description":"","author":"Sun Yuxiang","language":"zh-Hans","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/sunyuxianggit/sunyuxianggit.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false}}}}},"excerpt":"<p>编写高质量代码的59+91个建议读书笔记</p>\n<h3 id=\"第一条\"><a href=\"#第一条\" class=\"headerlink\" title=\"第一条\"></a>第一条</h3><ul>\n<li>确认自己所用的python版本。</li>\n<li>确保该版本与你想使用的python版本相符。</li>\n<li>优先使用python3</li>\n</ul>\n<h5 id=\"Windows平台下：\"><a href=\"#Windows平台下：\" class=\"headerlink\" title=\"Windows平台下：\"></a>Windows平台下：</h5><p><code>$python --version</code><br><img src=\"/2020/03/10/Effective-Python/2020-03-07-11-15-23.png\" alt=\"a\"></p>","more":"<h5 id=\"其他程序内：\"><a href=\"#其他程序内：\" class=\"headerlink\" title=\"其他程序内：\"></a>其他程序内：</h5><ul>\n<li><p>Autodesk Maya:<br><img src=\"/2020/03/10/Effective-Python/2020-03-07-11-18-24.png\" alt=\"b\"></p>\n</li>\n<li><p>Substance Designer:<br><img src=\"/2020/03/10/Effective-Python/2020-03-07-11-19-36.png\" alt=\"c\"><br>注：SD里sys.version_info报错，原因未知</p>\n</li>\n<li><p>Houdini：<br><img src=\"/2020/03/10/Effective-Python/2020-03-07-11-22-33.png\" alt=\"d\"></p>\n</li>\n</ul>\n<p>Tips： Python中sys模块还有一个常用功能：<br><code>sys.path</code>可以用来找到应用程序内的python编译器位置.</p>\n<h3 id=\"第二条\"><a href=\"#第二条\" class=\"headerlink\" title=\"第二条\"></a>第二条</h3><p>遵循PEP8 风格指南<br>《Python Enhancement Proposal #8》（8号Python增强法案）又叫PEP8,它是针对Python代码格式而编订的风格指南。</p>\n<ul>\n<li>使用空格来表示缩进，而不要用制表符（tab）。</li>\n<li>和语法相关的每一层缩进都用四个空格表示。</li>\n<li>每行的字符数不应超过79。</li>\n<li>对于占据多行的长表达式，除了首行之外的其余各行都应该在通常的缩进级别之上再加四个空格。</li>\n<li>文件中的代码与函数和类之间应该用两个空行隔开。</li>\n<li>在同一个类中，各方法之间应该用一个空行隔开。</li>\n<li>在使用下标来获取列表元素、调用函数或给关键字参数赋值的时候，不要再两边添加空格。</li>\n<li>为变量赋值的时候，赋值符号的左侧和右侧应该各自写上一个空格，而且只写一个。</li>\n</ul>\n<p>命名：PEP8 提倡采用不同的命名风格来编写Python代码中的各个部分,以便再阅读代码时可以根据这些名称看出它们的角色。</p>\n<ul>\n<li>函数、变量名及属性应该用小写字母，各单词之间用下划线相连，例如，lowercase_underscore。</li>\n<li>受保护的实例属性，应该以单个下划线开头，例如，_leading_underscore.</li>\n<li>私有的实例属性，应该以两个下划线开头，例如__double_leading_underscore.</li>\n<li>类与异常， 应该以每个单词首字母均大写的形式来命名，例如，CapitalizedWord。</li>\n<li>模块级别的常量，应该全部采用大写字母来拼写，各单词之间以下划线连接，例如，ALL_CAPS。</li>\n<li>类中的实例方法（instance method），应该把首个参数命名self，以表示该对象自身.</li>\n<li>类方法（class method）的首个参数，应该命名cls，以表示该类自身。</li>\n</ul>\n<p>表达式和语句《The Zen of Python》（python之禅）中说，每件事都应该有直白的做法，而且最好只有一种。</p>\n<ul>\n<li>采用内联形式的否定词 ，而不要把否定词放在整个表达式的前面，例如，应该写 if a is not b 而不是 if not a is b。</li>\n<li>不要通过检测长度的方法来判断列表是否为空，而是应该采用if not somelist来判定。</li>\n<li>同上条，如果判断列表不为空也是一样的， </li>\n<li>不要编写单行的if语句、for循环、while循环及except复合语句，而是应该把这些语句分成多行来书写，以示清晰。</li>\n<li>import语句应该重视放在文件开头.</li>\n<li>引入模块的时候，总是应该使用绝对名称，而不应该根据当前模块的路径来使用相对名称，例如，引入bar包中的foo模块时，应该完成的写出 from bar import foo，而不应该简写为import foo。</li>\n<li>如果一定要以相对的名称来编写import语句，那就采用明确的写法:from.import foo。</li>\n<li>文件中的那些import语句应该按照顺序划分为三个部分，分别为标准库模块、第三方模块以及自用模块。各import语句应该按照模块的字母顺序来排列。</li>\n</ul>\n<p>Tips： vscode可以采用pylint来自动检测受测代码是否符合pep8。<br><a href=\"https://www.pylint.org/\" target=\"_blank\" rel=\"noopener\">https://www.pylint.org/</a></p>\n<h3 id=\"第三条\"><a href=\"#第三条\" class=\"headerlink\" title=\"第三条\"></a>第三条</h3><h5 id=\"了解bytes、str、和unicode的区别\"><a href=\"#了解bytes、str、和unicode的区别\" class=\"headerlink\" title=\"了解bytes、str、和unicode的区别\"></a>了解bytes、str、和unicode的区别</h5><ul>\n<li>python3有两种表示字符序列的类型，bytes和str，前者的实例中包含原始的8位值，后者的实例中包含Unicode字符。</li>\n<li>python2中也有两种表示字符序列的类型，str和Unicode. 前者包含原始的八位值，后者的实例着包含unicode字符。<br><img src=\"/2020/03/10/Effective-Python/2020-03-07-14-29-10.png\" alt=\"e\"></li>\n<li>bytes 类型，是指一堆字节的集合，十六进制表现形式，两个十六进制数构成一个 byte ，以 b 开头的字符串是 bytes 类型。计算机只能存储二进制，字符、图片、视频、音乐等想存到硬盘上，必须以正确的方式编码成二进制后再存，但是转成二进制后不是直接以 0101010 的形式表示的，而是用bytes() 的类型来表示的。</li>\n<li>把Unicode字符表示为二进制数据（原始八位值）有很多办法，常见且推荐的编码方式就是UTF-8。</li>\n<li>但是python3 的str实例和python2的Unicode实例都没有和特定的二进制编码形式相关联，想要把Unicode字符转换为二进制数据，就必须使用encode方法，想要把二进制数据转化成为Unicode字符，则必须使用decode 方法。<br><img src=\"/2020/03/10/Effective-Python/2020-03-07-14-34-59.png\" alt=\"f\"></li>\n<li>在 Python3 中内存里的字符串是以 Unicode 编码的，Unicode 的其中一个特性就是跟所有语言编码都有映射关系，所以 UTF-8 格式的文件，在 Windows 电脑上若是不能看，就可以把 UTF-8 先解码成 Unicode ，再由 Unicode 编码成 GBK 就可以了。<br><img src=\"/2020/03/10/Effective-Python/2020-03-07-14-32-20.png\" alt=\"g\"><h5 id=\"字符串的转换\"><a href=\"#字符串的转换\" class=\"headerlink\" title=\"字符串的转换\"></a>字符串的转换</h5></li>\n<li>在Python3中，接受str或byts，并总是返回str的方法:  <figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_str</span><span class=\"params\">(bytes_or_str)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> isinstance(bytes_or_str, bytes):<span class=\"comment\">#注意这个函数</span></span><br><span class=\"line\">        value = bytes_or_str.decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        value = bytes_or_str</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br></pre></td></tr></table></figure></li>\n<li>接受str或bytes，并总是返回bytes的方法：  <figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_bytes</span><span class=\"params\">(bytes_or_str)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> isinstance(bytes_or_str, str):</span><br><span class=\"line\">        value = bytes_or_str.encode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        value = bytes_or_str</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br></pre></td></tr></table></figure></li>\n<li>在Python2中，接受str或unicode，并总是返回unicode的方法：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def to_unicode(unicode_or_str):</span><br><span class=\"line\">    if isinstance(unicode_or_str, str):</span><br><span class=\"line\">        value &#x3D; unicode_or_str.decode(&#39;utf-8&#39;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        value &#x3D; unicode_or_str</span><br><span class=\"line\">    return value</span><br></pre></td></tr></table></figure></li>\n<li>接受str或unicode，并总是返回str的方法：  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def to_str(unicode_or_str):</span><br><span class=\"line\">    if isinstance(unicode_or_str, unicode):</span><br><span class=\"line\">        value &#x3D; unicode_or_str.encode(&#39;utf-8&#39;)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        value &#x3D; unicode_or_str</span><br><span class=\"line\">    return value</span><br></pre></td></tr></table></figure>\n<h5 id=\"推荐的文件操作符\"><a href=\"#推荐的文件操作符\" class=\"headerlink\" title=\"推荐的文件操作符\"></a>推荐的文件操作符</h5>如果通过open函数获取文件句柄，该句柄会采用UTF-8编码格式来操作文件。<br>而在Python2中，文件操作的默认编码格式则是二进制形式。这可能会导致程序出现奇怪的错误。<br>例如，向文件中随机写入一些二进制数据。下面这种方法Python2中可以正常运行，但是在Python3中则不行：<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'/tmp/random.bin'</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(os.urandom(<span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>TypeError: must be str, <span class=\"keyword\">not</span> bytes</span><br></pre></td></tr></table></figure>\n上述情况是因为Python3给open函数添加了名为encoding的新参数，而这个新参数默认值是’utf-8′。这样在文件句柄上进行read和write操作时，系统就要求开发者必须传入包含unicode字符的str实例，而不接受包含二进制数据的bytes实例。</li>\n</ul>\n<p>解决这个问题，可以用二进制写入模式(‘wb’)来开启待操作的文件，按照这种方式可同时适配Python2和Python3：</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'/tmp/random.bin'</span>, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(os.urandom(<span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n<p>(读取文件也同理，可使用’rb’模式)</p>\n<h3 id=\"第四条\"><a href=\"#第四条\" class=\"headerlink\" title=\"第四条\"></a>第四条</h3><p>用辅助函数来取代复杂的表达式</p>\n<ul>\n<li>开发者很容易过度运用Python的语法特性，从而写出那种特别复杂并且难以理解的单行表达式。</li>\n<li>请把复杂的表达式移入辅助函数中。如果要反复使用相同的逻辑，那就更应该那么做。</li>\n<li>使用if/esle表达式，要比用or或者and 这样的Boolean操作符写出的表达式更清晰。</li>\n</ul>\n<h3 id=\"第五条\"><a href=\"#第五条\" class=\"headerlink\" title=\"第五条\"></a>第五条</h3><p>了解切割序列的方法<br>python提供了一种把序列切成小块的写法，这种切片操作很容易四开发者轻易的访问序列中的某些元素所构成的子集。<br>最简单的用法，就是对内置list和bytes进行切割。<br>切割操作还可以延伸到实现了<strong>getitem</strong>和<strong>setitem</strong>这两个特殊方法的python类上，参见28条。</p>\n<ul>\n<li>不要写多余的代码。但start索引为零或者end索引为序列长度时，应该将其忽略</li>\n<li>切片操作不会计较start或者end索引是否越界，这样我们很容易从前端或者后端开始。</li>\n<li>对list赋值时，如果使用切片操作，就会把原列表中处在相关范围内的值替换成新值，即便它们的长度不同也依然可以替换。</li>\n</ul>\n<h3 id=\"第六条\"><a href=\"#第六条\" class=\"headerlink\" title=\"第六条\"></a>第六条</h3><p>在单词切片操作内，不要同时指定start、 end 和 stride </p>\n<ul>\n<li>问题在于采用stride方式进行切片时，经常会出现不符合预期的结果</li>\n<li>切割列表时，如果制定了stride，代码就会变得费解。尤其是stride为负值的时候更是如此.</li>\n<li>在同一个切片操作内，不要同时使用start、end和stride. 如果确实需要执行这种操作，那就考虑将其拆解为两条赋值语句，其中一条做范围切割，另一条做步进，或者考虑使用内置itertools模块中的islice.</li>\n</ul>\n<p>tips：<br><code>mystring[::-1]#反转字符串</code></p>\n<h3 id=\"第七条\"><a href=\"#第七条\" class=\"headerlink\" title=\"第七条\"></a>第七条</h3><p>用列表推导来取代map和filter<br>python提供了一种精炼的写法，可以根据一个列表来制作另外一个列表.这种表达式称为list comprehension （列表推导）</p>\n<ul>\n<li>列表推导要比内置的map和filter函数清晰</li>\n<li>列表推导可以很跳过输入列表中的某些元素</li>\n<li>字典与集也支持推导表达式</li>\n</ul>\n<h3 id=\"第八条\"><a href=\"#第八条\" class=\"headerlink\" title=\"第八条\"></a>第八条</h3><p>不要使用含有两个以上表达式的列表推导</p>\n<ul>\n<li>列表推导支持多级循环，每一级循环也支持多项条件</li>\n<li>超过两个表达式的列表推导难以理解，应该尽量避免<br>Tips：<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">matrix = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>],[<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]]</span><br><span class=\"line\">flat = [x <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> matrix <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> row]</span><br><span class=\"line\">print(flat)</span><br><span class=\"line\">&gt;&gt;&gt;[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>]</span><br><span class=\"line\"><span class=\"comment\">#下面两种写法是等效的</span></span><br><span class=\"line\"><span class=\"comment\">#要从列表中取出大于4的偶数</span></span><br><span class=\"line\">b = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> a <span class=\"keyword\">if</span> x&gt;<span class=\"number\">4</span> <span class=\"keyword\">if</span> x %<span class=\"number\">2</span> ==<span class=\"number\">0</span>]</span><br><span class=\"line\">c = [x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> a <span class=\"keyword\">if</span> x&gt;<span class=\"number\">4</span> <span class=\"keyword\">and</span> x%<span class=\"number\">2</span>==<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第九条\"><a href=\"#第九条\" class=\"headerlink\" title=\"第九条\"></a>第九条</h3><p>用生成器表达式来改写数据量较大的列表推导<br>列表推导的缺点是，对于输入序列中的每个值来说，都要创建一项仅含一项元素的全新列表，但输入数据较大时，可能会消耗大量内存，并导致程序崩溃。<br>为了解决此问题，python 提供了生成式表达式</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">it = (len(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> open(temp.txt))</span><br><span class=\"line\">print(it)</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">&lt;generator object &lt;genexpr&gt; at <span class=\"number\">0x101b81480</span>&gt;</span><br><span class=\"line\">print(next(it))</span><br><span class=\"line\">print(next(it))</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"number\">57</span></span><br></pre></td></tr></table></figure>\n\n<p>Tips：<br>获取文件每行的字符数</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value = [len(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> open(temp.txt)]</span><br><span class=\"line\">print(value)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>当输入的数据量较大时，列表推导可能会因为占用太对内存而出问题。</li>\n<li>由生成表达式所返回的迭代器，可以逐次产生输出值，从而避免了内存用量问题。</li>\n<li>把某个生成器表达式说返回的迭代器，放在另一个生成器表达式的for子表达式中，即可将二者组合起来。</li>\n<li>串在一起的生成器表达式执行速度很快。 </li>\n</ul>\n<h3 id=\"第十条\"><a href=\"#第十条\" class=\"headerlink\" title=\"第十条\"></a>第十条</h3><p>尽量用enumerate取代range<br>在一些列的整数上面迭代，内置的range函数很有用，<br>当迭代列表的时候，通常还想知道当前元素在列表中的索引。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(flavor_list)):</span><br><span class=\"line\">    flavor = flavor_lsit[i]</span><br><span class=\"line\">    print(<span class=\"string\">\"%d:%s\"</span>%(i+<span class=\"number\">1</span>,flavor))</span><br></pre></td></tr></table></figure>\n<p>这种代码不利于理解，python提供了enumerate来解决此问题。enumerate可以把各种迭代器包装为生成器，以便稍后产生输出值，生成器每次产生一对输出值，前者为循环下标，后者表示从迭代器中获取到的下一个序列元素，这样写出来的代码会非常整洁。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i ,flavor <span class=\"keyword\">in</span> enumerate(flavor_list):</span><br><span class=\"line\">    print(<span class=\"string\">\"%d:%s\"</span>%(i+<span class=\"number\">1</span>,flavor))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>enumerate函数提供了一种精简的写法，可以在遍历迭代器时获知每个元素的索引</li>\n<li>尽量用enumerate来改写那种将range与下标访问相结合的序列遍历代码</li>\n<li>可以给enumerate 提供第二个参数，已指定开始计数时所用的值（默认为0）</li>\n</ul>\n<p>Tips:<br>还可以直接指定enumerate开始计数所用的值。</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i ,flavor <span class=\"keyword\">in</span> enumerate(flavor_list，<span class=\"number\">1</span>):</span><br><span class=\"line\">    print(<span class=\"string\">\"%d:%s\"</span>%(i,flavor))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第十一条\"><a href=\"#第十一条\" class=\"headerlink\" title=\"第十一条\"></a>第十一条</h3><p>用zip函数同时遍历两个迭代器</p>\n<ul>\n<li><p>使用for循环</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">names = [<span class=\"string\">'Cecilia'</span>, <span class=\"string\">'Kufu'</span>, <span class=\"string\">'JayChou'</span>]</span><br><span class=\"line\">letters = [len(n) <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> names]</span><br><span class=\"line\">longest_name = <span class=\"literal\">None</span></span><br><span class=\"line\">max_letters = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> name, count <span class=\"keyword\">in</span> zip(names, letters):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> count &gt; max_letters:</span><br><span class=\"line\">        longest_name = name</span><br><span class=\"line\">        max_letters = count</span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">Cecilia</span><br></pre></td></tr></table></figure>\n<p>上面这段代码问题在一，整个循环语句看上去很乱，用下标来访问names和letters会使代码不易阅读。<br>改用enumerate可以稍稍缓解这个问题，但仍然不够理想。</p>\n</li>\n<li><p>使用for循环加enumerate</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">names = [<span class=\"string\">'Cecilia'</span>, <span class=\"string\">'Kufu'</span>, <span class=\"string\">'JayChou'</span>]</span><br><span class=\"line\">letters = [len(n) <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> names]</span><br><span class=\"line\">longest_name = <span class=\"literal\">None</span></span><br><span class=\"line\">max_letters = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i, name <span class=\"keyword\">in</span> enumerate(names)：</span><br><span class=\"line\">    count =letters[i]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> count &gt; max_letters:</span><br><span class=\"line\">        longest_name = name</span><br><span class=\"line\">        max_letters = count</span><br></pre></td></tr></table></figure></li>\n<li><p>使用zip</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">names = [<span class=\"string\">'Cecilia'</span>, <span class=\"string\">'Kufu'</span>, <span class=\"string\">'JayChou'</span>]</span><br><span class=\"line\">letters = [len(n) <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> names]</span><br><span class=\"line\">longest_name = <span class=\"literal\">None</span></span><br><span class=\"line\">max_letters = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> name, count <span class=\"keyword\">in</span> zip(names, letter):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> count &gt; max_letters:</span><br><span class=\"line\">        longest_name = name</span><br><span class=\"line\">        max_letters = count</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>内置的zip函数可以平行的遍历多个迭代器</p>\n</li>\n<li><p>Python3中的zip相当于生成器，会在遍历过程中逐次产生元组，而Python2中的zip则是直接把这些元组完全生成号，并一次性的返回给整份列表。</p>\n</li>\n<li><p>如果提供的迭代器长度不等，那么zip就会自动提前终止。</p>\n</li>\n<li><p>itertools 内置模块中的zip_longest函数可以平行的遍历多个迭代器，而不用在乎它们的长度是否相等。</p>\n</li>\n</ul>\n<h3 id=\"不要在for和while循环后面写else语块\"><a href=\"#不要在for和while循环后面写else语块\" class=\"headerlink\" title=\"不要在for和while循环后面写else语块\"></a>不要在for和while循环后面写else语块</h3><ul>\n<li>python 有种特殊语法，可在 for及 while 循环的内部语句块之后紧跟一个else块。</li>\n<li>只有当整个循环主体都没遇到break语句时，循环后面的else块才会执行。</li>\n<li>不要再循环后面使用else块，因为在这种写法即不直观，又容易引人误解。</li>\n</ul>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p><a href=\"https://www.cnblogs.com/lipandeng/p/11162039.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/lipandeng/p/11162039.html</a><br><a href=\"https://lingyunfx.com/?page_id=152\" target=\"_blank\" rel=\"noopener\">https://lingyunfx.com/?page_id=152</a></p>"},{"title":"GameCourse101","date":"2020-03-10T11:14:04.000Z","_content":"\n\n计算机图形学入门 课程学习笔记\n## 第一节 引入\n## 第二节 线性代数\n### 向量\n\n向量是带有方向的量  \n重要的两个量是方向和长度  \n![](GameCourse101/2020-03-08-12-49-03.png)  \n<!-- more -->\n数学： 向量  \n物理： 矢量  \n向量长度：  \n![](GameCourse101/2020-03-08-12-49-24.png)  \n向量加法（求和）：  \n几何上  \n![](GameCourse101/2020-03-08-12-49-38.png)  \n数学上  \n![](GameCourse101/2020-03-08-12-49-58.png)  \n我们把向量表示成直角坐标系这种形式是有助于计算向量的长度的。  \n\n#### 向量的点乘和叉乘  \n向量更广泛的用法  \n![](GameCourse101/2020-03-08-12-50-12.png)  \n\n##### 点乘  \n![](GameCourse101/2020-03-08-12-50-25.png)  \n左边是两个向量，右边是一个数字。  \n如果两个向量都是单位向量，那么它们点乘的结果就是余弦的值。  \n\n![](GameCourse101/2020-03-08-12-58-31.png)  \n点乘既然是一种运算，运算法则都会满足一些性质。  \n交换律 结合律 分配律  \n\n![](GameCourse101/2020-03-08-13-08-11.png)  \n如果是在坐标系下，就跟简单。  \n\n![](GameCourse101/2020-03-08-13-02-30.png)  \n1. 点乘在图形学最重要的作用就是找到两个向量的夹角。  \n比如 光从哪个地方射过来（向量）物体表面法线是什么样的（向量）我们从哪里看（向量）\n2. 第二个重要作用就是找到一个向量的投影到另一个向量是长什么样的。  \n投影算出来有什么好处呢？ 我们可以把一个向量分解成两个向量，一个平行一个垂直。这样可以帮助我们把任意向量分解到任意坐标轴。  \n    ![](GameCourse101/2020-03-08-13-17-01.png)\n3. 在图形学里，我们还可以根据点乘的结果判定两个向量是否接近是否远离。\n4. 向量点乘还可以告诉大家一个前与后的信息，如图（向量a和向量b点乘为正值且接近1，向量a和向量c点乘为负值，如果有一个向量跟向量a一样，那点乘结果为1，如果有一个向量正好在虚线上，那点乘的值为0，如果跟向量a正好相反，那点乘结果为-1）  \n![](GameCourse101/2020-03-08-13-44-08.png)  \n\n##### 叉乘（叉积）  \n叉乘是给定两个向量计算出同时垂直与这两个向量的新的向量，另外同时垂直这两个向量也就是必然垂直这两个向量形成的平面\n![](GameCourse101/2020-03-08-13-57-13.png)\n右手螺旋定则（DirectX是右手，openGL是左手），伸出右手，除了拇指以外的四个手指比作向量a，向内握紧比作向量a向向量b运动，那么大拇指就是叉乘的结果。xy，\n向量的叉乘并不满足交换律\n向量的叉积还有一个作用是我们利用它来建立一个三维空间中的直角坐标系\n![](GameCourse101/2020-03-08-14-04-16.png)  \n几何：\n![](GameCourse101/2020-03-08-14-36-32.png)  \n\n叉积怎么算，有什么用处：\n![](GameCourse101/2020-03-08-14-37-55.png)\n特别重要 \n\n![](GameCourse101/2020-03-08-14-38-58.png)\n1. 判定左和右  \n如图左侧，XY为平面，通过右手螺旋定则，Z为朝向我们自身的向量，如果想判断向量b在向量a左侧还是右侧（什么是左侧右侧? 从向量a顺时针旋转到达向量b为左侧，逆时针为右侧），在这里根据图示很容易看出来向量b是在向量a的左侧，如果用数字表示就是 向量a叉乘向量b得到的结果是正值（指向身体）就说明向量b在向量a的左侧，如果向量b叉乘向量a得到的结果是负值（指向身体外侧），那就说明向量a在向量b右侧，\n2. 判定内与外  \n如图右侧，先判断向量AP是否在向量AB的左侧，在判断向量BP是否在向量BC的左侧，在判断向量AP是否在ac的左侧，如果都是在左侧就说明点P在三角形内部，否则肯定有一个判断是在右侧。\n这里假设了ABC三个点是逆时针排布，如果换成顺时针也没有问题，只不过是都在左侧。  \n所以我们可以忽略三角形的排布顺序，只要三个边左或者右保持一致就说明点在三角形内部。这点非常重要，是光栅化的基础（用来判断像素是否在三角形的内部）。\n\n\n\n#### 向量定义坐标系  \n![](GameCourse101/2020-03-08-15-51-31.png)\n向量叉乘可以定义一些互相垂直的轴，就会形成坐标系如图。  \n![](GameCourse101/2020-03-08-15-52-25.png)  \n这里顶一个uvw坐标系，三个向量单位长度都为1，互相垂直，给你u和v 叉乘得到w。\n我们可以利用投影把任意一个向量分解到三个轴上去，利用点乘，因为什么呢？向量P点乘向量U，等于是向量P的长度乘以向量U的长度在乘以cosθ，向量U又恰好是单位向量为1，等于是向量P的长度乘以cosθ，根据下图三角函数，就会得出向量P在向量U上的投影，同理获得向量P在向量V和向量W上的投影，有了这三个投影就可以获得坐标系下的这个向量。\n![](GameCourse101/2020-03-08-16-07-00.png)  \ncosA = c/b  \n\n\n### 矩阵\n![](GameCourse101/2020-03-08-16-47-04.png)\n**在图像学里，变换就是矩阵的最大应用。** \n![](GameCourse101/2020-03-08-20-44-32.png)  \n##### 矩阵乘以和加上一个常量就是把矩阵的每个元素乘以和加上一个常量.  \n![](GameCourse101/2020-03-08-20-53-06.png)  \n矩阵乘矩阵必须要符合条件才能乘，如图必须第一个矩阵的列数和第二个矩阵的行数相同相乘才有意义。  \n关于新得到的矩阵每一个元素都是什么，有不同的数学定义，这个地方比较不容易记住，这里给大家提供一个容易记得方法，比如左下角这个8，他的坐标是三行一列，这里三行对应第一个矩阵（0，4），一列对应第二个矩阵（3，2），这两个向量点乘。  \n![](GameCourse101/2020-03-08-21-50-50.png)  \n矩阵乘法是没有交换律的，但是矩阵是由结合律和分配律。  \n\n##### 矩阵乘向量\n![](GameCourse101/2020-03-08-21-53-53.png)\n>一个矩阵如何和一个向量乘？当我们认为向量是列向量就有意义了（也就是说M永远为1）。    \n\n*这是最重要的核心。*\n下面表示一个2D向量按Y轴镜像的操作。\n\n##### 矩阵转置\n![](GameCourse101/2020-03-08-22-01-06.png)\n性质： 如果要乘两个矩阵在转置好比相对后一个矩阵做装置在乘以前一个矩阵做转置的结果。\n\n##### 特殊的矩阵，单位矩阵\n![](GameCourse101/2020-03-08-22-07-51.png)\n对角阵，只有对角线上有非零的元素，\n矩阵的逆：如果你能找到一个矩阵，和原来的矩阵相乘，不管乘得顺序，得到的结果都是I，那么我们就认为这两个矩阵是互逆的。\n逆矩阵的计算和转置的矩阵很相似。\n\n##### 向量点乘和叉乘的矩阵形式\n![](GameCourse101/2020-03-08-22-12-11.png)\n点乘：向量a点乘向量b 等于向量a转置和向量b的乘法。\n叉乘：相对点乘困难一些，相当于把向量a转换成一个矩阵（dual matrix）乘以向量b","source":"_posts/GameCourse101.md","raw":"---\ntitle: GameCourse101\ndate: 2020-03-10 19:14:04\ntags: computer graphics\n---\n\n\n计算机图形学入门 课程学习笔记\n## 第一节 引入\n## 第二节 线性代数\n### 向量\n\n向量是带有方向的量  \n重要的两个量是方向和长度  \n![](GameCourse101/2020-03-08-12-49-03.png)  \n<!-- more -->\n数学： 向量  \n物理： 矢量  \n向量长度：  \n![](GameCourse101/2020-03-08-12-49-24.png)  \n向量加法（求和）：  \n几何上  \n![](GameCourse101/2020-03-08-12-49-38.png)  \n数学上  \n![](GameCourse101/2020-03-08-12-49-58.png)  \n我们把向量表示成直角坐标系这种形式是有助于计算向量的长度的。  \n\n#### 向量的点乘和叉乘  \n向量更广泛的用法  \n![](GameCourse101/2020-03-08-12-50-12.png)  \n\n##### 点乘  \n![](GameCourse101/2020-03-08-12-50-25.png)  \n左边是两个向量，右边是一个数字。  \n如果两个向量都是单位向量，那么它们点乘的结果就是余弦的值。  \n\n![](GameCourse101/2020-03-08-12-58-31.png)  \n点乘既然是一种运算，运算法则都会满足一些性质。  \n交换律 结合律 分配律  \n\n![](GameCourse101/2020-03-08-13-08-11.png)  \n如果是在坐标系下，就跟简单。  \n\n![](GameCourse101/2020-03-08-13-02-30.png)  \n1. 点乘在图形学最重要的作用就是找到两个向量的夹角。  \n比如 光从哪个地方射过来（向量）物体表面法线是什么样的（向量）我们从哪里看（向量）\n2. 第二个重要作用就是找到一个向量的投影到另一个向量是长什么样的。  \n投影算出来有什么好处呢？ 我们可以把一个向量分解成两个向量，一个平行一个垂直。这样可以帮助我们把任意向量分解到任意坐标轴。  \n    ![](GameCourse101/2020-03-08-13-17-01.png)\n3. 在图形学里，我们还可以根据点乘的结果判定两个向量是否接近是否远离。\n4. 向量点乘还可以告诉大家一个前与后的信息，如图（向量a和向量b点乘为正值且接近1，向量a和向量c点乘为负值，如果有一个向量跟向量a一样，那点乘结果为1，如果有一个向量正好在虚线上，那点乘的值为0，如果跟向量a正好相反，那点乘结果为-1）  \n![](GameCourse101/2020-03-08-13-44-08.png)  \n\n##### 叉乘（叉积）  \n叉乘是给定两个向量计算出同时垂直与这两个向量的新的向量，另外同时垂直这两个向量也就是必然垂直这两个向量形成的平面\n![](GameCourse101/2020-03-08-13-57-13.png)\n右手螺旋定则（DirectX是右手，openGL是左手），伸出右手，除了拇指以外的四个手指比作向量a，向内握紧比作向量a向向量b运动，那么大拇指就是叉乘的结果。xy，\n向量的叉乘并不满足交换律\n向量的叉积还有一个作用是我们利用它来建立一个三维空间中的直角坐标系\n![](GameCourse101/2020-03-08-14-04-16.png)  \n几何：\n![](GameCourse101/2020-03-08-14-36-32.png)  \n\n叉积怎么算，有什么用处：\n![](GameCourse101/2020-03-08-14-37-55.png)\n特别重要 \n\n![](GameCourse101/2020-03-08-14-38-58.png)\n1. 判定左和右  \n如图左侧，XY为平面，通过右手螺旋定则，Z为朝向我们自身的向量，如果想判断向量b在向量a左侧还是右侧（什么是左侧右侧? 从向量a顺时针旋转到达向量b为左侧，逆时针为右侧），在这里根据图示很容易看出来向量b是在向量a的左侧，如果用数字表示就是 向量a叉乘向量b得到的结果是正值（指向身体）就说明向量b在向量a的左侧，如果向量b叉乘向量a得到的结果是负值（指向身体外侧），那就说明向量a在向量b右侧，\n2. 判定内与外  \n如图右侧，先判断向量AP是否在向量AB的左侧，在判断向量BP是否在向量BC的左侧，在判断向量AP是否在ac的左侧，如果都是在左侧就说明点P在三角形内部，否则肯定有一个判断是在右侧。\n这里假设了ABC三个点是逆时针排布，如果换成顺时针也没有问题，只不过是都在左侧。  \n所以我们可以忽略三角形的排布顺序，只要三个边左或者右保持一致就说明点在三角形内部。这点非常重要，是光栅化的基础（用来判断像素是否在三角形的内部）。\n\n\n\n#### 向量定义坐标系  \n![](GameCourse101/2020-03-08-15-51-31.png)\n向量叉乘可以定义一些互相垂直的轴，就会形成坐标系如图。  \n![](GameCourse101/2020-03-08-15-52-25.png)  \n这里顶一个uvw坐标系，三个向量单位长度都为1，互相垂直，给你u和v 叉乘得到w。\n我们可以利用投影把任意一个向量分解到三个轴上去，利用点乘，因为什么呢？向量P点乘向量U，等于是向量P的长度乘以向量U的长度在乘以cosθ，向量U又恰好是单位向量为1，等于是向量P的长度乘以cosθ，根据下图三角函数，就会得出向量P在向量U上的投影，同理获得向量P在向量V和向量W上的投影，有了这三个投影就可以获得坐标系下的这个向量。\n![](GameCourse101/2020-03-08-16-07-00.png)  \ncosA = c/b  \n\n\n### 矩阵\n![](GameCourse101/2020-03-08-16-47-04.png)\n**在图像学里，变换就是矩阵的最大应用。** \n![](GameCourse101/2020-03-08-20-44-32.png)  \n##### 矩阵乘以和加上一个常量就是把矩阵的每个元素乘以和加上一个常量.  \n![](GameCourse101/2020-03-08-20-53-06.png)  \n矩阵乘矩阵必须要符合条件才能乘，如图必须第一个矩阵的列数和第二个矩阵的行数相同相乘才有意义。  \n关于新得到的矩阵每一个元素都是什么，有不同的数学定义，这个地方比较不容易记住，这里给大家提供一个容易记得方法，比如左下角这个8，他的坐标是三行一列，这里三行对应第一个矩阵（0，4），一列对应第二个矩阵（3，2），这两个向量点乘。  \n![](GameCourse101/2020-03-08-21-50-50.png)  \n矩阵乘法是没有交换律的，但是矩阵是由结合律和分配律。  \n\n##### 矩阵乘向量\n![](GameCourse101/2020-03-08-21-53-53.png)\n>一个矩阵如何和一个向量乘？当我们认为向量是列向量就有意义了（也就是说M永远为1）。    \n\n*这是最重要的核心。*\n下面表示一个2D向量按Y轴镜像的操作。\n\n##### 矩阵转置\n![](GameCourse101/2020-03-08-22-01-06.png)\n性质： 如果要乘两个矩阵在转置好比相对后一个矩阵做装置在乘以前一个矩阵做转置的结果。\n\n##### 特殊的矩阵，单位矩阵\n![](GameCourse101/2020-03-08-22-07-51.png)\n对角阵，只有对角线上有非零的元素，\n矩阵的逆：如果你能找到一个矩阵，和原来的矩阵相乘，不管乘得顺序，得到的结果都是I，那么我们就认为这两个矩阵是互逆的。\n逆矩阵的计算和转置的矩阵很相似。\n\n##### 向量点乘和叉乘的矩阵形式\n![](GameCourse101/2020-03-08-22-12-11.png)\n点乘：向量a点乘向量b 等于向量a转置和向量b的乘法。\n叉乘：相对点乘困难一些，相当于把向量a转换成一个矩阵（dual matrix）乘以向量b","slug":"GameCourse101","published":1,"updated":"2020-03-11T02:28:22.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7rbphz90005w8p4dmoj46q3","content":"<p>计算机图形学入门 课程学习笔记</p>\n<h2 id=\"第一节-引入\"><a href=\"#第一节-引入\" class=\"headerlink\" title=\"第一节 引入\"></a>第一节 引入</h2><h2 id=\"第二节-线性代数\"><a href=\"#第二节-线性代数\" class=\"headerlink\" title=\"第二节 线性代数\"></a>第二节 线性代数</h2><h3 id=\"向量\"><a href=\"#向量\" class=\"headerlink\" title=\"向量\"></a>向量</h3><p>向量是带有方向的量<br>重要的两个量是方向和长度<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-12-49-03.png\" alt>  </p>\n<a id=\"more\"></a>\n<p>数学： 向量<br>物理： 矢量<br>向量长度：<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-12-49-24.png\" alt><br>向量加法（求和）：<br>几何上<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-12-49-38.png\" alt><br>数学上<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-12-49-58.png\" alt><br>我们把向量表示成直角坐标系这种形式是有助于计算向量的长度的。  </p>\n<h4 id=\"向量的点乘和叉乘\"><a href=\"#向量的点乘和叉乘\" class=\"headerlink\" title=\"向量的点乘和叉乘\"></a>向量的点乘和叉乘</h4><p>向量更广泛的用法<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-12-50-12.png\" alt>  </p>\n<h5 id=\"点乘\"><a href=\"#点乘\" class=\"headerlink\" title=\"点乘\"></a>点乘</h5><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-12-50-25.png\" alt><br>左边是两个向量，右边是一个数字。<br>如果两个向量都是单位向量，那么它们点乘的结果就是余弦的值。  </p>\n<p><img src=\"/2020/03/10/GameCourse101/2020-03-08-12-58-31.png\" alt><br>点乘既然是一种运算，运算法则都会满足一些性质。<br>交换律 结合律 分配律  </p>\n<p><img src=\"/2020/03/10/GameCourse101/2020-03-08-13-08-11.png\" alt><br>如果是在坐标系下，就跟简单。  </p>\n<p><img src=\"/2020/03/10/GameCourse101/2020-03-08-13-02-30.png\" alt>  </p>\n<ol>\n<li>点乘在图形学最重要的作用就是找到两个向量的夹角。<br>比如 光从哪个地方射过来（向量）物体表面法线是什么样的（向量）我们从哪里看（向量）</li>\n<li>第二个重要作用就是找到一个向量的投影到另一个向量是长什么样的。<br>投影算出来有什么好处呢？ 我们可以把一个向量分解成两个向量，一个平行一个垂直。这样可以帮助我们把任意向量分解到任意坐标轴。<br> <img src=\"/2020/03/10/GameCourse101/2020-03-08-13-17-01.png\" alt></li>\n<li>在图形学里，我们还可以根据点乘的结果判定两个向量是否接近是否远离。</li>\n<li>向量点乘还可以告诉大家一个前与后的信息，如图（向量a和向量b点乘为正值且接近1，向量a和向量c点乘为负值，如果有一个向量跟向量a一样，那点乘结果为1，如果有一个向量正好在虚线上，那点乘的值为0，如果跟向量a正好相反，那点乘结果为-1）<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-13-44-08.png\" alt>  </li>\n</ol>\n<h5 id=\"叉乘（叉积）\"><a href=\"#叉乘（叉积）\" class=\"headerlink\" title=\"叉乘（叉积）\"></a>叉乘（叉积）</h5><p>叉乘是给定两个向量计算出同时垂直与这两个向量的新的向量，另外同时垂直这两个向量也就是必然垂直这两个向量形成的平面<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-13-57-13.png\" alt><br>右手螺旋定则（DirectX是右手，openGL是左手），伸出右手，除了拇指以外的四个手指比作向量a，向内握紧比作向量a向向量b运动，那么大拇指就是叉乘的结果。xy，<br>向量的叉乘并不满足交换律<br>向量的叉积还有一个作用是我们利用它来建立一个三维空间中的直角坐标系<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-14-04-16.png\" alt><br>几何：<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-14-36-32.png\" alt>  </p>\n<p>叉积怎么算，有什么用处：<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-14-37-55.png\" alt><br>特别重要 </p>\n<p><img src=\"/2020/03/10/GameCourse101/2020-03-08-14-38-58.png\" alt></p>\n<ol>\n<li>判定左和右<br>如图左侧，XY为平面，通过右手螺旋定则，Z为朝向我们自身的向量，如果想判断向量b在向量a左侧还是右侧（什么是左侧右侧? 从向量a顺时针旋转到达向量b为左侧，逆时针为右侧），在这里根据图示很容易看出来向量b是在向量a的左侧，如果用数字表示就是 向量a叉乘向量b得到的结果是正值（指向身体）就说明向量b在向量a的左侧，如果向量b叉乘向量a得到的结果是负值（指向身体外侧），那就说明向量a在向量b右侧，</li>\n<li>判定内与外<br>如图右侧，先判断向量AP是否在向量AB的左侧，在判断向量BP是否在向量BC的左侧，在判断向量AP是否在ac的左侧，如果都是在左侧就说明点P在三角形内部，否则肯定有一个判断是在右侧。<br>这里假设了ABC三个点是逆时针排布，如果换成顺时针也没有问题，只不过是都在左侧。<br>所以我们可以忽略三角形的排布顺序，只要三个边左或者右保持一致就说明点在三角形内部。这点非常重要，是光栅化的基础（用来判断像素是否在三角形的内部）。</li>\n</ol>\n<h4 id=\"向量定义坐标系\"><a href=\"#向量定义坐标系\" class=\"headerlink\" title=\"向量定义坐标系\"></a>向量定义坐标系</h4><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-15-51-31.png\" alt><br>向量叉乘可以定义一些互相垂直的轴，就会形成坐标系如图。<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-15-52-25.png\" alt><br>这里顶一个uvw坐标系，三个向量单位长度都为1，互相垂直，给你u和v 叉乘得到w。<br>我们可以利用投影把任意一个向量分解到三个轴上去，利用点乘，因为什么呢？向量P点乘向量U，等于是向量P的长度乘以向量U的长度在乘以cosθ，向量U又恰好是单位向量为1，等于是向量P的长度乘以cosθ，根据下图三角函数，就会得出向量P在向量U上的投影，同理获得向量P在向量V和向量W上的投影，有了这三个投影就可以获得坐标系下的这个向量。<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-16-07-00.png\" alt><br>cosA = c/b  </p>\n<h3 id=\"矩阵\"><a href=\"#矩阵\" class=\"headerlink\" title=\"矩阵\"></a>矩阵</h3><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-16-47-04.png\" alt><br><strong>在图像学里，变换就是矩阵的最大应用。</strong><br><img src=\"/2020/03/10/GameCourse101/2020-03-08-20-44-32.png\" alt>  </p>\n<h5 id=\"矩阵乘以和加上一个常量就是把矩阵的每个元素乘以和加上一个常量\"><a href=\"#矩阵乘以和加上一个常量就是把矩阵的每个元素乘以和加上一个常量\" class=\"headerlink\" title=\"矩阵乘以和加上一个常量就是把矩阵的每个元素乘以和加上一个常量.\"></a>矩阵乘以和加上一个常量就是把矩阵的每个元素乘以和加上一个常量.</h5><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-20-53-06.png\" alt><br>矩阵乘矩阵必须要符合条件才能乘，如图必须第一个矩阵的列数和第二个矩阵的行数相同相乘才有意义。<br>关于新得到的矩阵每一个元素都是什么，有不同的数学定义，这个地方比较不容易记住，这里给大家提供一个容易记得方法，比如左下角这个8，他的坐标是三行一列，这里三行对应第一个矩阵（0，4），一列对应第二个矩阵（3，2），这两个向量点乘。<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-21-50-50.png\" alt><br>矩阵乘法是没有交换律的，但是矩阵是由结合律和分配律。  </p>\n<h5 id=\"矩阵乘向量\"><a href=\"#矩阵乘向量\" class=\"headerlink\" title=\"矩阵乘向量\"></a>矩阵乘向量</h5><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-21-53-53.png\" alt></p>\n<blockquote>\n<p>一个矩阵如何和一个向量乘？当我们认为向量是列向量就有意义了（也就是说M永远为1）。    </p>\n</blockquote>\n<p><em>这是最重要的核心。</em><br>下面表示一个2D向量按Y轴镜像的操作。</p>\n<h5 id=\"矩阵转置\"><a href=\"#矩阵转置\" class=\"headerlink\" title=\"矩阵转置\"></a>矩阵转置</h5><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-22-01-06.png\" alt><br>性质： 如果要乘两个矩阵在转置好比相对后一个矩阵做装置在乘以前一个矩阵做转置的结果。</p>\n<h5 id=\"特殊的矩阵，单位矩阵\"><a href=\"#特殊的矩阵，单位矩阵\" class=\"headerlink\" title=\"特殊的矩阵，单位矩阵\"></a>特殊的矩阵，单位矩阵</h5><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-22-07-51.png\" alt><br>对角阵，只有对角线上有非零的元素，<br>矩阵的逆：如果你能找到一个矩阵，和原来的矩阵相乘，不管乘得顺序，得到的结果都是I，那么我们就认为这两个矩阵是互逆的。<br>逆矩阵的计算和转置的矩阵很相似。</p>\n<h5 id=\"向量点乘和叉乘的矩阵形式\"><a href=\"#向量点乘和叉乘的矩阵形式\" class=\"headerlink\" title=\"向量点乘和叉乘的矩阵形式\"></a>向量点乘和叉乘的矩阵形式</h5><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-22-12-11.png\" alt><br>点乘：向量a点乘向量b 等于向量a转置和向量b的乘法。<br>叉乘：相对点乘困难一些，相当于把向量a转换成一个矩阵（dual matrix）乘以向量b</p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#2d6b96","paginator":"#6AA7D2","button_hover":"#3B8BC4","text_selection":"#6AA7D2","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#6AA7D2","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"文章":"/","归档":"/archives"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":true,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":null,"top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2013,"footer_custom_text":"Hi, welcome to my <a href=\"https://sunyuxianggit.github.io/\">blog</a>!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":true,"url":"https://github.com/sunyuxianggit","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"SunYuxiangのBlog","subtitle":"好记性,不如烂笔头.今天你要写点什么？","description":"","author":"Sun Yuxiang","language":"zh-Hans","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/sunyuxianggit/sunyuxianggit.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false}}}}},"excerpt":"<p>计算机图形学入门 课程学习笔记</p>\n<h2 id=\"第一节-引入\"><a href=\"#第一节-引入\" class=\"headerlink\" title=\"第一节 引入\"></a>第一节 引入</h2><h2 id=\"第二节-线性代数\"><a href=\"#第二节-线性代数\" class=\"headerlink\" title=\"第二节 线性代数\"></a>第二节 线性代数</h2><h3 id=\"向量\"><a href=\"#向量\" class=\"headerlink\" title=\"向量\"></a>向量</h3><p>向量是带有方向的量<br>重要的两个量是方向和长度<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-12-49-03.png\" alt>  </p>","more":"<p>数学： 向量<br>物理： 矢量<br>向量长度：<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-12-49-24.png\" alt><br>向量加法（求和）：<br>几何上<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-12-49-38.png\" alt><br>数学上<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-12-49-58.png\" alt><br>我们把向量表示成直角坐标系这种形式是有助于计算向量的长度的。  </p>\n<h4 id=\"向量的点乘和叉乘\"><a href=\"#向量的点乘和叉乘\" class=\"headerlink\" title=\"向量的点乘和叉乘\"></a>向量的点乘和叉乘</h4><p>向量更广泛的用法<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-12-50-12.png\" alt>  </p>\n<h5 id=\"点乘\"><a href=\"#点乘\" class=\"headerlink\" title=\"点乘\"></a>点乘</h5><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-12-50-25.png\" alt><br>左边是两个向量，右边是一个数字。<br>如果两个向量都是单位向量，那么它们点乘的结果就是余弦的值。  </p>\n<p><img src=\"/2020/03/10/GameCourse101/2020-03-08-12-58-31.png\" alt><br>点乘既然是一种运算，运算法则都会满足一些性质。<br>交换律 结合律 分配律  </p>\n<p><img src=\"/2020/03/10/GameCourse101/2020-03-08-13-08-11.png\" alt><br>如果是在坐标系下，就跟简单。  </p>\n<p><img src=\"/2020/03/10/GameCourse101/2020-03-08-13-02-30.png\" alt>  </p>\n<ol>\n<li>点乘在图形学最重要的作用就是找到两个向量的夹角。<br>比如 光从哪个地方射过来（向量）物体表面法线是什么样的（向量）我们从哪里看（向量）</li>\n<li>第二个重要作用就是找到一个向量的投影到另一个向量是长什么样的。<br>投影算出来有什么好处呢？ 我们可以把一个向量分解成两个向量，一个平行一个垂直。这样可以帮助我们把任意向量分解到任意坐标轴。<br> <img src=\"/2020/03/10/GameCourse101/2020-03-08-13-17-01.png\" alt></li>\n<li>在图形学里，我们还可以根据点乘的结果判定两个向量是否接近是否远离。</li>\n<li>向量点乘还可以告诉大家一个前与后的信息，如图（向量a和向量b点乘为正值且接近1，向量a和向量c点乘为负值，如果有一个向量跟向量a一样，那点乘结果为1，如果有一个向量正好在虚线上，那点乘的值为0，如果跟向量a正好相反，那点乘结果为-1）<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-13-44-08.png\" alt>  </li>\n</ol>\n<h5 id=\"叉乘（叉积）\"><a href=\"#叉乘（叉积）\" class=\"headerlink\" title=\"叉乘（叉积）\"></a>叉乘（叉积）</h5><p>叉乘是给定两个向量计算出同时垂直与这两个向量的新的向量，另外同时垂直这两个向量也就是必然垂直这两个向量形成的平面<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-13-57-13.png\" alt><br>右手螺旋定则（DirectX是右手，openGL是左手），伸出右手，除了拇指以外的四个手指比作向量a，向内握紧比作向量a向向量b运动，那么大拇指就是叉乘的结果。xy，<br>向量的叉乘并不满足交换律<br>向量的叉积还有一个作用是我们利用它来建立一个三维空间中的直角坐标系<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-14-04-16.png\" alt><br>几何：<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-14-36-32.png\" alt>  </p>\n<p>叉积怎么算，有什么用处：<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-14-37-55.png\" alt><br>特别重要 </p>\n<p><img src=\"/2020/03/10/GameCourse101/2020-03-08-14-38-58.png\" alt></p>\n<ol>\n<li>判定左和右<br>如图左侧，XY为平面，通过右手螺旋定则，Z为朝向我们自身的向量，如果想判断向量b在向量a左侧还是右侧（什么是左侧右侧? 从向量a顺时针旋转到达向量b为左侧，逆时针为右侧），在这里根据图示很容易看出来向量b是在向量a的左侧，如果用数字表示就是 向量a叉乘向量b得到的结果是正值（指向身体）就说明向量b在向量a的左侧，如果向量b叉乘向量a得到的结果是负值（指向身体外侧），那就说明向量a在向量b右侧，</li>\n<li>判定内与外<br>如图右侧，先判断向量AP是否在向量AB的左侧，在判断向量BP是否在向量BC的左侧，在判断向量AP是否在ac的左侧，如果都是在左侧就说明点P在三角形内部，否则肯定有一个判断是在右侧。<br>这里假设了ABC三个点是逆时针排布，如果换成顺时针也没有问题，只不过是都在左侧。<br>所以我们可以忽略三角形的排布顺序，只要三个边左或者右保持一致就说明点在三角形内部。这点非常重要，是光栅化的基础（用来判断像素是否在三角形的内部）。</li>\n</ol>\n<h4 id=\"向量定义坐标系\"><a href=\"#向量定义坐标系\" class=\"headerlink\" title=\"向量定义坐标系\"></a>向量定义坐标系</h4><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-15-51-31.png\" alt><br>向量叉乘可以定义一些互相垂直的轴，就会形成坐标系如图。<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-15-52-25.png\" alt><br>这里顶一个uvw坐标系，三个向量单位长度都为1，互相垂直，给你u和v 叉乘得到w。<br>我们可以利用投影把任意一个向量分解到三个轴上去，利用点乘，因为什么呢？向量P点乘向量U，等于是向量P的长度乘以向量U的长度在乘以cosθ，向量U又恰好是单位向量为1，等于是向量P的长度乘以cosθ，根据下图三角函数，就会得出向量P在向量U上的投影，同理获得向量P在向量V和向量W上的投影，有了这三个投影就可以获得坐标系下的这个向量。<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-16-07-00.png\" alt><br>cosA = c/b  </p>\n<h3 id=\"矩阵\"><a href=\"#矩阵\" class=\"headerlink\" title=\"矩阵\"></a>矩阵</h3><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-16-47-04.png\" alt><br><strong>在图像学里，变换就是矩阵的最大应用。</strong><br><img src=\"/2020/03/10/GameCourse101/2020-03-08-20-44-32.png\" alt>  </p>\n<h5 id=\"矩阵乘以和加上一个常量就是把矩阵的每个元素乘以和加上一个常量\"><a href=\"#矩阵乘以和加上一个常量就是把矩阵的每个元素乘以和加上一个常量\" class=\"headerlink\" title=\"矩阵乘以和加上一个常量就是把矩阵的每个元素乘以和加上一个常量.\"></a>矩阵乘以和加上一个常量就是把矩阵的每个元素乘以和加上一个常量.</h5><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-20-53-06.png\" alt><br>矩阵乘矩阵必须要符合条件才能乘，如图必须第一个矩阵的列数和第二个矩阵的行数相同相乘才有意义。<br>关于新得到的矩阵每一个元素都是什么，有不同的数学定义，这个地方比较不容易记住，这里给大家提供一个容易记得方法，比如左下角这个8，他的坐标是三行一列，这里三行对应第一个矩阵（0，4），一列对应第二个矩阵（3，2），这两个向量点乘。<br><img src=\"/2020/03/10/GameCourse101/2020-03-08-21-50-50.png\" alt><br>矩阵乘法是没有交换律的，但是矩阵是由结合律和分配律。  </p>\n<h5 id=\"矩阵乘向量\"><a href=\"#矩阵乘向量\" class=\"headerlink\" title=\"矩阵乘向量\"></a>矩阵乘向量</h5><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-21-53-53.png\" alt></p>\n<blockquote>\n<p>一个矩阵如何和一个向量乘？当我们认为向量是列向量就有意义了（也就是说M永远为1）。    </p>\n</blockquote>\n<p><em>这是最重要的核心。</em><br>下面表示一个2D向量按Y轴镜像的操作。</p>\n<h5 id=\"矩阵转置\"><a href=\"#矩阵转置\" class=\"headerlink\" title=\"矩阵转置\"></a>矩阵转置</h5><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-22-01-06.png\" alt><br>性质： 如果要乘两个矩阵在转置好比相对后一个矩阵做装置在乘以前一个矩阵做转置的结果。</p>\n<h5 id=\"特殊的矩阵，单位矩阵\"><a href=\"#特殊的矩阵，单位矩阵\" class=\"headerlink\" title=\"特殊的矩阵，单位矩阵\"></a>特殊的矩阵，单位矩阵</h5><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-22-07-51.png\" alt><br>对角阵，只有对角线上有非零的元素，<br>矩阵的逆：如果你能找到一个矩阵，和原来的矩阵相乘，不管乘得顺序，得到的结果都是I，那么我们就认为这两个矩阵是互逆的。<br>逆矩阵的计算和转置的矩阵很相似。</p>\n<h5 id=\"向量点乘和叉乘的矩阵形式\"><a href=\"#向量点乘和叉乘的矩阵形式\" class=\"headerlink\" title=\"向量点乘和叉乘的矩阵形式\"></a>向量点乘和叉乘的矩阵形式</h5><p><img src=\"/2020/03/10/GameCourse101/2020-03-08-22-12-11.png\" alt><br>点乘：向量a点乘向量b 等于向量a转置和向量b的乘法。<br>叉乘：相对点乘困难一些，相当于把向量a转换成一个矩阵（dual matrix）乘以向量b</p>"},{"title":"Git 学习笔记","date":"2019-12-03T03:32:35.000Z","_content":"\n### 常用命令\n\n##### 1. 设置 Git 全局用户名和邮箱\n\n   ```\n   $ git config --global user.name \"gitaccount\" #设置用户名\n   $ git config --global user.email \"gitaccount@example.com\" #设置用户名\n   $ git config --global user.name #查看用户名\n   $ git config --global user.email #查看邮箱\n   ```\n<!-- more -->\n\n##### 2. 使用流程命令\n\n   ```\n   $ git init #初始化仓库\n   $ git status # 查看git版本控制状态\n   $ git add xxxxxx # 加入文件tracked\n   $ git commit -m \"描述\" #提交文件到暂存区\n   $ git log #查看日志\n   $ git remote add origin https://github.com/sunyuxianggit/sunyuxianggit.github.io.git #预提交到远端仓库（关联本地和远程仓库）\n   $ git push -u origin master\n   ```\n\n##### 3. 常见报错\n\n   ```\n   fatal: remote origin already exists.\n   $ git remote rm origin #删除远程 URL\n   ref:https://blog.csdn.net/top_code/article/details/50381432\n   ```\n##### 4. 速度问题\n   \n* 设置\n```\ngit config --global http.proxy 'socks5://127.0.0.1:1080' \ngit config --global https.proxy 'socks5://127.0.0.1:1080'\n```\n\n* 查看\n```\ngit config --global http.proxy\ngit config --global https.proxy\n```\n\n* 取消设置\n```\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n\n```\n","source":"_posts/Git-学习笔记.md","raw":"---\ntitle: Git 学习笔记\ndate: 2019-12-03 11:32:35\ntags: Git\n---\n\n### 常用命令\n\n##### 1. 设置 Git 全局用户名和邮箱\n\n   ```\n   $ git config --global user.name \"gitaccount\" #设置用户名\n   $ git config --global user.email \"gitaccount@example.com\" #设置用户名\n   $ git config --global user.name #查看用户名\n   $ git config --global user.email #查看邮箱\n   ```\n<!-- more -->\n\n##### 2. 使用流程命令\n\n   ```\n   $ git init #初始化仓库\n   $ git status # 查看git版本控制状态\n   $ git add xxxxxx # 加入文件tracked\n   $ git commit -m \"描述\" #提交文件到暂存区\n   $ git log #查看日志\n   $ git remote add origin https://github.com/sunyuxianggit/sunyuxianggit.github.io.git #预提交到远端仓库（关联本地和远程仓库）\n   $ git push -u origin master\n   ```\n\n##### 3. 常见报错\n\n   ```\n   fatal: remote origin already exists.\n   $ git remote rm origin #删除远程 URL\n   ref:https://blog.csdn.net/top_code/article/details/50381432\n   ```\n##### 4. 速度问题\n   \n* 设置\n```\ngit config --global http.proxy 'socks5://127.0.0.1:1080' \ngit config --global https.proxy 'socks5://127.0.0.1:1080'\n```\n\n* 查看\n```\ngit config --global http.proxy\ngit config --global https.proxy\n```\n\n* 取消设置\n```\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n\n```\n","slug":"Git-学习笔记","published":1,"updated":"2020-03-14T08:15:34.438Z","_id":"ck7rbphzb0006w8p4cyb08wq9","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><h5 id=\"1-设置-Git-全局用户名和邮箱\"><a href=\"#1-设置-Git-全局用户名和邮箱\" class=\"headerlink\" title=\"1. 设置 Git 全局用户名和邮箱\"></a>1. 设置 Git 全局用户名和邮箱</h5>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name &quot;gitaccount&quot; #设置用户名</span><br><span class=\"line\">$ git config --global user.email &quot;gitaccount@example.com&quot; #设置用户名</span><br><span class=\"line\">$ git config --global user.name #查看用户名</span><br><span class=\"line\">$ git config --global user.email #查看邮箱</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n\n<h5 id=\"2-使用流程命令\"><a href=\"#2-使用流程命令\" class=\"headerlink\" title=\"2. 使用流程命令\"></a>2. 使用流程命令</h5>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init #初始化仓库</span><br><span class=\"line\">$ git status # 查看git版本控制状态</span><br><span class=\"line\">$ git add xxxxxx # 加入文件tracked</span><br><span class=\"line\">$ git commit -m &quot;描述&quot; #提交文件到暂存区</span><br><span class=\"line\">$ git log #查看日志</span><br><span class=\"line\">$ git remote add origin https:&#x2F;&#x2F;github.com&#x2F;sunyuxianggit&#x2F;sunyuxianggit.github.io.git #预提交到远端仓库（关联本地和远程仓库）</span><br><span class=\"line\">$ git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-常见报错\"><a href=\"#3-常见报错\" class=\"headerlink\" title=\"3. 常见报错\"></a>3. 常见报错</h5>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal: remote origin already exists.</span><br><span class=\"line\">$ git remote rm origin #删除远程 URL</span><br><span class=\"line\">ref:https:&#x2F;&#x2F;blog.csdn.net&#x2F;top_code&#x2F;article&#x2F;details&#x2F;50381432</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-速度问题\"><a href=\"#4-速度问题\" class=\"headerlink\" title=\"4. 速度问题\"></a>4. 速度问题</h5><ul>\n<li><p>设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39; </span><br><span class=\"line\">git config --global https.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy</span><br><span class=\"line\">git config --global https.proxy</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>取消设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#2d6b96","paginator":"#6AA7D2","button_hover":"#3B8BC4","text_selection":"#6AA7D2","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#6AA7D2","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"文章":"/","归档":"/archives"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":true,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":null,"top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2013,"footer_custom_text":"Hi, welcome to my <a href=\"https://sunyuxianggit.github.io/\">blog</a>!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":true,"url":"https://github.com/sunyuxianggit","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"SunYuxiangのBlog","subtitle":"好记性,不如烂笔头.今天你要写点什么？","description":"","author":"Sun Yuxiang","language":"zh-Hans","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/sunyuxianggit/sunyuxianggit.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"sitemap":{"path":"sitemap.xml","rel":false},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><h5 id=\"1-设置-Git-全局用户名和邮箱\"><a href=\"#1-设置-Git-全局用户名和邮箱\" class=\"headerlink\" title=\"1. 设置 Git 全局用户名和邮箱\"></a>1. 设置 Git 全局用户名和邮箱</h5>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name &quot;gitaccount&quot; #设置用户名</span><br><span class=\"line\">$ git config --global user.email &quot;gitaccount@example.com&quot; #设置用户名</span><br><span class=\"line\">$ git config --global user.name #查看用户名</span><br><span class=\"line\">$ git config --global user.email #查看邮箱</span><br></pre></td></tr></table></figure>","more":"<h5 id=\"2-使用流程命令\"><a href=\"#2-使用流程命令\" class=\"headerlink\" title=\"2. 使用流程命令\"></a>2. 使用流程命令</h5>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init #初始化仓库</span><br><span class=\"line\">$ git status # 查看git版本控制状态</span><br><span class=\"line\">$ git add xxxxxx # 加入文件tracked</span><br><span class=\"line\">$ git commit -m &quot;描述&quot; #提交文件到暂存区</span><br><span class=\"line\">$ git log #查看日志</span><br><span class=\"line\">$ git remote add origin https:&#x2F;&#x2F;github.com&#x2F;sunyuxianggit&#x2F;sunyuxianggit.github.io.git #预提交到远端仓库（关联本地和远程仓库）</span><br><span class=\"line\">$ git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-常见报错\"><a href=\"#3-常见报错\" class=\"headerlink\" title=\"3. 常见报错\"></a>3. 常见报错</h5>   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal: remote origin already exists.</span><br><span class=\"line\">$ git remote rm origin #删除远程 URL</span><br><span class=\"line\">ref:https:&#x2F;&#x2F;blog.csdn.net&#x2F;top_code&#x2F;article&#x2F;details&#x2F;50381432</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-速度问题\"><a href=\"#4-速度问题\" class=\"headerlink\" title=\"4. 速度问题\"></a>4. 速度问题</h5><ul>\n<li><p>设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39; </span><br><span class=\"line\">git config --global https.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy</span><br><span class=\"line\">git config --global https.proxy</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>取消设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --unset http.proxy</span><br><span class=\"line\">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"title":"Houdini 学习笔记","date":"2019-12-01T14:53:13.000Z","_content":"\n\n## 软件结构\n我们可以看到，houdini是一个将各种独立的语境（context）融合在一起的操作系统。\n![](Houdini_Entagma_学习笔记/2020-03-04-14-02-15.png)\n<!-- more -->\n## 几何对象\n\n### 层次\n![](Houdini_Entagma_学习笔记/2020-03-03-19-00-29.png)\n1. Detail 最高层级的数据，对应整个Object；\n2. Primitive 几何对象中的组成部件，比如一个三角面片，一张NURBS曲面，或Volume；\n3. Point 几何对象上面的一个点；\n4. Vertex 一个Point可能同时存在于多个相邻的Primitive上，因此共享同一个Point的 多个primitive会各自存一份对Point的引用，称为Vertex。\n\n### 属性优先级\n\n![](Houdini_Entagma_学习笔记/2020-03-04-16-03-43.png)\n\n## 变量类型\n\n### 属性 Attribute\n最重要的数据类型就数属性了\n#### 读取/修改属性\n* 使用已经定义的同层级属性的方式为：@变量名\n    * v@Cd 颜色属性\n    * @P 位置属性\n    * @ptnum 点ID\n    * @primnum 图元ID\n* 不同层级之间的属性读取\n    * point(...)\n    * prim(...)\n    * detail(...)\n\n\n#### 增加属性\n* 数据类型 @变量名\n    * i@name（赋予整型）\n    * i[]@name（赋予数组）\n* 在定义一个新的属性时，等号右边（即我们赋予该属性的初始值）必须是常量，也就是说只能是具体的数值， 不能包含任何函数或运算。\n    * 对：float@mass=1；\n    * 错：float@mass =1/area;\n    * 错：vector @up = set(0,1,1);\n\n\n#### 删除属性\n* 属性在整个节点网络中，一旦你创建了，在人为手动删除它之前，就是一直存在并且全局都可见的（就是任何时候，只有你想要就可以读取）。因此属性是非常消耗空间和性能的，应当尽可能节约使用，如果预计将来再也不需要这个属性时，就应当使用Attribute Delete删除掉。\n* [Attribute Delete](https://link.zhihu.com/?target=https%3A//www.sidefx.com/docs/houdini/nodes/sop/attribdelete.html)\n\n#### 常用属性\n ![](Houdini_Entagma_学习笔记/entagma_attributes.png)\n\n\n\n### 变量 Variable\n* 一些VEX代码中的变量，如果它们只会在该节点的代码里面用到，那么就没有必要设置为属性了，我们称之为局部变量，就是它只属于所在的这个节点，节点算完之后就把它所占用的空间释放了，生不带来，死不带去。\n\n  ![](Houdini_Entagma_学习笔记/2020-02-26-17-23-21.png)\n* 数组创建 float array_name[] \n* 变量转向量 vector pos = set(x_var,y_var,z_var)\n\n### 参数 Parameter\n* 参数一般出现在节点的paramter窗口，我们可以通过参数这些对节点进行调整。\n参数非常重要，所以这里详细讲它的几种使用方式：\n    * 在窗口上，对参数进行自动链接；\n      右键点击源参数，选择\"Copy parameter\"。\n      右击你要粘贴到的那个参数，选择\"Paste relative reference\"。\n    * 在窗口上，对参数进行手动链接；\n      此处使用的并不是VEX，而是HScript表达式，但是由于太重要了，就也写在这里：\n      在目标参数处输入函数ch(\"源参数路径\")，源参数路径的格式有3种情况：\n      ![](Houdini_Entagma_学习笔记/2020-03-03-19-30-55.png)\n    * 在窗口上，手动创建参数；流程见下图，注意在\"Parameter Description\"一栏，我们新创建的变量有2个名称：Name和Label，Name是参数“真正”的名字，我们在使用ch(\"参数名\")或者VEX内引用该参数时，都用的是Name，注意，Name不能包含空格；但是Label可以包含空格，作为参数在用户界面上显示的名称。\n      ![](Houdini_Entagma_学习笔记/2020-03-03-19-31-43.png)\n    * 在Wrangle节点里，用VEX代码读取窗口上的参数；同上，使用chi, chf, chv, chs即可。\n\n\n## 常用函数\n\n* printf 打印函数 \n    ` printf(\"str\"); `\n\n* addpoint 添加点函数\n    ```c\n    int  addpoint(int geohandle, int point_number)\n    int  addpoint(int geohandle, vector pos)\n    ```\n\n* addprim 添加图元函数 \n    Adds a primitive to the geometry.\n\n    `int  addprim(int geohandle, string type)`\n\n    ```c\n    int  addprim(int geohandle, string type, int pt0)\n\n    int  addprim(int geohandle, string type, int pt0, int pt1)\n\n    int  addprim(int geohandle, string type, int pt0, int pt1, int pt2)\n\n    int  addprim(int geohandle, string type, int pt0, int pt1, int pt2, int pt3)\n    ```\n\n* addvertex 添加顶点函数 \n    Adds a vertex to a primitive in a geometry.\n    `int  addvertex(int geohandle, int prim_num, int point_num)`\n\n* rand 随机函数 \n    Creates a random number between 0 and 1 from a seed.\n    ```\n    float  rand(float seed)\n    vector2  rand(float seed)\n    vector  rand(float seed)\n    vector4  rand(float seed)\n    float  rand(float seed, float seed2)\n    vector2  rand(float seed, float seed2)\n    vector  rand(float seed, float seed2)\n    vector4  rand(float seed, float seed2)\n    float  rand(vector2 seed)\n    vector2  rand(vector2 seed)\n    vector  rand(vector2 seed)\n    vector4  rand(vector2 seed)\n    float  rand(vector seed)\n    vector2  rand(vector seed)\n    vector  rand(vector seed)\n    vector4  rand(vector seed)\n    float  rand(vector4 seed)\n    vector2  rand(vector4 seed)\n    vector  rand(vector4 seed)\n    vector4  rand(vector4 seed)\n    ```\n\n* fit 重映射函数 \n    Takes the value in one range and shifts it to the corresponding value in a new range.\n    `float  fit(float value, float omin, float omax, float nmin, float nmax)`\n\n* ch 滑块函数\n    Evaluates a channel (or parameter) and return its value.\n    `ch(\"string\");`\n\n* curlnoise 卷曲噪点函数 \n    Computes divergence free noise based on Perlin noise.\n    `vector  curlnoise(vector xyz);`\n    `vector  curlnoise(vector4 xyzt)`\n\n* push 数组添加元素函数 \n    Adds an item to an array.\n    `void  push(<type>&array[], <type>value)` \n    `void  push(<type>&array[], <type>values[])`\n\n* pop 数组弹出函数 \n    Removes the last element of an array and returns it. `<type> pop(<type>&array[])`\n    `<type> pop(<type>&array[], int index)`\n\n* removeindex 数组删除元素函数 \n    Removes an item at the given index from an array.\n    `<type> removeindex(<type>&array[], int index)`\n\n* nearpoint 查找最近顶点函数 \n    Finds the closest point in a geometry. \n    ```c\n    int  nearpoint(<geometry>geometry, vector pt)\n\n    int  nearpoint(<geometry>geometry, vector pt, float maxdist)\n\n    int  nearpoint(<geometry>geometry, string ptgroup, vector pt)\n\n    int  nearpoint(<geometry>geometry, string ptgroup, vector pt, float maxdist)```\n    ```\n```\n    \n* nearpoints 查找最近顶点函数 \n    Finds the closest point in a geometry. \n​```c\n    int [] nearpoints(<geometry>geometry, vector pt, float maxdist)\n    \n    int [] nearpoints(<geometry>geometry, vector pt, float maxdist, int maxpts)\n    \n    int [] nearpoints(<geometry>geometry, string ptgroup, vector pt, float maxdist)\n    \n    int [] nearpoints(<geometry>geometry, string ptgroup, vector pt, float maxdist, int maxpts)\n```\n\n\n* point 从几何体上读取点的某个属性的值函数 \n    Reads a point attribute value from a geometry. \n    `point(<geometry>geometry, string attribute_name, int pointnumber)`\n\n* primpoints 从几何体上读取点函数\n    Returns the list of points on a primitive.\n    `int [] primpoints(<geometry>geometry, int primnum)`\n\n* distance 距离函数 \n    Returns the distance between two points. \n    `float  distance(vector2 a, vector2 b)`\n\n* removepoint 删除点函数 \n    Removes a point from the geometry. \n    `int  removepoint(int geohandle, int point_number)`\n\n* primpoint 将图元/顶点转换为点的ID函数. \n    Converts a primitive/vertex pair into a point number. \n    `int primpoint(<geometry>, int primnum, int vertex)`\n\n* itoa 整型转字符串函数 \n    Converts an integer to a string. \n    `string  itoa(int number)`\n\n* getbbox_max 计算几何的边界框的最小值函数 \n    Returns the maximum of the bounding box for the geometry.. \n    `vector  getbbox_max(geometry)`\n\n* getbbox_max 计算几何的边界框的最大值函数 \n    Computes the minimum of the bounding box for the geometry. \n    `vector  getbbox_max(<geometry>geometry, string primgroup)`\n\n* getbbox_size 返回边界框的尺寸函数\n    Returns the size of the bounding box for the geometry.\n    `vector  getbbox_size(<geometry>geometry)`\n    `vector  getbbox_size(<geometry>geometry, string primgroup)`\n\n* lerp 在值之间执行双线性插值函数\n    ```c\n    Performs bilinear interpolation between the values.\n    float  lerp(float value1, float value2, float amount)\n    Performs bilinear interpolation between corresponding components.\n    <vector> lerp(<vector>value1, <vector>value2, float amount)\n    ```\n\n* removeprim 删除图元函数\n    Removes a primitive from the geometry.\n    `int  removeprim(int geohandle, int prim_number, int andpoints)`\n\n* pow 冪函數 \n    Raises the first argument to the power of the second argument.\n    ```c\n    float  pow(float n, float exponent)\n    <vector> pow(<vector>v, float exponent)\n    ```\n\n* setpointattrib设置顶点属性函数\n    Sets a point attribute in a geometry.\n    ```c\n    int  setpointattrib(int geohandle, string name, int point_num, <type>value, string mode=\"set\")\n    int  setpointattrib(int geohandle, string name, int point_num, <type>value[], string mode=\"set\")\n    ```\n\n\n* npoints 得到几何体的点数函数\n    Returns the number of points in the input or geometry file.\n    `int  npoints(<geometry>geometry)`\n\n* resize 设置数组长度函数\n    Sets the length of an array.\n    `void  resize(<type>&array[], int size)`\n\n* argsort 数组排序函数\n    Returns the indices of a sorted version of an array.\n    `int [] argsort(<type>value[])`\n\n* setpointgroup 添加点组函数\n    Adds or removes a point to/from a group in a geometry.\n    `int  setpointgroup(int geohandle, string name, int point_num, int value, string mode=\"set\")`\n    geohandle\n\n    A handle to the geometry to write to. Currently the only valid value is 0 or geoself, which means the current geometry in a node. (This argument may be used in the future to allow writing to other geometries.)\n\n    name\n\n    The name of the group to modify.\n\n    point_num\n\n    The point number to add or remove from the group.\n\n    value\n\n    1 to put the point in the group, 0 to remove the point from the group. This is ignored if mode is \"toggle\".\n\n    mode\n\n    Use \"set\" to set the point’s membership according to the value. Use \"toggle\" to toggle the point’s membership, regardless of the value.\n\n* pointprims 返回一个图元包含的点函数\n    pointprims\n    Returns the list of primitives containing a point.\n    `int [] pointprims(<geometry>geometry, int ptnum)`\n\n\n\n* intersect 计算射线与几何的交叉函数 \n    This function computes the first intersection of a ray with geometry.\n\n\n* detail 从几何读取详细信息属性值的函数\n\n    Reads the value of a detail attribute value from a geometry.\n    ```\n    type> detail(<geometry>geometry, string attribute_name, int ignored=0)\n\n    <type>[] detail(<geometry>geometry, string attribute_name, int ignored=0)\n    ```\n\n* radians 弧度函数\n    Converts the argument from degrees into radians.\n    从度数转弧度\n    `float  radians(float num_in_degs)`\n\n* rotate  旋转函数\n    Applies a rotation to the given matrix.\n    ```void  rotate(matrix2 &m, float amount)\n\n    void  rotate(matrix3 &m, float amount, vector axis)\n\n    void  rotate(matrix &m, float amount, vector axis)\n\n    void  rotate(matrix3 &m, vector angles, int xyz)\n\n    void  rotate(matrix &m, vector angles, int xyz)\n\n    void  rotate(matrix3 &m, float angle, int axis)\n\n    void  rotate(matrix &m, float angle, int axis)```\n    ```\n\n\n\n* scale 缩放函数\n    Scales the given matrix in three directions simultaneously (X, Y, Z - given by the components of the scale_vector)\n    ```\n    void  scale(matrix2 &m, vector2 scale_vector)\n\n    void  scale(matrix &m, vector scale_vector)\n\n    void  scale(matrix3 &m, vector scale_vector)\n    ```\n\n* translate 位移函数\n    Translates a matrix by a vector.\n    ```\n    void  translate(matrix &m, vector amount)\n\n    void  translate(matrix &m, vector4 amount)\n    ```\n\n* quaternion  四元数函数\n    Creates a vector4 representing a quaternion.\n    创建一个表示四元数的vector4\n\n    ```\n    vector4  quaternion(matrix3 rotations)\n\n    Creates a vector4 representing a quaternion from a 3×3 rotational matrix.\n\n    vector4  quaternion(float angle, vector axis)\n\n    Creates a vector4 representing a quaternion from an angle and axis. The angle is specified in radians.\n\n    vector4  quaternion(vector angleaxis)\n\n    Creates a vector4 representing a quaternion from a combined angle/axis. This is the normalized rotation axis multiplied by the rotation angle in radians.\n\n    There used to be a fourth form that took a rotation vector. It has been renamed to eulertoquaternion and now takes radians.\n    ```\n* qrotate 四元数旋转函数\n\n    Rotates a vector by a quaternion.\n    通过四元数旋转向量。\n    `vector  qrotate(vector4 quaternion, vector v)`\n\n* slerp 四元数基于偏差的融和函数\n\n    Quaternion blend between q1 and q2 based on the bias.\n    `vector4  slerp(vector4 q1, vector4 q2, float bias)`\n\n* primintrinsic  从几何读取基本图元函数\n\n    Reads a primitive intrinsic from a geometry.\n    从几何读取基本图元\n    ```\n    <type> primintrinsic(<geometry>geometry, string intrinsic_name, int prim_num)\n\n    <type>[] primintrinsic(<geometry>geometry, string intrinsic_name, int prim_num)\n    ```\n\n\n## 常用表达式\n* $FF 帧变量\n\n## 节点\n\n* scatter\n撒点 散布节点\n\n* isooffset\n配合散布节点使用 可以散布到物体内部并且在位置上有一定随机\n\n* attribute randomize\n随机某个属性\n\n* attribute paint\n绘制变量属性,结合scatter可以实现局部撒点\n\n* relax\n\n\n\n\n## 快捷键\n* 弹出代码框 ALT+E\n* 弹出当前选中的功能区 ALT + SHIFT+ C\n* 调整焦点 选中相机视口 回车（Show handle）+ Z\n\n## vex语法\n\n* for 循环\n\n    ```c\n    for(int i = 0 ; i>num;i++){\n        something;\n    }\n    ```\n\n* foreach循环\n\n    ```c\n    foreach(int npt;npts){\n        something;\n        }\n    ```\n\n* 条件判断\n    ```\n    if(){\n        something;\n    }\n    else{\n        something;\n    }\n    ```\n\n    \n    ```\n    if(){\n        something;\n    }\n    else if(){\n        something;\n    }\n    else{\n        something;\n    }\n    ```\n\n\n\n\n## 外部函数导入和外部编辑器设置\n\n* 外部编辑器设置\n    1. 找到 C:\\Users\\username\\Documents\\houdini18.0 下找到** houdini.env **\n    2. 加入这一行代码  注意路径和路径反斜线写法\n    `Editor = \"C:/Users/username/AppData/Local/Programs/Microsoft VS Code/Code.exe\"`\n    3. 然后重启houdini\n* 外部函数导入\n    1. 找到 C:\\Users\\username\\Documents\\houdini18.0 下找到** houdini.env **\n    2. 加入这一行代码  注意路径反斜线写法和结尾字符\n    `HOUDINI_VEX_PATH = \"C:/Users/sunyuxiang/Documents/houdini18.0/Custom_VEX;&\"`\n    3. 然后把函数放到这里即可C:\\Users\\sunyuxiang\\Documents\\houdini18.0\\Custom_VEX\n    4. 然后重启houdini\n    5. 调用方法 #include \"你的函数文件夹名\"\n* 打开代码窗口\n    1. Alt+E\n\n\n## 每节例子总结\n\n\n* 给顶点的法线信息指认随机生成的向量，通过滑块调整随机种子\n    ```c\n    float seed = chf(\"seed\");\n\n    // set random scale (0 ... 0.1)\n\n    float pscale = rand(@ptnum+seed);//定义一个 浮点变量\n    pscale *= .1; //浮点变量缩小十分之1\n    f@pscale = pscale; //设置属性\n\n    // set random orientation using N({-1,-1,-1} ... {1,1,1})\n    vector randdir = rand(@ptnum+seed);\n\n    //randdir = fit(randdir,{0,0,0},{1,1,1},{-1,-1,-1},{1,1,1});\n    // 因为@ptnum是正轴递增，所以random的结果太相似 所以重新映射一下\n    randdir = fit01(randdir,{-1,-1,-1},{1,1,1}); \n\n    //给顶点的法线信息指认随机生成的向量\n    v@N = randdir;\n    ```\n\n* 所有点的向量实时指向某个点\n    为了得到指向某个点的向量，我们需要用目标点减去基点如图：\n    ![](Houdini_Entagma_学习笔记/2020-02-18-20-23-42.png)\n\n    ```c\n\n    //拿到接口1的 第0个顶点的属性名\"P\"的值\n    vector tgtpos = point(1,\"P\",0);\n    // 目标点减去 模板点 得到向量\n    vector dir = tgtpos - v@P;\n    //归一化向量\n    //v@N =dir;\n    v@N =normalize(dir);\n    ```\n\n* 使用卷积化随机函数创建向量赋予点\n\n    ```c\n    vector f = chv(\"Frequency\");\n    vector o = chv(\"offset\");\n    //这里是卷积化随机向量\n    vector dir = curlnoise((v@P * f)+ o);\n    //归一化向量\n    v@N =normalize(dir);\n    ```\n\n\n* 使用nearpoints函数查找最近的点并创建线\n    ```c\n\n    float maxdist = chf(\"max_Dist\");\n    float mindist = chf(\"Min_Dist\");\n\n    //找到函数\n    int npts[] = nearpoints(0,v@P,maxdist);\n\n    //移除找到的自己\n    removeindex(npts,0);\n\n    //赋予属性给点\n    i[]@npts = npts;\n\n    foreach(int npt;npts){\n        vector npos = point(0,\"p\",npt);\n        float dist = distance(v@P,npos);\n        if(dist > mindist){\n            addprim(0,\"polyline\",@ptnum,npt);\n        }\n    }\n\n    ```\n\n\n## 理解矩阵很好的教程\n\n ![](Houdini_Entagma_学习笔记/entagma_martrix.png)\n\n","source":"_posts/Houdini_Entagma_学习笔记.md","raw":"---\ntitle: Houdini 学习笔记\ndate: 2019-12-01 22:53:13\ntags: Houdini\n---\n\n\n## 软件结构\n我们可以看到，houdini是一个将各种独立的语境（context）融合在一起的操作系统。\n![](Houdini_Entagma_学习笔记/2020-03-04-14-02-15.png)\n<!-- more -->\n## 几何对象\n\n### 层次\n![](Houdini_Entagma_学习笔记/2020-03-03-19-00-29.png)\n1. Detail 最高层级的数据，对应整个Object；\n2. Primitive 几何对象中的组成部件，比如一个三角面片，一张NURBS曲面，或Volume；\n3. Point 几何对象上面的一个点；\n4. Vertex 一个Point可能同时存在于多个相邻的Primitive上，因此共享同一个Point的 多个primitive会各自存一份对Point的引用，称为Vertex。\n\n### 属性优先级\n\n![](Houdini_Entagma_学习笔记/2020-03-04-16-03-43.png)\n\n## 变量类型\n\n### 属性 Attribute\n最重要的数据类型就数属性了\n#### 读取/修改属性\n* 使用已经定义的同层级属性的方式为：@变量名\n    * v@Cd 颜色属性\n    * @P 位置属性\n    * @ptnum 点ID\n    * @primnum 图元ID\n* 不同层级之间的属性读取\n    * point(...)\n    * prim(...)\n    * detail(...)\n\n\n#### 增加属性\n* 数据类型 @变量名\n    * i@name（赋予整型）\n    * i[]@name（赋予数组）\n* 在定义一个新的属性时，等号右边（即我们赋予该属性的初始值）必须是常量，也就是说只能是具体的数值， 不能包含任何函数或运算。\n    * 对：float@mass=1；\n    * 错：float@mass =1/area;\n    * 错：vector @up = set(0,1,1);\n\n\n#### 删除属性\n* 属性在整个节点网络中，一旦你创建了，在人为手动删除它之前，就是一直存在并且全局都可见的（就是任何时候，只有你想要就可以读取）。因此属性是非常消耗空间和性能的，应当尽可能节约使用，如果预计将来再也不需要这个属性时，就应当使用Attribute Delete删除掉。\n* [Attribute Delete](https://link.zhihu.com/?target=https%3A//www.sidefx.com/docs/houdini/nodes/sop/attribdelete.html)\n\n#### 常用属性\n ![](Houdini_Entagma_学习笔记/entagma_attributes.png)\n\n\n\n### 变量 Variable\n* 一些VEX代码中的变量，如果它们只会在该节点的代码里面用到，那么就没有必要设置为属性了，我们称之为局部变量，就是它只属于所在的这个节点，节点算完之后就把它所占用的空间释放了，生不带来，死不带去。\n\n  ![](Houdini_Entagma_学习笔记/2020-02-26-17-23-21.png)\n* 数组创建 float array_name[] \n* 变量转向量 vector pos = set(x_var,y_var,z_var)\n\n### 参数 Parameter\n* 参数一般出现在节点的paramter窗口，我们可以通过参数这些对节点进行调整。\n参数非常重要，所以这里详细讲它的几种使用方式：\n    * 在窗口上，对参数进行自动链接；\n      右键点击源参数，选择\"Copy parameter\"。\n      右击你要粘贴到的那个参数，选择\"Paste relative reference\"。\n    * 在窗口上，对参数进行手动链接；\n      此处使用的并不是VEX，而是HScript表达式，但是由于太重要了，就也写在这里：\n      在目标参数处输入函数ch(\"源参数路径\")，源参数路径的格式有3种情况：\n      ![](Houdini_Entagma_学习笔记/2020-03-03-19-30-55.png)\n    * 在窗口上，手动创建参数；流程见下图，注意在\"Parameter Description\"一栏，我们新创建的变量有2个名称：Name和Label，Name是参数“真正”的名字，我们在使用ch(\"参数名\")或者VEX内引用该参数时，都用的是Name，注意，Name不能包含空格；但是Label可以包含空格，作为参数在用户界面上显示的名称。\n      ![](Houdini_Entagma_学习笔记/2020-03-03-19-31-43.png)\n    * 在Wrangle节点里，用VEX代码读取窗口上的参数；同上，使用chi, chf, chv, chs即可。\n\n\n## 常用函数\n\n* printf 打印函数 \n    ` printf(\"str\"); `\n\n* addpoint 添加点函数\n    ```c\n    int  addpoint(int geohandle, int point_number)\n    int  addpoint(int geohandle, vector pos)\n    ```\n\n* addprim 添加图元函数 \n    Adds a primitive to the geometry.\n\n    `int  addprim(int geohandle, string type)`\n\n    ```c\n    int  addprim(int geohandle, string type, int pt0)\n\n    int  addprim(int geohandle, string type, int pt0, int pt1)\n\n    int  addprim(int geohandle, string type, int pt0, int pt1, int pt2)\n\n    int  addprim(int geohandle, string type, int pt0, int pt1, int pt2, int pt3)\n    ```\n\n* addvertex 添加顶点函数 \n    Adds a vertex to a primitive in a geometry.\n    `int  addvertex(int geohandle, int prim_num, int point_num)`\n\n* rand 随机函数 \n    Creates a random number between 0 and 1 from a seed.\n    ```\n    float  rand(float seed)\n    vector2  rand(float seed)\n    vector  rand(float seed)\n    vector4  rand(float seed)\n    float  rand(float seed, float seed2)\n    vector2  rand(float seed, float seed2)\n    vector  rand(float seed, float seed2)\n    vector4  rand(float seed, float seed2)\n    float  rand(vector2 seed)\n    vector2  rand(vector2 seed)\n    vector  rand(vector2 seed)\n    vector4  rand(vector2 seed)\n    float  rand(vector seed)\n    vector2  rand(vector seed)\n    vector  rand(vector seed)\n    vector4  rand(vector seed)\n    float  rand(vector4 seed)\n    vector2  rand(vector4 seed)\n    vector  rand(vector4 seed)\n    vector4  rand(vector4 seed)\n    ```\n\n* fit 重映射函数 \n    Takes the value in one range and shifts it to the corresponding value in a new range.\n    `float  fit(float value, float omin, float omax, float nmin, float nmax)`\n\n* ch 滑块函数\n    Evaluates a channel (or parameter) and return its value.\n    `ch(\"string\");`\n\n* curlnoise 卷曲噪点函数 \n    Computes divergence free noise based on Perlin noise.\n    `vector  curlnoise(vector xyz);`\n    `vector  curlnoise(vector4 xyzt)`\n\n* push 数组添加元素函数 \n    Adds an item to an array.\n    `void  push(<type>&array[], <type>value)` \n    `void  push(<type>&array[], <type>values[])`\n\n* pop 数组弹出函数 \n    Removes the last element of an array and returns it. `<type> pop(<type>&array[])`\n    `<type> pop(<type>&array[], int index)`\n\n* removeindex 数组删除元素函数 \n    Removes an item at the given index from an array.\n    `<type> removeindex(<type>&array[], int index)`\n\n* nearpoint 查找最近顶点函数 \n    Finds the closest point in a geometry. \n    ```c\n    int  nearpoint(<geometry>geometry, vector pt)\n\n    int  nearpoint(<geometry>geometry, vector pt, float maxdist)\n\n    int  nearpoint(<geometry>geometry, string ptgroup, vector pt)\n\n    int  nearpoint(<geometry>geometry, string ptgroup, vector pt, float maxdist)```\n    ```\n```\n    \n* nearpoints 查找最近顶点函数 \n    Finds the closest point in a geometry. \n​```c\n    int [] nearpoints(<geometry>geometry, vector pt, float maxdist)\n    \n    int [] nearpoints(<geometry>geometry, vector pt, float maxdist, int maxpts)\n    \n    int [] nearpoints(<geometry>geometry, string ptgroup, vector pt, float maxdist)\n    \n    int [] nearpoints(<geometry>geometry, string ptgroup, vector pt, float maxdist, int maxpts)\n```\n\n\n* point 从几何体上读取点的某个属性的值函数 \n    Reads a point attribute value from a geometry. \n    `point(<geometry>geometry, string attribute_name, int pointnumber)`\n\n* primpoints 从几何体上读取点函数\n    Returns the list of points on a primitive.\n    `int [] primpoints(<geometry>geometry, int primnum)`\n\n* distance 距离函数 \n    Returns the distance between two points. \n    `float  distance(vector2 a, vector2 b)`\n\n* removepoint 删除点函数 \n    Removes a point from the geometry. \n    `int  removepoint(int geohandle, int point_number)`\n\n* primpoint 将图元/顶点转换为点的ID函数. \n    Converts a primitive/vertex pair into a point number. \n    `int primpoint(<geometry>, int primnum, int vertex)`\n\n* itoa 整型转字符串函数 \n    Converts an integer to a string. \n    `string  itoa(int number)`\n\n* getbbox_max 计算几何的边界框的最小值函数 \n    Returns the maximum of the bounding box for the geometry.. \n    `vector  getbbox_max(geometry)`\n\n* getbbox_max 计算几何的边界框的最大值函数 \n    Computes the minimum of the bounding box for the geometry. \n    `vector  getbbox_max(<geometry>geometry, string primgroup)`\n\n* getbbox_size 返回边界框的尺寸函数\n    Returns the size of the bounding box for the geometry.\n    `vector  getbbox_size(<geometry>geometry)`\n    `vector  getbbox_size(<geometry>geometry, string primgroup)`\n\n* lerp 在值之间执行双线性插值函数\n    ```c\n    Performs bilinear interpolation between the values.\n    float  lerp(float value1, float value2, float amount)\n    Performs bilinear interpolation between corresponding components.\n    <vector> lerp(<vector>value1, <vector>value2, float amount)\n    ```\n\n* removeprim 删除图元函数\n    Removes a primitive from the geometry.\n    `int  removeprim(int geohandle, int prim_number, int andpoints)`\n\n* pow 冪函數 \n    Raises the first argument to the power of the second argument.\n    ```c\n    float  pow(float n, float exponent)\n    <vector> pow(<vector>v, float exponent)\n    ```\n\n* setpointattrib设置顶点属性函数\n    Sets a point attribute in a geometry.\n    ```c\n    int  setpointattrib(int geohandle, string name, int point_num, <type>value, string mode=\"set\")\n    int  setpointattrib(int geohandle, string name, int point_num, <type>value[], string mode=\"set\")\n    ```\n\n\n* npoints 得到几何体的点数函数\n    Returns the number of points in the input or geometry file.\n    `int  npoints(<geometry>geometry)`\n\n* resize 设置数组长度函数\n    Sets the length of an array.\n    `void  resize(<type>&array[], int size)`\n\n* argsort 数组排序函数\n    Returns the indices of a sorted version of an array.\n    `int [] argsort(<type>value[])`\n\n* setpointgroup 添加点组函数\n    Adds or removes a point to/from a group in a geometry.\n    `int  setpointgroup(int geohandle, string name, int point_num, int value, string mode=\"set\")`\n    geohandle\n\n    A handle to the geometry to write to. Currently the only valid value is 0 or geoself, which means the current geometry in a node. (This argument may be used in the future to allow writing to other geometries.)\n\n    name\n\n    The name of the group to modify.\n\n    point_num\n\n    The point number to add or remove from the group.\n\n    value\n\n    1 to put the point in the group, 0 to remove the point from the group. This is ignored if mode is \"toggle\".\n\n    mode\n\n    Use \"set\" to set the point’s membership according to the value. Use \"toggle\" to toggle the point’s membership, regardless of the value.\n\n* pointprims 返回一个图元包含的点函数\n    pointprims\n    Returns the list of primitives containing a point.\n    `int [] pointprims(<geometry>geometry, int ptnum)`\n\n\n\n* intersect 计算射线与几何的交叉函数 \n    This function computes the first intersection of a ray with geometry.\n\n\n* detail 从几何读取详细信息属性值的函数\n\n    Reads the value of a detail attribute value from a geometry.\n    ```\n    type> detail(<geometry>geometry, string attribute_name, int ignored=0)\n\n    <type>[] detail(<geometry>geometry, string attribute_name, int ignored=0)\n    ```\n\n* radians 弧度函数\n    Converts the argument from degrees into radians.\n    从度数转弧度\n    `float  radians(float num_in_degs)`\n\n* rotate  旋转函数\n    Applies a rotation to the given matrix.\n    ```void  rotate(matrix2 &m, float amount)\n\n    void  rotate(matrix3 &m, float amount, vector axis)\n\n    void  rotate(matrix &m, float amount, vector axis)\n\n    void  rotate(matrix3 &m, vector angles, int xyz)\n\n    void  rotate(matrix &m, vector angles, int xyz)\n\n    void  rotate(matrix3 &m, float angle, int axis)\n\n    void  rotate(matrix &m, float angle, int axis)```\n    ```\n\n\n\n* scale 缩放函数\n    Scales the given matrix in three directions simultaneously (X, Y, Z - given by the components of the scale_vector)\n    ```\n    void  scale(matrix2 &m, vector2 scale_vector)\n\n    void  scale(matrix &m, vector scale_vector)\n\n    void  scale(matrix3 &m, vector scale_vector)\n    ```\n\n* translate 位移函数\n    Translates a matrix by a vector.\n    ```\n    void  translate(matrix &m, vector amount)\n\n    void  translate(matrix &m, vector4 amount)\n    ```\n\n* quaternion  四元数函数\n    Creates a vector4 representing a quaternion.\n    创建一个表示四元数的vector4\n\n    ```\n    vector4  quaternion(matrix3 rotations)\n\n    Creates a vector4 representing a quaternion from a 3×3 rotational matrix.\n\n    vector4  quaternion(float angle, vector axis)\n\n    Creates a vector4 representing a quaternion from an angle and axis. The angle is specified in radians.\n\n    vector4  quaternion(vector angleaxis)\n\n    Creates a vector4 representing a quaternion from a combined angle/axis. This is the normalized rotation axis multiplied by the rotation angle in radians.\n\n    There used to be a fourth form that took a rotation vector. It has been renamed to eulertoquaternion and now takes radians.\n    ```\n* qrotate 四元数旋转函数\n\n    Rotates a vector by a quaternion.\n    通过四元数旋转向量。\n    `vector  qrotate(vector4 quaternion, vector v)`\n\n* slerp 四元数基于偏差的融和函数\n\n    Quaternion blend between q1 and q2 based on the bias.\n    `vector4  slerp(vector4 q1, vector4 q2, float bias)`\n\n* primintrinsic  从几何读取基本图元函数\n\n    Reads a primitive intrinsic from a geometry.\n    从几何读取基本图元\n    ```\n    <type> primintrinsic(<geometry>geometry, string intrinsic_name, int prim_num)\n\n    <type>[] primintrinsic(<geometry>geometry, string intrinsic_name, int prim_num)\n    ```\n\n\n## 常用表达式\n* $FF 帧变量\n\n## 节点\n\n* scatter\n撒点 散布节点\n\n* isooffset\n配合散布节点使用 可以散布到物体内部并且在位置上有一定随机\n\n* attribute randomize\n随机某个属性\n\n* attribute paint\n绘制变量属性,结合scatter可以实现局部撒点\n\n* relax\n\n\n\n\n## 快捷键\n* 弹出代码框 ALT+E\n* 弹出当前选中的功能区 ALT + SHIFT+ C\n* 调整焦点 选中相机视口 回车（Show handle）+ Z\n\n## vex语法\n\n* for 循环\n\n    ```c\n    for(int i = 0 ; i>num;i++){\n        something;\n    }\n    ```\n\n* foreach循环\n\n    ```c\n    foreach(int npt;npts){\n        something;\n        }\n    ```\n\n* 条件判断\n    ```\n    if(){\n        something;\n    }\n    else{\n        something;\n    }\n    ```\n\n    \n    ```\n    if(){\n        something;\n    }\n    else if(){\n        something;\n    }\n    else{\n        something;\n    }\n    ```\n\n\n\n\n## 外部函数导入和外部编辑器设置\n\n* 外部编辑器设置\n    1. 找到 C:\\Users\\username\\Documents\\houdini18.0 下找到** houdini.env **\n    2. 加入这一行代码  注意路径和路径反斜线写法\n    `Editor = \"C:/Users/username/AppData/Local/Programs/Microsoft VS Code/Code.exe\"`\n    3. 然后重启houdini\n* 外部函数导入\n    1. 找到 C:\\Users\\username\\Documents\\houdini18.0 下找到** houdini.env **\n    2. 加入这一行代码  注意路径反斜线写法和结尾字符\n    `HOUDINI_VEX_PATH = \"C:/Users/sunyuxiang/Documents/houdini18.0/Custom_VEX;&\"`\n    3. 然后把函数放到这里即可C:\\Users\\sunyuxiang\\Documents\\houdini18.0\\Custom_VEX\n    4. 然后重启houdini\n    5. 调用方法 #include \"你的函数文件夹名\"\n* 打开代码窗口\n    1. Alt+E\n\n\n## 每节例子总结\n\n\n* 给顶点的法线信息指认随机生成的向量，通过滑块调整随机种子\n    ```c\n    float seed = chf(\"seed\");\n\n    // set random scale (0 ... 0.1)\n\n    float pscale = rand(@ptnum+seed);//定义一个 浮点变量\n    pscale *= .1; //浮点变量缩小十分之1\n    f@pscale = pscale; //设置属性\n\n    // set random orientation using N({-1,-1,-1} ... {1,1,1})\n    vector randdir = rand(@ptnum+seed);\n\n    //randdir = fit(randdir,{0,0,0},{1,1,1},{-1,-1,-1},{1,1,1});\n    // 因为@ptnum是正轴递增，所以random的结果太相似 所以重新映射一下\n    randdir = fit01(randdir,{-1,-1,-1},{1,1,1}); \n\n    //给顶点的法线信息指认随机生成的向量\n    v@N = randdir;\n    ```\n\n* 所有点的向量实时指向某个点\n    为了得到指向某个点的向量，我们需要用目标点减去基点如图：\n    ![](Houdini_Entagma_学习笔记/2020-02-18-20-23-42.png)\n\n    ```c\n\n    //拿到接口1的 第0个顶点的属性名\"P\"的值\n    vector tgtpos = point(1,\"P\",0);\n    // 目标点减去 模板点 得到向量\n    vector dir = tgtpos - v@P;\n    //归一化向量\n    //v@N =dir;\n    v@N =normalize(dir);\n    ```\n\n* 使用卷积化随机函数创建向量赋予点\n\n    ```c\n    vector f = chv(\"Frequency\");\n    vector o = chv(\"offset\");\n    //这里是卷积化随机向量\n    vector dir = curlnoise((v@P * f)+ o);\n    //归一化向量\n    v@N =normalize(dir);\n    ```\n\n\n* 使用nearpoints函数查找最近的点并创建线\n    ```c\n\n    float maxdist = chf(\"max_Dist\");\n    float mindist = chf(\"Min_Dist\");\n\n    //找到函数\n    int npts[] = nearpoints(0,v@P,maxdist);\n\n    //移除找到的自己\n    removeindex(npts,0);\n\n    //赋予属性给点\n    i[]@npts = npts;\n\n    foreach(int npt;npts){\n        vector npos = point(0,\"p\",npt);\n        float dist = distance(v@P,npos);\n        if(dist > mindist){\n            addprim(0,\"polyline\",@ptnum,npt);\n        }\n    }\n\n    ```\n\n\n## 理解矩阵很好的教程\n\n ![](Houdini_Entagma_学习笔记/entagma_martrix.png)\n\n","slug":"Houdini_Entagma_学习笔记","published":1,"updated":"2020-03-11T03:31:04.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7rbphzd0007w8p447re7wc0","content":"<h2 id=\"软件结构\"><a href=\"#软件结构\" class=\"headerlink\" title=\"软件结构\"></a>软件结构</h2><p>我们可以看到，houdini是一个将各种独立的语境（context）融合在一起的操作系统。<br><img src=\"/2019/12/01/Houdini_Entagma_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2020-03-04-14-02-15.png\" alt></p>\n<a id=\"more\"></a>\n<h2 id=\"几何对象\"><a href=\"#几何对象\" class=\"headerlink\" title=\"几何对象\"></a>几何对象</h2><h3 id=\"层次\"><a href=\"#层次\" class=\"headerlink\" title=\"层次\"></a>层次</h3><p><img src=\"/2019/12/01/Houdini_Entagma_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2020-03-03-19-00-29.png\" alt></p>\n<ol>\n<li>Detail 最高层级的数据，对应整个Object；</li>\n<li>Primitive 几何对象中的组成部件，比如一个三角面片，一张NURBS曲面，或Volume；</li>\n<li>Point 几何对象上面的一个点；</li>\n<li>Vertex 一个Point可能同时存在于多个相邻的Primitive上，因此共享同一个Point的 多个primitive会各自存一份对Point的引用，称为Vertex。</li>\n</ol>\n<h3 id=\"属性优先级\"><a href=\"#属性优先级\" class=\"headerlink\" title=\"属性优先级\"></a>属性优先级</h3><p><img src=\"/2019/12/01/Houdini_Entagma_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2020-03-04-16-03-43.png\" alt></p>\n<h2 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h2><h3 id=\"属性-Attribute\"><a href=\"#属性-Attribute\" class=\"headerlink\" title=\"属性 Attribute\"></a>属性 Attribute</h3><p>最重要的数据类型就数属性了</p>\n<h4 id=\"读取-修改属性\"><a href=\"#读取-修改属性\" class=\"headerlink\" title=\"读取/修改属性\"></a>读取/修改属性</h4><ul>\n<li>使用已经定义的同层级属性的方式为：@变量名<ul>\n<li>v@Cd 颜色属性</li>\n<li>@P 位置属性</li>\n<li>@ptnum 点ID</li>\n<li>@primnum 图元ID</li>\n</ul>\n</li>\n<li>不同层级之间的属性读取<ul>\n<li>point(…)</li>\n<li>prim(…)</li>\n<li>detail(…)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"增加属性\"><a href=\"#增加属性\" class=\"headerlink\" title=\"增加属性\"></a>增加属性</h4><ul>\n<li>数据类型 @变量名<ul>\n<li>i@name（赋予整型）</li>\n<li>i[]@name（赋予数组）</li>\n</ul>\n</li>\n<li>在定义一个新的属性时，等号右边（即我们赋予该属性的初始值）必须是常量，也就是说只能是具体的数值， 不能包含任何函数或运算。<ul>\n<li>对：float@mass=1；</li>\n<li>错：float@mass =1/area;</li>\n<li>错：vector @up = set(0,1,1);</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"删除属性\"><a href=\"#删除属性\" class=\"headerlink\" title=\"删除属性\"></a>删除属性</h4><ul>\n<li>属性在整个节点网络中，一旦你创建了，在人为手动删除它之前，就是一直存在并且全局都可见的（就是任何时候，只有你想要就可以读取）。因此属性是非常消耗空间和性能的，应当尽可能节约使用，如果预计将来再也不需要这个属性时，就应当使用Attribute Delete删除掉。</li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//www.sidefx.com/docs/houdini/nodes/sop/attribdelete.html\">Attribute Delete</a></li>\n</ul>\n<h4 id=\"常用属性\"><a href=\"#常用属性\" class=\"headerlink\" title=\"常用属性\"></a>常用属性</h4><p> <img src=\"/2019/12/01/Houdini_Entagma_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/entagma_attributes.png\" alt></p>\n<h3 id=\"变量-Variable\"><a href=\"#变量-Variable\" class=\"headerlink\" title=\"变量 Variable\"></a>变量 Variable</h3><ul>\n<li><p>一些VEX代码中的变量，如果它们只会在该节点的代码里面用到，那么就没有必要设置为属性了，我们称之为局部变量，就是它只属于所在的这个节点，节点算完之后就把它所占用的空间释放了，生不带来，死不带去。</p>\n<p><img src=\"/2019/12/01/Houdini_Entagma_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2020-02-26-17-23-21.png\" alt></p>\n</li>\n<li><p>数组创建 float array_name[] </p>\n</li>\n<li><p>变量转向量 vector pos = set(x_var,y_var,z_var)</p>\n</li>\n</ul>\n<h3 id=\"参数-Parameter\"><a href=\"#参数-Parameter\" class=\"headerlink\" title=\"参数 Parameter\"></a>参数 Parameter</h3><ul>\n<li>参数一般出现在节点的paramter窗口，我们可以通过参数这些对节点进行调整。<br>参数非常重要，所以这里详细讲它的几种使用方式：<ul>\n<li>在窗口上，对参数进行自动链接；<br>右键点击源参数，选择”Copy parameter”。<br>右击你要粘贴到的那个参数，选择”Paste relative reference”。</li>\n<li>在窗口上，对参数进行手动链接；<br>此处使用的并不是VEX，而是HScript表达式，但是由于太重要了，就也写在这里：<br>在目标参数处输入函数ch(“源参数路径”)，源参数路径的格式有3种情况：<br><img src=\"/2019/12/01/Houdini_Entagma_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2020-03-03-19-30-55.png\" alt></li>\n<li>在窗口上，手动创建参数；流程见下图，注意在”Parameter Description”一栏，我们新创建的变量有2个名称：Name和Label，Name是参数“真正”的名字，我们在使用ch(“参数名”)或者VEX内引用该参数时，都用的是Name，注意，Name不能包含空格；但是Label可以包含空格，作为参数在用户界面上显示的名称。<br><img src=\"/2019/12/01/Houdini_Entagma_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2020-03-03-19-31-43.png\" alt></li>\n<li>在Wrangle节点里，用VEX代码读取窗口上的参数；同上，使用chi, chf, chv, chs即可。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h2><ul>\n<li><p>printf 打印函数<br>  <code>printf(&quot;str&quot;);</code></p>\n</li>\n<li><p>addpoint 添加点函数</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">addpoint</span><span class=\"params\">(<span class=\"keyword\">int</span> geohandle, <span class=\"keyword\">int</span> point_number)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">addpoint</span><span class=\"params\">(<span class=\"keyword\">int</span> geohandle, <span class=\"built_in\">vector</span> pos)</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>addprim 添加图元函数<br>  Adds a primitive to the geometry.</p>\n<p>  <code>int  addprim(int geohandle, string type)</code></p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">addprim</span><span class=\"params\">(<span class=\"keyword\">int</span> geohandle, <span class=\"built_in\">string</span> type, <span class=\"keyword\">int</span> pt0)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">addprim</span><span class=\"params\">(<span class=\"keyword\">int</span> geohandle, <span class=\"built_in\">string</span> type, <span class=\"keyword\">int</span> pt0, <span class=\"keyword\">int</span> pt1)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">addprim</span><span class=\"params\">(<span class=\"keyword\">int</span> geohandle, <span class=\"built_in\">string</span> type, <span class=\"keyword\">int</span> pt0, <span class=\"keyword\">int</span> pt1, <span class=\"keyword\">int</span> pt2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">addprim</span><span class=\"params\">(<span class=\"keyword\">int</span> geohandle, <span class=\"built_in\">string</span> type, <span class=\"keyword\">int</span> pt0, <span class=\"keyword\">int</span> pt1, <span class=\"keyword\">int</span> pt2, <span class=\"keyword\">int</span> pt3)</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>addvertex 添加顶点函数<br>  Adds a vertex to a primitive in a geometry.<br>  <code>int  addvertex(int geohandle, int prim_num, int point_num)</code></p>\n</li>\n<li><p>rand 随机函数<br>  Creates a random number between 0 and 1 from a seed.</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float  rand(float seed)</span><br><span class=\"line\">vector2  rand(float seed)</span><br><span class=\"line\">vector  rand(float seed)</span><br><span class=\"line\">vector4  rand(float seed)</span><br><span class=\"line\">float  rand(float seed, float seed2)</span><br><span class=\"line\">vector2  rand(float seed, float seed2)</span><br><span class=\"line\">vector  rand(float seed, float seed2)</span><br><span class=\"line\">vector4  rand(float seed, float seed2)</span><br><span class=\"line\">float  rand(vector2 seed)</span><br><span class=\"line\">vector2  rand(vector2 seed)</span><br><span class=\"line\">vector  rand(vector2 seed)</span><br><span class=\"line\">vector4  rand(vector2 seed)</span><br><span class=\"line\">float  rand(vector seed)</span><br><span class=\"line\">vector2  rand(vector seed)</span><br><span class=\"line\">vector  rand(vector seed)</span><br><span class=\"line\">vector4  rand(vector seed)</span><br><span class=\"line\">float  rand(vector4 seed)</span><br><span class=\"line\">vector2  rand(vector4 seed)</span><br><span class=\"line\">vector  rand(vector4 seed)</span><br><span class=\"line\">vector4  rand(vector4 seed)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>fit 重映射函数<br>  Takes the value in one range and shifts it to the corresponding value in a new range.<br>  <code>float  fit(float value, float omin, float omax, float nmin, float nmax)</code></p>\n</li>\n<li><p>ch 滑块函数<br>  Evaluates a channel (or parameter) and return its value.<br>  <code>ch(&quot;string&quot;);</code></p>\n</li>\n<li><p>curlnoise 卷曲噪点函数<br>  Computes divergence free noise based on Perlin noise.<br>  <code>vector  curlnoise(vector xyz);</code><br>  <code>vector  curlnoise(vector4 xyzt)</code></p>\n</li>\n<li><p>push 数组添加元素函数<br>  Adds an item to an array.<br>  <code>void  push(&lt;type&gt;&amp;array[], &lt;type&gt;value)</code><br>  <code>void  push(&lt;type&gt;&amp;array[], &lt;type&gt;values[])</code></p>\n</li>\n<li><p>pop 数组弹出函数<br>  Removes the last element of an array and returns it. <code>&lt;type&gt; pop(&lt;type&gt;&amp;array[])</code><br>  <code>&lt;type&gt; pop(&lt;type&gt;&amp;array[], int index)</code></p>\n</li>\n<li><p>removeindex 数组删除元素函数<br>  Removes an item at the given index from an array.<br>  <code>&lt;type&gt; removeindex(&lt;type&gt;&amp;array[], int index)</code></p>\n</li>\n<li><p>nearpoint 查找最近顶点函数<br>  Finds the closest point in a geometry. </p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">nearpoint</span><span class=\"params\">(&lt;geometry&gt;geometry, <span class=\"built_in\">vector</span> pt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">nearpoint</span><span class=\"params\">(&lt;geometry&gt;geometry, <span class=\"built_in\">vector</span> pt, <span class=\"keyword\">float</span> maxdist)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">nearpoint</span><span class=\"params\">(&lt;geometry&gt;geometry, <span class=\"built_in\">string</span> ptgroup, <span class=\"built_in\">vector</span> pt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">nearpoint</span><span class=\"params\">(&lt;geometry&gt;geometry, <span class=\"built_in\">string</span> ptgroup, <span class=\"built_in\">vector</span> pt, <span class=\"keyword\">float</span> maxdist)</span></span></span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96;</span><br><span class=\"line\">    </span><br><span class=\"line\">* nearpoints 查找最近顶点函数 </span><br><span class=\"line\">    Finds the closest point in a geometry. </span><br><span class=\"line\">​&#96;&#96;&#96;c</span><br><span class=\"line\">    int [] nearpoints(&lt;geometry&gt;geometry, vector pt, float maxdist)</span><br><span class=\"line\">    </span><br><span class=\"line\">    int [] nearpoints(&lt;geometry&gt;geometry, vector pt, float maxdist, int maxpts)</span><br><span class=\"line\">    </span><br><span class=\"line\">    int [] nearpoints(&lt;geometry&gt;geometry, string ptgroup, vector pt, float maxdist)</span><br><span class=\"line\">    </span><br><span class=\"line\">    int [] nearpoints(&lt;geometry&gt;geometry, string ptgroup, vector pt, float maxdist, int maxpts)</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<ul>\n<li><p>point 从几何体上读取点的某个属性的值函数<br>  Reads a point attribute value from a geometry.<br>  <code>point(&lt;geometry&gt;geometry, string attribute_name, int pointnumber)</code></p>\n</li>\n<li><p>primpoints 从几何体上读取点函数<br>  Returns the list of points on a primitive.<br>  <code>int [] primpoints(&lt;geometry&gt;geometry, int primnum)</code></p>\n</li>\n<li><p>distance 距离函数<br>  Returns the distance between two points.<br>  <code>float  distance(vector2 a, vector2 b)</code></p>\n</li>\n<li><p>removepoint 删除点函数<br>  Removes a point from the geometry.<br>  <code>int  removepoint(int geohandle, int point_number)</code></p>\n</li>\n<li><p>primpoint 将图元/顶点转换为点的ID函数.<br>  Converts a primitive/vertex pair into a point number.<br>  <code>int primpoint(&lt;geometry&gt;, int primnum, int vertex)</code></p>\n</li>\n<li><p>itoa 整型转字符串函数<br>  Converts an integer to a string.<br>  <code>string  itoa(int number)</code></p>\n</li>\n<li><p>getbbox_max 计算几何的边界框的最小值函数<br>  Returns the maximum of the bounding box for the geometry..<br>  <code>vector  getbbox_max(geometry)</code></p>\n</li>\n<li><p>getbbox_max 计算几何的边界框的最大值函数<br>  Computes the minimum of the bounding box for the geometry.<br>  <code>vector  getbbox_max(&lt;geometry&gt;geometry, string primgroup)</code></p>\n</li>\n<li><p>getbbox_size 返回边界框的尺寸函数<br>  Returns the size of the bounding box for the geometry.<br>  <code>vector  getbbox_size(&lt;geometry&gt;geometry)</code><br>  <code>vector  getbbox_size(&lt;geometry&gt;geometry, string primgroup)</code></p>\n</li>\n<li><p>lerp 在值之间执行双线性插值函数</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Performs bilinear interpolation between the values.</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">float</span>  <span class=\"title\">lerp</span><span class=\"params\">(<span class=\"keyword\">float</span> value1, <span class=\"keyword\">float</span> value2, <span class=\"keyword\">float</span> amount)</span></span></span><br><span class=\"line\">Performs bilinear interpolation between corresponding components.</span><br><span class=\"line\">&lt;<span class=\"built_in\">vector</span>&gt; lerp(&lt;<span class=\"built_in\">vector</span>&gt;value1, &lt;<span class=\"built_in\">vector</span>&gt;value2, <span class=\"keyword\">float</span> amount)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>removeprim 删除图元函数<br>  Removes a primitive from the geometry.<br>  <code>int  removeprim(int geohandle, int prim_number, int andpoints)</code></p>\n</li>\n<li><p>pow 冪函數<br>  Raises the first argument to the power of the second argument.</p>\n  <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">float</span>  <span class=\"title\">pow</span><span class=\"params\">(<span class=\"keyword\">float</span> n, <span class=\"keyword\">float</span> exponent)</span></span></span><br><span class=\"line\">&lt;vector&gt; pow(&lt;vector&gt;v, float exponent)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>setpointattrib设置顶点属性函数<br>  Sets a point attribute in a geometry.</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">setpointattrib</span><span class=\"params\">(<span class=\"keyword\">int</span> geohandle, <span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> point_num, &lt;type&gt;value, <span class=\"built_in\">string</span> mode=<span class=\"string\">\"set\"</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">setpointattrib</span><span class=\"params\">(<span class=\"keyword\">int</span> geohandle, <span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> point_num, &lt;type&gt;value[], <span class=\"built_in\">string</span> mode=<span class=\"string\">\"set\"</span>)</span></span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<ul>\n<li><p>npoints 得到几何体的点数函数<br>  Returns the number of points in the input or geometry file.<br>  <code>int  npoints(&lt;geometry&gt;geometry)</code></p>\n</li>\n<li><p>resize 设置数组长度函数<br>  Sets the length of an array.<br>  <code>void  resize(&lt;type&gt;&amp;array[], int size)</code></p>\n</li>\n<li><p>argsort 数组排序函数<br>  Returns the indices of a sorted version of an array.<br>  <code>int [] argsort(&lt;type&gt;value[])</code></p>\n</li>\n<li><p>setpointgroup 添加点组函数<br>  Adds or removes a point to/from a group in a geometry.<br>  <code>int  setpointgroup(int geohandle, string name, int point_num, int value, string mode=&quot;set&quot;)</code><br>  geohandle</p>\n<p>  A handle to the geometry to write to. Currently the only valid value is 0 or geoself, which means the current geometry in a node. (This argument may be used in the future to allow writing to other geometries.)</p>\n<p>  name</p>\n<p>  The name of the group to modify.</p>\n<p>  point_num</p>\n<p>  The point number to add or remove from the group.</p>\n<p>  value</p>\n<p>  1 to put the point in the group, 0 to remove the point from the group. This is ignored if mode is “toggle”.</p>\n<p>  mode</p>\n<p>  Use “set” to set the point’s membership according to the value. Use “toggle” to toggle the point’s membership, regardless of the value.</p>\n</li>\n<li><p>pointprims 返回一个图元包含的点函数<br>  pointprims<br>  Returns the list of primitives containing a point.<br>  <code>int [] pointprims(&lt;geometry&gt;geometry, int ptnum)</code></p>\n</li>\n</ul>\n<ul>\n<li>intersect 计算射线与几何的交叉函数<br>  This function computes the first intersection of a ray with geometry.</li>\n</ul>\n<ul>\n<li><p>detail 从几何读取详细信息属性值的函数</p>\n<p>  Reads the value of a detail attribute value from a geometry.</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type&gt; detail(&lt;geometry&gt;geometry, string attribute_name, int ignored&#x3D;0)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;type&gt;[] detail(&lt;geometry&gt;geometry, string attribute_name, int ignored&#x3D;0)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>radians 弧度函数<br>  Converts the argument from degrees into radians.<br>  从度数转弧度<br>  <code>float  radians(float num_in_degs)</code></p>\n</li>\n<li><p>rotate  旋转函数<br>  Applies a rotation to the given matrix.</p>\n  <figure class=\"highlight plain\"><figcaption><span>rotate(matrix2 &m, float amount)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">void  rotate(matrix3 &amp;m, float amount, vector axis)</span><br><span class=\"line\"></span><br><span class=\"line\">void  rotate(matrix &amp;m, float amount, vector axis)</span><br><span class=\"line\"></span><br><span class=\"line\">void  rotate(matrix3 &amp;m, vector angles, int xyz)</span><br><span class=\"line\"></span><br><span class=\"line\">void  rotate(matrix &amp;m, vector angles, int xyz)</span><br><span class=\"line\"></span><br><span class=\"line\">void  rotate(matrix3 &amp;m, float angle, int axis)</span><br><span class=\"line\"></span><br><span class=\"line\">void  rotate(matrix &amp;m, float angle, int axis)</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">* scale 缩放函数</span><br><span class=\"line\">    Scales the given matrix in three directions simultaneously (X, Y, Z - given by the components of the scale_vector)</span><br></pre></td></tr></table></figure>\n<p>  void  scale(matrix2 &amp;m, vector2 scale_vector)</p>\n<p>  void  scale(matrix &amp;m, vector scale_vector)</p>\n<p>  void  scale(matrix3 &amp;m, vector scale_vector)</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">* translate 位移函数</span><br><span class=\"line\">    Translates a matrix by a vector.</span><br></pre></td></tr></table></figure>\n<p>  void  translate(matrix &amp;m, vector amount)</p>\n<p>  void  translate(matrix &amp;m, vector4 amount)</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">* quaternion  四元数函数</span><br><span class=\"line\">    Creates a vector4 representing a quaternion.</span><br><span class=\"line\">    创建一个表示四元数的vector4</span><br></pre></td></tr></table></figure>\n<p>  vector4  quaternion(matrix3 rotations)</p>\n<p>  Creates a vector4 representing a quaternion from a 3×3 rotational matrix.</p>\n<p>  vector4  quaternion(float angle, vector axis)</p>\n<p>  Creates a vector4 representing a quaternion from an angle and axis. The angle is specified in radians.</p>\n<p>  vector4  quaternion(vector angleaxis)</p>\n<p>  Creates a vector4 representing a quaternion from a combined angle/axis. This is the normalized rotation axis multiplied by the rotation angle in radians.</p>\n<p>  There used to be a fourth form that took a rotation vector. It has been renamed to eulertoquaternion and now takes radians.</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* qrotate 四元数旋转函数</span><br><span class=\"line\"></span><br><span class=\"line\">    Rotates a vector by a quaternion.</span><br><span class=\"line\">    通过四元数旋转向量。</span><br><span class=\"line\">    &#96;vector  qrotate(vector4 quaternion, vector v)&#96;</span><br><span class=\"line\"></span><br><span class=\"line\">* slerp 四元数基于偏差的融和函数</span><br><span class=\"line\"></span><br><span class=\"line\">    Quaternion blend between q1 and q2 based on the bias.</span><br><span class=\"line\">    &#96;vector4  slerp(vector4 q1, vector4 q2, float bias)&#96;</span><br><span class=\"line\"></span><br><span class=\"line\">* primintrinsic  从几何读取基本图元函数</span><br><span class=\"line\"></span><br><span class=\"line\">    Reads a primitive intrinsic from a geometry.</span><br><span class=\"line\">    从几何读取基本图元</span><br></pre></td></tr></table></figure>\n<p>  <type> primintrinsic(<geometry>geometry, string intrinsic_name, int prim_num)</geometry></type></p>\n<p>  <type>[] primintrinsic(<geometry>geometry, string intrinsic_name, int prim_num)</geometry></type></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 常用表达式</span><br><span class=\"line\">* $FF 帧变量</span><br><span class=\"line\"></span><br><span class=\"line\">## 节点</span><br><span class=\"line\"></span><br><span class=\"line\">* scatter</span><br><span class=\"line\">撒点 散布节点</span><br><span class=\"line\"></span><br><span class=\"line\">* isooffset</span><br><span class=\"line\">配合散布节点使用 可以散布到物体内部并且在位置上有一定随机</span><br><span class=\"line\"></span><br><span class=\"line\">* attribute randomize</span><br><span class=\"line\">随机某个属性</span><br><span class=\"line\"></span><br><span class=\"line\">* attribute paint</span><br><span class=\"line\">绘制变量属性,结合scatter可以实现局部撒点</span><br><span class=\"line\"></span><br><span class=\"line\">* relax</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 快捷键</span><br><span class=\"line\">* 弹出代码框 ALT+E</span><br><span class=\"line\">* 弹出当前选中的功能区 ALT + SHIFT+ C</span><br><span class=\"line\">* 调整焦点 选中相机视口 回车（Show handle）+ Z</span><br><span class=\"line\"></span><br><span class=\"line\">## vex语法</span><br><span class=\"line\"></span><br><span class=\"line\">* for 循环</span><br><span class=\"line\"></span><br><span class=\"line\">    &#96;&#96;&#96;c</span><br><span class=\"line\">    for(int i &#x3D; 0 ; i&gt;num;i++)&#123;</span><br><span class=\"line\">        something;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>foreach循环</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foreach(<span class=\"keyword\">int</span> npt;npts)&#123;</span><br><span class=\"line\">    something;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>条件判断</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if()&#123;</span><br><span class=\"line\">    something;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">    something;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if()&#123;</span><br><span class=\"line\">    something;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else if()&#123;</span><br><span class=\"line\">    something;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">    something;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id=\"外部函数导入和外部编辑器设置\"><a href=\"#外部函数导入和外部编辑器设置\" class=\"headerlink\" title=\"外部函数导入和外部编辑器设置\"></a>外部函数导入和外部编辑器设置</h2><ul>\n<li>外部编辑器设置<ol>\n<li>找到 C:\\Users\\username\\Documents\\houdini18.0 下找到** houdini.env **</li>\n<li>加入这一行代码  注意路径和路径反斜线写法<br><code>Editor = &quot;C:/Users/username/AppData/Local/Programs/Microsoft VS Code/Code.exe&quot;</code></li>\n<li>然后重启houdini</li>\n</ol>\n</li>\n<li>外部函数导入<ol>\n<li>找到 C:\\Users\\username\\Documents\\houdini18.0 下找到** houdini.env **</li>\n<li>加入这一行代码  注意路径反斜线写法和结尾字符<br><code>HOUDINI_VEX_PATH = &quot;C:/Users/sunyuxiang/Documents/houdini18.0/Custom_VEX;&amp;&quot;</code></li>\n<li>然后把函数放到这里即可C:\\Users\\sunyuxiang\\Documents\\houdini18.0\\Custom_VEX</li>\n<li>然后重启houdini</li>\n<li>调用方法 #include “你的函数文件夹名”</li>\n</ol>\n</li>\n<li>打开代码窗口<ol>\n<li>Alt+E</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"每节例子总结\"><a href=\"#每节例子总结\" class=\"headerlink\" title=\"每节例子总结\"></a>每节例子总结</h2><ul>\n<li><p>给顶点的法线信息指认随机生成的向量，通过滑块调整随机种子</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> seed = chf(<span class=\"string\">\"seed\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// set random scale (0 ... 0.1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">float</span> pscale = rand(@ptnum+seed);<span class=\"comment\">//定义一个 浮点变量</span></span><br><span class=\"line\">pscale *= <span class=\"number\">.1</span>; <span class=\"comment\">//浮点变量缩小十分之1</span></span><br><span class=\"line\">f@pscale = pscale; <span class=\"comment\">//设置属性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// set random orientation using N(&#123;-1,-1,-1&#125; ... &#123;1,1,1&#125;)</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span> randdir = rand(@ptnum+seed);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//randdir = fit(randdir,&#123;0,0,0&#125;,&#123;1,1,1&#125;,&#123;-1,-1,-1&#125;,&#123;1,1,1&#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// 因为@ptnum是正轴递增，所以random的结果太相似 所以重新映射一下</span></span><br><span class=\"line\">randdir = fit01(randdir,&#123;<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>&#125;,&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>&#125;); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//给顶点的法线信息指认随机生成的向量</span></span><br><span class=\"line\">v@N = randdir;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>所有点的向量实时指向某个点<br>  为了得到指向某个点的向量，我们需要用目标点减去基点如图：<br>  <img src=\"/2019/12/01/Houdini_Entagma_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2020-02-18-20-23-42.png\" alt></p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//拿到接口1的 第0个顶点的属性名\"P\"的值</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span> tgtpos = <span class=\"built_in\">point</span>(<span class=\"number\">1</span>,<span class=\"string\">\"P\"</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// 目标点减去 模板点 得到向量</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span> dir = tgtpos - v@P;</span><br><span class=\"line\"><span class=\"comment\">//归一化向量</span></span><br><span class=\"line\"><span class=\"comment\">//v@N =dir;</span></span><br><span class=\"line\">v@N =normalize(dir);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用卷积化随机函数创建向量赋予点</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span> f = chv(<span class=\"string\">\"Frequency\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">vector</span> o = chv(<span class=\"string\">\"offset\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//这里是卷积化随机向量</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span> dir = curlnoise((v@P * f)+ o);</span><br><span class=\"line\"><span class=\"comment\">//归一化向量</span></span><br><span class=\"line\">v@N =normalize(dir);</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<ul>\n<li>使用nearpoints函数查找最近的点并创建线  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">float</span> maxdist = chf(<span class=\"string\">\"max_Dist\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">float</span> mindist = chf(<span class=\"string\">\"Min_Dist\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//找到函数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> npts[] = nearpoints(<span class=\"number\">0</span>,v@P,maxdist);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//移除找到的自己</span></span><br><span class=\"line\">removeindex(npts,<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//赋予属性给点</span></span><br><span class=\"line\">i[]@npts = npts;</span><br><span class=\"line\"></span><br><span class=\"line\">foreach(<span class=\"keyword\">int</span> npt;npts)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span> npos = <span class=\"built_in\">point</span>(<span class=\"number\">0</span>,<span class=\"string\">\"p\"</span>,npt);</span><br><span class=\"line\">    <span class=\"keyword\">float</span> dist = distance(v@P,npos);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dist &gt; mindist)&#123;</span><br><span class=\"line\">        addprim(<span class=\"number\">0</span>,<span class=\"string\">\"polyline\"</span>,@ptnum,npt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h2 id=\"理解矩阵很好的教程\"><a href=\"#理解矩阵很好的教程\" class=\"headerlink\" title=\"理解矩阵很好的教程\"></a>理解矩阵很好的教程</h2><p> <img src=\"/2019/12/01/Houdini_Entagma_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/entagma_martrix.png\" alt></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#2d6b96","paginator":"#6AA7D2","button_hover":"#3B8BC4","text_selection":"#6AA7D2","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#6AA7D2","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"文章":"/","归档":"/archives"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":true,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":null,"top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2013,"footer_custom_text":"Hi, welcome to my <a href=\"https://sunyuxianggit.github.io/\">blog</a>!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":true,"url":"https://github.com/sunyuxianggit","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"SunYuxiangのBlog","subtitle":"好记性,不如烂笔头.今天你要写点什么？","description":"","author":"Sun Yuxiang","language":"zh-Hans","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/sunyuxianggit/sunyuxianggit.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false}}}}},"excerpt":"<h2 id=\"软件结构\"><a href=\"#软件结构\" class=\"headerlink\" title=\"软件结构\"></a>软件结构</h2><p>我们可以看到，houdini是一个将各种独立的语境（context）融合在一起的操作系统。<br><img src=\"/2019/12/01/Houdini_Entagma_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2020-03-04-14-02-15.png\" alt></p>","more":"<h2 id=\"几何对象\"><a href=\"#几何对象\" class=\"headerlink\" title=\"几何对象\"></a>几何对象</h2><h3 id=\"层次\"><a href=\"#层次\" class=\"headerlink\" title=\"层次\"></a>层次</h3><p><img src=\"/2019/12/01/Houdini_Entagma_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2020-03-03-19-00-29.png\" alt></p>\n<ol>\n<li>Detail 最高层级的数据，对应整个Object；</li>\n<li>Primitive 几何对象中的组成部件，比如一个三角面片，一张NURBS曲面，或Volume；</li>\n<li>Point 几何对象上面的一个点；</li>\n<li>Vertex 一个Point可能同时存在于多个相邻的Primitive上，因此共享同一个Point的 多个primitive会各自存一份对Point的引用，称为Vertex。</li>\n</ol>\n<h3 id=\"属性优先级\"><a href=\"#属性优先级\" class=\"headerlink\" title=\"属性优先级\"></a>属性优先级</h3><p><img src=\"/2019/12/01/Houdini_Entagma_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2020-03-04-16-03-43.png\" alt></p>\n<h2 id=\"变量类型\"><a href=\"#变量类型\" class=\"headerlink\" title=\"变量类型\"></a>变量类型</h2><h3 id=\"属性-Attribute\"><a href=\"#属性-Attribute\" class=\"headerlink\" title=\"属性 Attribute\"></a>属性 Attribute</h3><p>最重要的数据类型就数属性了</p>\n<h4 id=\"读取-修改属性\"><a href=\"#读取-修改属性\" class=\"headerlink\" title=\"读取/修改属性\"></a>读取/修改属性</h4><ul>\n<li>使用已经定义的同层级属性的方式为：@变量名<ul>\n<li>v@Cd 颜色属性</li>\n<li>@P 位置属性</li>\n<li>@ptnum 点ID</li>\n<li>@primnum 图元ID</li>\n</ul>\n</li>\n<li>不同层级之间的属性读取<ul>\n<li>point(…)</li>\n<li>prim(…)</li>\n<li>detail(…)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"增加属性\"><a href=\"#增加属性\" class=\"headerlink\" title=\"增加属性\"></a>增加属性</h4><ul>\n<li>数据类型 @变量名<ul>\n<li>i@name（赋予整型）</li>\n<li>i[]@name（赋予数组）</li>\n</ul>\n</li>\n<li>在定义一个新的属性时，等号右边（即我们赋予该属性的初始值）必须是常量，也就是说只能是具体的数值， 不能包含任何函数或运算。<ul>\n<li>对：float@mass=1；</li>\n<li>错：float@mass =1/area;</li>\n<li>错：vector @up = set(0,1,1);</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"删除属性\"><a href=\"#删除属性\" class=\"headerlink\" title=\"删除属性\"></a>删除属性</h4><ul>\n<li>属性在整个节点网络中，一旦你创建了，在人为手动删除它之前，就是一直存在并且全局都可见的（就是任何时候，只有你想要就可以读取）。因此属性是非常消耗空间和性能的，应当尽可能节约使用，如果预计将来再也不需要这个属性时，就应当使用Attribute Delete删除掉。</li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//www.sidefx.com/docs/houdini/nodes/sop/attribdelete.html\">Attribute Delete</a></li>\n</ul>\n<h4 id=\"常用属性\"><a href=\"#常用属性\" class=\"headerlink\" title=\"常用属性\"></a>常用属性</h4><p> <img src=\"/2019/12/01/Houdini_Entagma_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/entagma_attributes.png\" alt></p>\n<h3 id=\"变量-Variable\"><a href=\"#变量-Variable\" class=\"headerlink\" title=\"变量 Variable\"></a>变量 Variable</h3><ul>\n<li><p>一些VEX代码中的变量，如果它们只会在该节点的代码里面用到，那么就没有必要设置为属性了，我们称之为局部变量，就是它只属于所在的这个节点，节点算完之后就把它所占用的空间释放了，生不带来，死不带去。</p>\n<p><img src=\"/2019/12/01/Houdini_Entagma_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2020-02-26-17-23-21.png\" alt></p>\n</li>\n<li><p>数组创建 float array_name[] </p>\n</li>\n<li><p>变量转向量 vector pos = set(x_var,y_var,z_var)</p>\n</li>\n</ul>\n<h3 id=\"参数-Parameter\"><a href=\"#参数-Parameter\" class=\"headerlink\" title=\"参数 Parameter\"></a>参数 Parameter</h3><ul>\n<li>参数一般出现在节点的paramter窗口，我们可以通过参数这些对节点进行调整。<br>参数非常重要，所以这里详细讲它的几种使用方式：<ul>\n<li>在窗口上，对参数进行自动链接；<br>右键点击源参数，选择”Copy parameter”。<br>右击你要粘贴到的那个参数，选择”Paste relative reference”。</li>\n<li>在窗口上，对参数进行手动链接；<br>此处使用的并不是VEX，而是HScript表达式，但是由于太重要了，就也写在这里：<br>在目标参数处输入函数ch(“源参数路径”)，源参数路径的格式有3种情况：<br><img src=\"/2019/12/01/Houdini_Entagma_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2020-03-03-19-30-55.png\" alt></li>\n<li>在窗口上，手动创建参数；流程见下图，注意在”Parameter Description”一栏，我们新创建的变量有2个名称：Name和Label，Name是参数“真正”的名字，我们在使用ch(“参数名”)或者VEX内引用该参数时，都用的是Name，注意，Name不能包含空格；但是Label可以包含空格，作为参数在用户界面上显示的名称。<br><img src=\"/2019/12/01/Houdini_Entagma_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2020-03-03-19-31-43.png\" alt></li>\n<li>在Wrangle节点里，用VEX代码读取窗口上的参数；同上，使用chi, chf, chv, chs即可。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h2><ul>\n<li><p>printf 打印函数<br>  <code>printf(&quot;str&quot;);</code></p>\n</li>\n<li><p>addpoint 添加点函数</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">addpoint</span><span class=\"params\">(<span class=\"keyword\">int</span> geohandle, <span class=\"keyword\">int</span> point_number)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">addpoint</span><span class=\"params\">(<span class=\"keyword\">int</span> geohandle, <span class=\"built_in\">vector</span> pos)</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>addprim 添加图元函数<br>  Adds a primitive to the geometry.</p>\n<p>  <code>int  addprim(int geohandle, string type)</code></p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">addprim</span><span class=\"params\">(<span class=\"keyword\">int</span> geohandle, <span class=\"built_in\">string</span> type, <span class=\"keyword\">int</span> pt0)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">addprim</span><span class=\"params\">(<span class=\"keyword\">int</span> geohandle, <span class=\"built_in\">string</span> type, <span class=\"keyword\">int</span> pt0, <span class=\"keyword\">int</span> pt1)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">addprim</span><span class=\"params\">(<span class=\"keyword\">int</span> geohandle, <span class=\"built_in\">string</span> type, <span class=\"keyword\">int</span> pt0, <span class=\"keyword\">int</span> pt1, <span class=\"keyword\">int</span> pt2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">addprim</span><span class=\"params\">(<span class=\"keyword\">int</span> geohandle, <span class=\"built_in\">string</span> type, <span class=\"keyword\">int</span> pt0, <span class=\"keyword\">int</span> pt1, <span class=\"keyword\">int</span> pt2, <span class=\"keyword\">int</span> pt3)</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>addvertex 添加顶点函数<br>  Adds a vertex to a primitive in a geometry.<br>  <code>int  addvertex(int geohandle, int prim_num, int point_num)</code></p>\n</li>\n<li><p>rand 随机函数<br>  Creates a random number between 0 and 1 from a seed.</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">float  rand(float seed)</span><br><span class=\"line\">vector2  rand(float seed)</span><br><span class=\"line\">vector  rand(float seed)</span><br><span class=\"line\">vector4  rand(float seed)</span><br><span class=\"line\">float  rand(float seed, float seed2)</span><br><span class=\"line\">vector2  rand(float seed, float seed2)</span><br><span class=\"line\">vector  rand(float seed, float seed2)</span><br><span class=\"line\">vector4  rand(float seed, float seed2)</span><br><span class=\"line\">float  rand(vector2 seed)</span><br><span class=\"line\">vector2  rand(vector2 seed)</span><br><span class=\"line\">vector  rand(vector2 seed)</span><br><span class=\"line\">vector4  rand(vector2 seed)</span><br><span class=\"line\">float  rand(vector seed)</span><br><span class=\"line\">vector2  rand(vector seed)</span><br><span class=\"line\">vector  rand(vector seed)</span><br><span class=\"line\">vector4  rand(vector seed)</span><br><span class=\"line\">float  rand(vector4 seed)</span><br><span class=\"line\">vector2  rand(vector4 seed)</span><br><span class=\"line\">vector  rand(vector4 seed)</span><br><span class=\"line\">vector4  rand(vector4 seed)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>fit 重映射函数<br>  Takes the value in one range and shifts it to the corresponding value in a new range.<br>  <code>float  fit(float value, float omin, float omax, float nmin, float nmax)</code></p>\n</li>\n<li><p>ch 滑块函数<br>  Evaluates a channel (or parameter) and return its value.<br>  <code>ch(&quot;string&quot;);</code></p>\n</li>\n<li><p>curlnoise 卷曲噪点函数<br>  Computes divergence free noise based on Perlin noise.<br>  <code>vector  curlnoise(vector xyz);</code><br>  <code>vector  curlnoise(vector4 xyzt)</code></p>\n</li>\n<li><p>push 数组添加元素函数<br>  Adds an item to an array.<br>  <code>void  push(&lt;type&gt;&amp;array[], &lt;type&gt;value)</code><br>  <code>void  push(&lt;type&gt;&amp;array[], &lt;type&gt;values[])</code></p>\n</li>\n<li><p>pop 数组弹出函数<br>  Removes the last element of an array and returns it. <code>&lt;type&gt; pop(&lt;type&gt;&amp;array[])</code><br>  <code>&lt;type&gt; pop(&lt;type&gt;&amp;array[], int index)</code></p>\n</li>\n<li><p>removeindex 数组删除元素函数<br>  Removes an item at the given index from an array.<br>  <code>&lt;type&gt; removeindex(&lt;type&gt;&amp;array[], int index)</code></p>\n</li>\n<li><p>nearpoint 查找最近顶点函数<br>  Finds the closest point in a geometry. </p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">nearpoint</span><span class=\"params\">(&lt;geometry&gt;geometry, <span class=\"built_in\">vector</span> pt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">nearpoint</span><span class=\"params\">(&lt;geometry&gt;geometry, <span class=\"built_in\">vector</span> pt, <span class=\"keyword\">float</span> maxdist)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">nearpoint</span><span class=\"params\">(&lt;geometry&gt;geometry, <span class=\"built_in\">string</span> ptgroup, <span class=\"built_in\">vector</span> pt)</span></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">nearpoint</span><span class=\"params\">(&lt;geometry&gt;geometry, <span class=\"built_in\">string</span> ptgroup, <span class=\"built_in\">vector</span> pt, <span class=\"keyword\">float</span> maxdist)</span></span></span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96;</span><br><span class=\"line\">    </span><br><span class=\"line\">* nearpoints 查找最近顶点函数 </span><br><span class=\"line\">    Finds the closest point in a geometry. </span><br><span class=\"line\">​&#96;&#96;&#96;c</span><br><span class=\"line\">    int [] nearpoints(&lt;geometry&gt;geometry, vector pt, float maxdist)</span><br><span class=\"line\">    </span><br><span class=\"line\">    int [] nearpoints(&lt;geometry&gt;geometry, vector pt, float maxdist, int maxpts)</span><br><span class=\"line\">    </span><br><span class=\"line\">    int [] nearpoints(&lt;geometry&gt;geometry, string ptgroup, vector pt, float maxdist)</span><br><span class=\"line\">    </span><br><span class=\"line\">    int [] nearpoints(&lt;geometry&gt;geometry, string ptgroup, vector pt, float maxdist, int maxpts)</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<ul>\n<li><p>point 从几何体上读取点的某个属性的值函数<br>  Reads a point attribute value from a geometry.<br>  <code>point(&lt;geometry&gt;geometry, string attribute_name, int pointnumber)</code></p>\n</li>\n<li><p>primpoints 从几何体上读取点函数<br>  Returns the list of points on a primitive.<br>  <code>int [] primpoints(&lt;geometry&gt;geometry, int primnum)</code></p>\n</li>\n<li><p>distance 距离函数<br>  Returns the distance between two points.<br>  <code>float  distance(vector2 a, vector2 b)</code></p>\n</li>\n<li><p>removepoint 删除点函数<br>  Removes a point from the geometry.<br>  <code>int  removepoint(int geohandle, int point_number)</code></p>\n</li>\n<li><p>primpoint 将图元/顶点转换为点的ID函数.<br>  Converts a primitive/vertex pair into a point number.<br>  <code>int primpoint(&lt;geometry&gt;, int primnum, int vertex)</code></p>\n</li>\n<li><p>itoa 整型转字符串函数<br>  Converts an integer to a string.<br>  <code>string  itoa(int number)</code></p>\n</li>\n<li><p>getbbox_max 计算几何的边界框的最小值函数<br>  Returns the maximum of the bounding box for the geometry..<br>  <code>vector  getbbox_max(geometry)</code></p>\n</li>\n<li><p>getbbox_max 计算几何的边界框的最大值函数<br>  Computes the minimum of the bounding box for the geometry.<br>  <code>vector  getbbox_max(&lt;geometry&gt;geometry, string primgroup)</code></p>\n</li>\n<li><p>getbbox_size 返回边界框的尺寸函数<br>  Returns the size of the bounding box for the geometry.<br>  <code>vector  getbbox_size(&lt;geometry&gt;geometry)</code><br>  <code>vector  getbbox_size(&lt;geometry&gt;geometry, string primgroup)</code></p>\n</li>\n<li><p>lerp 在值之间执行双线性插值函数</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Performs bilinear interpolation between the values.</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">float</span>  <span class=\"title\">lerp</span><span class=\"params\">(<span class=\"keyword\">float</span> value1, <span class=\"keyword\">float</span> value2, <span class=\"keyword\">float</span> amount)</span></span></span><br><span class=\"line\">Performs bilinear interpolation between corresponding components.</span><br><span class=\"line\">&lt;<span class=\"built_in\">vector</span>&gt; lerp(&lt;<span class=\"built_in\">vector</span>&gt;value1, &lt;<span class=\"built_in\">vector</span>&gt;value2, <span class=\"keyword\">float</span> amount)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>removeprim 删除图元函数<br>  Removes a primitive from the geometry.<br>  <code>int  removeprim(int geohandle, int prim_number, int andpoints)</code></p>\n</li>\n<li><p>pow 冪函數<br>  Raises the first argument to the power of the second argument.</p>\n  <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">float</span>  <span class=\"title\">pow</span><span class=\"params\">(<span class=\"keyword\">float</span> n, <span class=\"keyword\">float</span> exponent)</span></span></span><br><span class=\"line\">&lt;vector&gt; pow(&lt;vector&gt;v, float exponent)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>setpointattrib设置顶点属性函数<br>  Sets a point attribute in a geometry.</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">setpointattrib</span><span class=\"params\">(<span class=\"keyword\">int</span> geohandle, <span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> point_num, &lt;type&gt;value, <span class=\"built_in\">string</span> mode=<span class=\"string\">\"set\"</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">setpointattrib</span><span class=\"params\">(<span class=\"keyword\">int</span> geohandle, <span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> point_num, &lt;type&gt;value[], <span class=\"built_in\">string</span> mode=<span class=\"string\">\"set\"</span>)</span></span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<ul>\n<li><p>npoints 得到几何体的点数函数<br>  Returns the number of points in the input or geometry file.<br>  <code>int  npoints(&lt;geometry&gt;geometry)</code></p>\n</li>\n<li><p>resize 设置数组长度函数<br>  Sets the length of an array.<br>  <code>void  resize(&lt;type&gt;&amp;array[], int size)</code></p>\n</li>\n<li><p>argsort 数组排序函数<br>  Returns the indices of a sorted version of an array.<br>  <code>int [] argsort(&lt;type&gt;value[])</code></p>\n</li>\n<li><p>setpointgroup 添加点组函数<br>  Adds or removes a point to/from a group in a geometry.<br>  <code>int  setpointgroup(int geohandle, string name, int point_num, int value, string mode=&quot;set&quot;)</code><br>  geohandle</p>\n<p>  A handle to the geometry to write to. Currently the only valid value is 0 or geoself, which means the current geometry in a node. (This argument may be used in the future to allow writing to other geometries.)</p>\n<p>  name</p>\n<p>  The name of the group to modify.</p>\n<p>  point_num</p>\n<p>  The point number to add or remove from the group.</p>\n<p>  value</p>\n<p>  1 to put the point in the group, 0 to remove the point from the group. This is ignored if mode is “toggle”.</p>\n<p>  mode</p>\n<p>  Use “set” to set the point’s membership according to the value. Use “toggle” to toggle the point’s membership, regardless of the value.</p>\n</li>\n<li><p>pointprims 返回一个图元包含的点函数<br>  pointprims<br>  Returns the list of primitives containing a point.<br>  <code>int [] pointprims(&lt;geometry&gt;geometry, int ptnum)</code></p>\n</li>\n</ul>\n<ul>\n<li>intersect 计算射线与几何的交叉函数<br>  This function computes the first intersection of a ray with geometry.</li>\n</ul>\n<ul>\n<li><p>detail 从几何读取详细信息属性值的函数</p>\n<p>  Reads the value of a detail attribute value from a geometry.</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type&gt; detail(&lt;geometry&gt;geometry, string attribute_name, int ignored&#x3D;0)</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;type&gt;[] detail(&lt;geometry&gt;geometry, string attribute_name, int ignored&#x3D;0)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>radians 弧度函数<br>  Converts the argument from degrees into radians.<br>  从度数转弧度<br>  <code>float  radians(float num_in_degs)</code></p>\n</li>\n<li><p>rotate  旋转函数<br>  Applies a rotation to the given matrix.</p>\n  <figure class=\"highlight plain\"><figcaption><span>rotate(matrix2 &m, float amount)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">void  rotate(matrix3 &amp;m, float amount, vector axis)</span><br><span class=\"line\"></span><br><span class=\"line\">void  rotate(matrix &amp;m, float amount, vector axis)</span><br><span class=\"line\"></span><br><span class=\"line\">void  rotate(matrix3 &amp;m, vector angles, int xyz)</span><br><span class=\"line\"></span><br><span class=\"line\">void  rotate(matrix &amp;m, vector angles, int xyz)</span><br><span class=\"line\"></span><br><span class=\"line\">void  rotate(matrix3 &amp;m, float angle, int axis)</span><br><span class=\"line\"></span><br><span class=\"line\">void  rotate(matrix &amp;m, float angle, int axis)</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">* scale 缩放函数</span><br><span class=\"line\">    Scales the given matrix in three directions simultaneously (X, Y, Z - given by the components of the scale_vector)</span><br></pre></td></tr></table></figure>\n<p>  void  scale(matrix2 &amp;m, vector2 scale_vector)</p>\n<p>  void  scale(matrix &amp;m, vector scale_vector)</p>\n<p>  void  scale(matrix3 &amp;m, vector scale_vector)</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">* translate 位移函数</span><br><span class=\"line\">    Translates a matrix by a vector.</span><br></pre></td></tr></table></figure>\n<p>  void  translate(matrix &amp;m, vector amount)</p>\n<p>  void  translate(matrix &amp;m, vector4 amount)</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">* quaternion  四元数函数</span><br><span class=\"line\">    Creates a vector4 representing a quaternion.</span><br><span class=\"line\">    创建一个表示四元数的vector4</span><br></pre></td></tr></table></figure>\n<p>  vector4  quaternion(matrix3 rotations)</p>\n<p>  Creates a vector4 representing a quaternion from a 3×3 rotational matrix.</p>\n<p>  vector4  quaternion(float angle, vector axis)</p>\n<p>  Creates a vector4 representing a quaternion from an angle and axis. The angle is specified in radians.</p>\n<p>  vector4  quaternion(vector angleaxis)</p>\n<p>  Creates a vector4 representing a quaternion from a combined angle/axis. This is the normalized rotation axis multiplied by the rotation angle in radians.</p>\n<p>  There used to be a fourth form that took a rotation vector. It has been renamed to eulertoquaternion and now takes radians.</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* qrotate 四元数旋转函数</span><br><span class=\"line\"></span><br><span class=\"line\">    Rotates a vector by a quaternion.</span><br><span class=\"line\">    通过四元数旋转向量。</span><br><span class=\"line\">    &#96;vector  qrotate(vector4 quaternion, vector v)&#96;</span><br><span class=\"line\"></span><br><span class=\"line\">* slerp 四元数基于偏差的融和函数</span><br><span class=\"line\"></span><br><span class=\"line\">    Quaternion blend between q1 and q2 based on the bias.</span><br><span class=\"line\">    &#96;vector4  slerp(vector4 q1, vector4 q2, float bias)&#96;</span><br><span class=\"line\"></span><br><span class=\"line\">* primintrinsic  从几何读取基本图元函数</span><br><span class=\"line\"></span><br><span class=\"line\">    Reads a primitive intrinsic from a geometry.</span><br><span class=\"line\">    从几何读取基本图元</span><br></pre></td></tr></table></figure>\n<p>  <type> primintrinsic(<geometry>geometry, string intrinsic_name, int prim_num)</geometry></type></p>\n<p>  <type>[] primintrinsic(<geometry>geometry, string intrinsic_name, int prim_num)</geometry></type></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 常用表达式</span><br><span class=\"line\">* $FF 帧变量</span><br><span class=\"line\"></span><br><span class=\"line\">## 节点</span><br><span class=\"line\"></span><br><span class=\"line\">* scatter</span><br><span class=\"line\">撒点 散布节点</span><br><span class=\"line\"></span><br><span class=\"line\">* isooffset</span><br><span class=\"line\">配合散布节点使用 可以散布到物体内部并且在位置上有一定随机</span><br><span class=\"line\"></span><br><span class=\"line\">* attribute randomize</span><br><span class=\"line\">随机某个属性</span><br><span class=\"line\"></span><br><span class=\"line\">* attribute paint</span><br><span class=\"line\">绘制变量属性,结合scatter可以实现局部撒点</span><br><span class=\"line\"></span><br><span class=\"line\">* relax</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">## 快捷键</span><br><span class=\"line\">* 弹出代码框 ALT+E</span><br><span class=\"line\">* 弹出当前选中的功能区 ALT + SHIFT+ C</span><br><span class=\"line\">* 调整焦点 选中相机视口 回车（Show handle）+ Z</span><br><span class=\"line\"></span><br><span class=\"line\">## vex语法</span><br><span class=\"line\"></span><br><span class=\"line\">* for 循环</span><br><span class=\"line\"></span><br><span class=\"line\">    &#96;&#96;&#96;c</span><br><span class=\"line\">    for(int i &#x3D; 0 ; i&gt;num;i++)&#123;</span><br><span class=\"line\">        something;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>foreach循环</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foreach(<span class=\"keyword\">int</span> npt;npts)&#123;</span><br><span class=\"line\">    something;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>条件判断</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if()&#123;</span><br><span class=\"line\">    something;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">    something;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if()&#123;</span><br><span class=\"line\">    something;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else if()&#123;</span><br><span class=\"line\">    something;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">    something;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id=\"外部函数导入和外部编辑器设置\"><a href=\"#外部函数导入和外部编辑器设置\" class=\"headerlink\" title=\"外部函数导入和外部编辑器设置\"></a>外部函数导入和外部编辑器设置</h2><ul>\n<li>外部编辑器设置<ol>\n<li>找到 C:\\Users\\username\\Documents\\houdini18.0 下找到** houdini.env **</li>\n<li>加入这一行代码  注意路径和路径反斜线写法<br><code>Editor = &quot;C:/Users/username/AppData/Local/Programs/Microsoft VS Code/Code.exe&quot;</code></li>\n<li>然后重启houdini</li>\n</ol>\n</li>\n<li>外部函数导入<ol>\n<li>找到 C:\\Users\\username\\Documents\\houdini18.0 下找到** houdini.env **</li>\n<li>加入这一行代码  注意路径反斜线写法和结尾字符<br><code>HOUDINI_VEX_PATH = &quot;C:/Users/sunyuxiang/Documents/houdini18.0/Custom_VEX;&amp;&quot;</code></li>\n<li>然后把函数放到这里即可C:\\Users\\sunyuxiang\\Documents\\houdini18.0\\Custom_VEX</li>\n<li>然后重启houdini</li>\n<li>调用方法 #include “你的函数文件夹名”</li>\n</ol>\n</li>\n<li>打开代码窗口<ol>\n<li>Alt+E</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"每节例子总结\"><a href=\"#每节例子总结\" class=\"headerlink\" title=\"每节例子总结\"></a>每节例子总结</h2><ul>\n<li><p>给顶点的法线信息指认随机生成的向量，通过滑块调整随机种子</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> seed = chf(<span class=\"string\">\"seed\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// set random scale (0 ... 0.1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">float</span> pscale = rand(@ptnum+seed);<span class=\"comment\">//定义一个 浮点变量</span></span><br><span class=\"line\">pscale *= <span class=\"number\">.1</span>; <span class=\"comment\">//浮点变量缩小十分之1</span></span><br><span class=\"line\">f@pscale = pscale; <span class=\"comment\">//设置属性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// set random orientation using N(&#123;-1,-1,-1&#125; ... &#123;1,1,1&#125;)</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span> randdir = rand(@ptnum+seed);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//randdir = fit(randdir,&#123;0,0,0&#125;,&#123;1,1,1&#125;,&#123;-1,-1,-1&#125;,&#123;1,1,1&#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// 因为@ptnum是正轴递增，所以random的结果太相似 所以重新映射一下</span></span><br><span class=\"line\">randdir = fit01(randdir,&#123;<span class=\"number\">-1</span>,<span class=\"number\">-1</span>,<span class=\"number\">-1</span>&#125;,&#123;<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>&#125;); </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//给顶点的法线信息指认随机生成的向量</span></span><br><span class=\"line\">v@N = randdir;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>所有点的向量实时指向某个点<br>  为了得到指向某个点的向量，我们需要用目标点减去基点如图：<br>  <img src=\"/2019/12/01/Houdini_Entagma_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2020-02-18-20-23-42.png\" alt></p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//拿到接口1的 第0个顶点的属性名\"P\"的值</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span> tgtpos = <span class=\"built_in\">point</span>(<span class=\"number\">1</span>,<span class=\"string\">\"P\"</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// 目标点减去 模板点 得到向量</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span> dir = tgtpos - v@P;</span><br><span class=\"line\"><span class=\"comment\">//归一化向量</span></span><br><span class=\"line\"><span class=\"comment\">//v@N =dir;</span></span><br><span class=\"line\">v@N =normalize(dir);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用卷积化随机函数创建向量赋予点</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">vector</span> f = chv(<span class=\"string\">\"Frequency\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">vector</span> o = chv(<span class=\"string\">\"offset\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//这里是卷积化随机向量</span></span><br><span class=\"line\"><span class=\"built_in\">vector</span> dir = curlnoise((v@P * f)+ o);</span><br><span class=\"line\"><span class=\"comment\">//归一化向量</span></span><br><span class=\"line\">v@N =normalize(dir);</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<ul>\n<li>使用nearpoints函数查找最近的点并创建线  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">float</span> maxdist = chf(<span class=\"string\">\"max_Dist\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">float</span> mindist = chf(<span class=\"string\">\"Min_Dist\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//找到函数</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> npts[] = nearpoints(<span class=\"number\">0</span>,v@P,maxdist);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//移除找到的自己</span></span><br><span class=\"line\">removeindex(npts,<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//赋予属性给点</span></span><br><span class=\"line\">i[]@npts = npts;</span><br><span class=\"line\"></span><br><span class=\"line\">foreach(<span class=\"keyword\">int</span> npt;npts)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span> npos = <span class=\"built_in\">point</span>(<span class=\"number\">0</span>,<span class=\"string\">\"p\"</span>,npt);</span><br><span class=\"line\">    <span class=\"keyword\">float</span> dist = distance(v@P,npos);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dist &gt; mindist)&#123;</span><br><span class=\"line\">        addprim(<span class=\"number\">0</span>,<span class=\"string\">\"polyline\"</span>,@ptnum,npt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h2 id=\"理解矩阵很好的教程\"><a href=\"#理解矩阵很好的教程\" class=\"headerlink\" title=\"理解矩阵很好的教程\"></a>理解矩阵很好的教程</h2><p> <img src=\"/2019/12/01/Houdini_Entagma_%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/entagma_martrix.png\" alt></p>"},{"title":"Python文件打包成可执行文件","date":"2019-12-01T14:53:13.000Z","_content":"\n\nPython是一个脚本语言，被解释器解释执行。它的发布方式：\n\n## .py 文件\n\n没什么好讲的，开源项目或者个人练习，直接提供源码最简单粗暴，需要使用者自行安装Python并且安装依赖的各种库。\n\n## .pyc 文件\n\n如果觉得源码写的差劲不好意思被别人看到，或者出于保密等不愿意源码被运行者看到，可以使用pyc文件发布，pyc文件是Python解释器可以识别的二进制码，故发布后也是跨平台的，需要使用者安装相应版本的Python和依赖库。\n<!-- more -->\n```\n#代码\nimport py_compile\npy_compile.compile(\"D:\\Python\\main.py\")            # 相对路径或绝对路径\n\n#命令行下\npython -m py_compile test.py\n#会在相同路径里面创建__pycache__文件夹，编译过的pyc文件就在里面\n\n#多个文件\nimport compileall\ncompileall.compile_dir(\"存放海量py的目录\")\n```\n\n## 可执行exe文件\n\n- pyInstaller\n\t  1.安装pyInstaller\n\n\t```\n\t$ pip install pyinstaller #安装\n\t$ pyinstaller --version #查看版本\n\t```\n\n    2.如果查看版本报错\n\n    ```\n    'pyinstall' is not recognized as an internal or external \t\tcommand,operable program or batch file.#需要系统变量里的Path变量下添加其所在目录，然后重启命令行即可.\n    ```\n\n    3.使用pyInstaller：\n  ```pyinstaller -F helloworld.py```\n  \n  \n  \n- py2exe\n\n\t1. 命令行``pip install py2exe``安装\n\t\n\t1. 在命令行内测试你的程序确定可以运行\n\t\n\t   ``python helloworld.py``\n\t\n\t2. 创建你自己的执行脚本 (setup.py)\n\t\n\t   ```\n\t   from distutils.core import setup\n\t   \n\t   import py2exe\n\t   \n\t        \n\t   setup(console=[\"helloworld.py\"]) #这里helloworld.py替换成你的脚本\n\t   ```\n\t\n\t 3. 在命令行Run your setup script\n\t\n\t    ``python setup.py py2exe``\n\t 4. 然后再dist文件夹下就会看到生成的.exe 文件了\n\t\n\t5. 如果出现``IndexError: tuple index out of range``的话是因为py2exe停止支持3.4以上版本，可以换用这个地方的py2exe, 但是好像也是有问题\n\t\n\t   ref：https://stackoverflow.com/questions/41578808/python-indexerror-tuple-index-out-of-range-when-using-py2exe\n\t\n\t   ref：https://github.com/albertosottile/py2exe\n\t\n\t\n\t\n- cx_Freeze\n\n    1. ``$ pip install cx_Freeze``安装\n\n    2. ```$ cxfreeze hello.py --target-dir dist```生成执行文件，如果报错无法识别就参考这个解决\n\n       ref:https://stackoverflow.com/questions/25242860/cxfreeze-command-not-found-in-windows/25243419#25243419 \n\n- auto-py-to-exe 2.6.6\n  1. ``$ pip install auto-py-to-exe`` 安装\n  2. ````$ auto-py-to-exe`` 使用\n\n","source":"_posts/Python文件打包成可执行文件.md","raw":"---\ntitle: Python文件打包成可执行文件\ndate: 2019-12-01 22:53:13\ntags: python\n---\n\n\nPython是一个脚本语言，被解释器解释执行。它的发布方式：\n\n## .py 文件\n\n没什么好讲的，开源项目或者个人练习，直接提供源码最简单粗暴，需要使用者自行安装Python并且安装依赖的各种库。\n\n## .pyc 文件\n\n如果觉得源码写的差劲不好意思被别人看到，或者出于保密等不愿意源码被运行者看到，可以使用pyc文件发布，pyc文件是Python解释器可以识别的二进制码，故发布后也是跨平台的，需要使用者安装相应版本的Python和依赖库。\n<!-- more -->\n```\n#代码\nimport py_compile\npy_compile.compile(\"D:\\Python\\main.py\")            # 相对路径或绝对路径\n\n#命令行下\npython -m py_compile test.py\n#会在相同路径里面创建__pycache__文件夹，编译过的pyc文件就在里面\n\n#多个文件\nimport compileall\ncompileall.compile_dir(\"存放海量py的目录\")\n```\n\n## 可执行exe文件\n\n- pyInstaller\n\t  1.安装pyInstaller\n\n\t```\n\t$ pip install pyinstaller #安装\n\t$ pyinstaller --version #查看版本\n\t```\n\n    2.如果查看版本报错\n\n    ```\n    'pyinstall' is not recognized as an internal or external \t\tcommand,operable program or batch file.#需要系统变量里的Path变量下添加其所在目录，然后重启命令行即可.\n    ```\n\n    3.使用pyInstaller：\n  ```pyinstaller -F helloworld.py```\n  \n  \n  \n- py2exe\n\n\t1. 命令行``pip install py2exe``安装\n\t\n\t1. 在命令行内测试你的程序确定可以运行\n\t\n\t   ``python helloworld.py``\n\t\n\t2. 创建你自己的执行脚本 (setup.py)\n\t\n\t   ```\n\t   from distutils.core import setup\n\t   \n\t   import py2exe\n\t   \n\t        \n\t   setup(console=[\"helloworld.py\"]) #这里helloworld.py替换成你的脚本\n\t   ```\n\t\n\t 3. 在命令行Run your setup script\n\t\n\t    ``python setup.py py2exe``\n\t 4. 然后再dist文件夹下就会看到生成的.exe 文件了\n\t\n\t5. 如果出现``IndexError: tuple index out of range``的话是因为py2exe停止支持3.4以上版本，可以换用这个地方的py2exe, 但是好像也是有问题\n\t\n\t   ref：https://stackoverflow.com/questions/41578808/python-indexerror-tuple-index-out-of-range-when-using-py2exe\n\t\n\t   ref：https://github.com/albertosottile/py2exe\n\t\n\t\n\t\n- cx_Freeze\n\n    1. ``$ pip install cx_Freeze``安装\n\n    2. ```$ cxfreeze hello.py --target-dir dist```生成执行文件，如果报错无法识别就参考这个解决\n\n       ref:https://stackoverflow.com/questions/25242860/cxfreeze-command-not-found-in-windows/25243419#25243419 \n\n- auto-py-to-exe 2.6.6\n  1. ``$ pip install auto-py-to-exe`` 安装\n  2. ````$ auto-py-to-exe`` 使用\n\n","slug":"Python文件打包成可执行文件","published":1,"updated":"2020-03-13T13:52:02.560Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7rbphze000aw8p4evxx4hn9","content":"<p>Python是一个脚本语言，被解释器解释执行。它的发布方式：</p>\n<h2 id=\"py-文件\"><a href=\"#py-文件\" class=\"headerlink\" title=\".py 文件\"></a>.py 文件</h2><p>没什么好讲的，开源项目或者个人练习，直接提供源码最简单粗暴，需要使用者自行安装Python并且安装依赖的各种库。</p>\n<h2 id=\"pyc-文件\"><a href=\"#pyc-文件\" class=\"headerlink\" title=\".pyc 文件\"></a>.pyc 文件</h2><p>如果觉得源码写的差劲不好意思被别人看到，或者出于保密等不愿意源码被运行者看到，可以使用pyc文件发布，pyc文件是Python解释器可以识别的二进制码，故发布后也是跨平台的，需要使用者安装相应版本的Python和依赖库。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#代码</span><br><span class=\"line\">import py_compile</span><br><span class=\"line\">py_compile.compile(&quot;D:\\Python\\main.py&quot;)            # 相对路径或绝对路径</span><br><span class=\"line\"></span><br><span class=\"line\">#命令行下</span><br><span class=\"line\">python -m py_compile test.py</span><br><span class=\"line\">#会在相同路径里面创建__pycache__文件夹，编译过的pyc文件就在里面</span><br><span class=\"line\"></span><br><span class=\"line\">#多个文件</span><br><span class=\"line\">import compileall</span><br><span class=\"line\">compileall.compile_dir(&quot;存放海量py的目录&quot;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可执行exe文件\"><a href=\"#可执行exe文件\" class=\"headerlink\" title=\"可执行exe文件\"></a>可执行exe文件</h2><ul>\n<li><p>pyInstaller</p>\n<pre><code>1.安装pyInstaller</code></pre>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install pyinstaller #安装</span><br><span class=\"line\">$ pyinstaller --version #查看版本</span><br></pre></td></tr></table></figure>\n\n<p>  2.如果查看版本报错</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#39;pyinstall&#39; is not recognized as an internal or external \t\tcommand,operable program or batch file.#需要系统变量里的Path变量下添加其所在目录，然后重启命令行即可.</span><br></pre></td></tr></table></figure>\n\n<p>  3.使用pyInstaller：</p>\n<figure class=\"highlight plain\"><figcaption><span>-F helloworld.py```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">- py2exe</span><br><span class=\"line\"></span><br><span class=\"line\">\t1. 命令行&#96;&#96;pip install py2exe&#96;&#96;安装</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t1. 在命令行内测试你的程序确定可以运行</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t   &#96;&#96;python helloworld.py&#96;&#96;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t2. 创建你自己的执行脚本 (setup.py)</span><br></pre></td></tr></table></figure>\n<pre><code>from distutils.core import setup\n\nimport py2exe</code></pre></li>\n</ul>\n<pre><code>   setup(console=[&quot;helloworld.py&quot;]) #这里helloworld.py替换成你的脚本\n   ```\n\n 3. 在命令行Run your setup script\n\n    ``python setup.py py2exe``\n 4. 然后再dist文件夹下就会看到生成的.exe 文件了\n\n5. 如果出现``IndexError: tuple index out of range``的话是因为py2exe停止支持3.4以上版本，可以换用这个地方的py2exe, 但是好像也是有问题\n\n   ref：https://stackoverflow.com/questions/41578808/python-indexerror-tuple-index-out-of-range-when-using-py2exe\n\n   ref：https://github.com/albertosottile/py2exe</code></pre><ul>\n<li><p>cx_Freeze</p>\n<ol>\n<li><p><code>$ pip install cx_Freeze</code>安装</p>\n</li>\n<li><p><code>$ cxfreeze hello.py --target-dir dist</code>生成执行文件，如果报错无法识别就参考这个解决</p>\n<p>ref:<a href=\"https://stackoverflow.com/questions/25242860/cxfreeze-command-not-found-in-windows/25243419#25243419\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/25242860/cxfreeze-command-not-found-in-windows/25243419#25243419</a> </p>\n</li>\n</ol>\n</li>\n<li><p>auto-py-to-exe 2.6.6</p>\n<ol>\n<li><code>$ pip install auto-py-to-exe</code> 安装</li>\n<li>````$ auto-py-to-exe`` 使用</li>\n</ol>\n</li>\n</ul>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#2d6b96","paginator":"#6AA7D2","button_hover":"#3B8BC4","text_selection":"#6AA7D2","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#6AA7D2","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"文章":"/","归档":"/archives"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":true,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":null,"top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2013,"footer_custom_text":"Hi, welcome to my <a href=\"https://sunyuxianggit.github.io/\">blog</a>!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":true,"url":"https://github.com/sunyuxianggit","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"SunYuxiangのBlog","subtitle":"好记性,不如烂笔头.今天你要写点什么？","description":"","author":"Sun Yuxiang","language":"zh-Hans","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/sunyuxianggit/sunyuxianggit.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false}}}}},"excerpt":"<p>Python是一个脚本语言，被解释器解释执行。它的发布方式：</p>\n<h2 id=\"py-文件\"><a href=\"#py-文件\" class=\"headerlink\" title=\".py 文件\"></a>.py 文件</h2><p>没什么好讲的，开源项目或者个人练习，直接提供源码最简单粗暴，需要使用者自行安装Python并且安装依赖的各种库。</p>\n<h2 id=\"pyc-文件\"><a href=\"#pyc-文件\" class=\"headerlink\" title=\".pyc 文件\"></a>.pyc 文件</h2><p>如果觉得源码写的差劲不好意思被别人看到，或者出于保密等不愿意源码被运行者看到，可以使用pyc文件发布，pyc文件是Python解释器可以识别的二进制码，故发布后也是跨平台的，需要使用者安装相应版本的Python和依赖库。</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#代码</span><br><span class=\"line\">import py_compile</span><br><span class=\"line\">py_compile.compile(&quot;D:\\Python\\main.py&quot;)            # 相对路径或绝对路径</span><br><span class=\"line\"></span><br><span class=\"line\">#命令行下</span><br><span class=\"line\">python -m py_compile test.py</span><br><span class=\"line\">#会在相同路径里面创建__pycache__文件夹，编译过的pyc文件就在里面</span><br><span class=\"line\"></span><br><span class=\"line\">#多个文件</span><br><span class=\"line\">import compileall</span><br><span class=\"line\">compileall.compile_dir(&quot;存放海量py的目录&quot;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可执行exe文件\"><a href=\"#可执行exe文件\" class=\"headerlink\" title=\"可执行exe文件\"></a>可执行exe文件</h2><ul>\n<li><p>pyInstaller</p>\n<pre><code>1.安装pyInstaller</code></pre>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pip install pyinstaller #安装</span><br><span class=\"line\">$ pyinstaller --version #查看版本</span><br></pre></td></tr></table></figure>\n\n<p>  2.如果查看版本报错</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#39;pyinstall&#39; is not recognized as an internal or external \t\tcommand,operable program or batch file.#需要系统变量里的Path变量下添加其所在目录，然后重启命令行即可.</span><br></pre></td></tr></table></figure>\n\n<p>  3.使用pyInstaller：</p>\n<figure class=\"highlight plain\"><figcaption><span>-F helloworld.py```</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">- py2exe</span><br><span class=\"line\"></span><br><span class=\"line\">\t1. 命令行&#96;&#96;pip install py2exe&#96;&#96;安装</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t1. 在命令行内测试你的程序确定可以运行</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t   &#96;&#96;python helloworld.py&#96;&#96;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t2. 创建你自己的执行脚本 (setup.py)</span><br></pre></td></tr></table></figure>\n<pre><code>from distutils.core import setup\n\nimport py2exe</code></pre></li>\n</ul>\n<pre><code>   setup(console=[&quot;helloworld.py&quot;]) #这里helloworld.py替换成你的脚本\n   ```\n\n 3. 在命令行Run your setup script\n\n    ``python setup.py py2exe``\n 4. 然后再dist文件夹下就会看到生成的.exe 文件了\n\n5. 如果出现``IndexError: tuple index out of range``的话是因为py2exe停止支持3.4以上版本，可以换用这个地方的py2exe, 但是好像也是有问题\n\n   ref：https://stackoverflow.com/questions/41578808/python-indexerror-tuple-index-out-of-range-when-using-py2exe\n\n   ref：https://github.com/albertosottile/py2exe</code></pre><ul>\n<li><p>cx_Freeze</p>\n<ol>\n<li><p><code>$ pip install cx_Freeze</code>安装</p>\n</li>\n<li><p><code>$ cxfreeze hello.py --target-dir dist</code>生成执行文件，如果报错无法识别就参考这个解决</p>\n<p>ref:<a href=\"https://stackoverflow.com/questions/25242860/cxfreeze-command-not-found-in-windows/25243419#25243419\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/25242860/cxfreeze-command-not-found-in-windows/25243419#25243419</a> </p>\n</li>\n</ol>\n</li>\n<li><p>auto-py-to-exe 2.6.6</p>\n<ol>\n<li><code>$ pip install auto-py-to-exe</code> 安装</li>\n<li>````$ auto-py-to-exe`` 使用</li>\n</ol>\n</li>\n</ul>"},{"title":"Python 进程和线程学习笔记","date":"2019-12-01T14:53:13.000Z","_content":"\n\n- ### 进程和线程概述\n\n  进程：对于操作系统来说，一个任务就是一个进程（Process）\n\n  线程：在一个进程内部，要同时干多件事，就需要同时运行多个“子任务”，我们把进程内的这些“子任务”称为线程（Thread）。\n\n- ### 进程\n\n  ```\n  multprocessing # Python 中的 multiprocess 包提供了多进程支持\n  \n  ```\n<!-- more -->\n  ```\n  #process multprocessing包中的一个类表示进程对象\n  \n  from multiprocessing import Process\n  from tqdm import tqdm\n  import os\n  \n  # 子进程要执行的代码\n  def run_proc(name):\n      print('Run child process %s (%s)...' % (name, os.getpid())) #getpid()可以拿到进程的ID。\n      for i in tqdm(range(10000000)):\n          pass\n  \n  if __name__=='__main__': \n  \n  '''\n  有化部分 ，这句代码以上的部分，可以被其它的调用，以下的部分只有这个文件自己可以看见，如果文件被调用了，其他人是无法看见私有化部分的\n  也就是说你自己运行该模块的时候 这句话是执行的 因为自己运行时__name__就是__main__，而当别人调用你这个模块时，以下代码会被忽略，此时的__name__是模块名\n  '''\n      print('Parent process %s.' % os.getpid())\n      p = Process(target=run_proc, args=('test1',))\n      d = Process(target=run_proc, args=('test2',))\n      print('Child process will start.')\n      p.start()#调用进程\n      d.start()#调用进程\n      p.join()#join()方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步\n      d.join()\n      print('Child process end.')\n  ```\n\n  \n\n  ```\n  #Pool multprocessing包中的一个类，如果要启动大量的子进程，可以用进程池的方式批量创建子进程：\n  \n  from multiprocessing import Pool\n  import os, time, random\n  # 子进程要执行的代码\n  def long_time_task(name):\n      # for i in tqdm(range(10000000)):\n      #     pass\n      print('Run task %s (%s)...' % (name, os.getpid()))\n      start = time.time()\n      time.sleep(random.random() * 3)\n      end = time.time()\n      print('Task %s runs %0.2f seconds.' % (name, (end - start)))\n  \n  if __name__=='__main__':\n      print('Parent process %s.' % os.getpid())\n      p = Pool(4)\n      #创建子进程池\n      #参数数决定同时运行多少进程 如果是4 task4会等待 0 1 2 3 运行完在运行，如果是5 就0 1 2 3 4 一起运行\n      #如果你的参数大于你的CPU线程数还是要等待\n      #把参数去掉，就是按照操作系统的核数来\n      \n      for i in range(13):\n          p.apply_async(long_time_task, args=(i,)) #注意这里，因为是类所有调用函数是 P.\n      print('Waiting for all subprocesses done...')\n      p.close()\n      p.join()\n      print('All subprocesses done.')\n  ```\n\n  ```\n  #这种方法可以实现任意进程间的通信，这里写的是主、子进程间的通信\n  import multiprocessing\n  \n  def foo(aa):#必须要接收一个元祖\n      message = aa.get()  # 管子的另一端放在子进程这里，子进程接收到了数据\n      print('子进程已收到数据...')\n      print(message)  # 子进程打印出了数据内容...\n  \n  \n  \n  if __name__ == '__main__': \n  \n      xt = multiprocessing.Queue()  # 创建进程通信的Queue，你可以理解为我拿了个管子来...\n      jc = multiprocessing.Process(target=foo, args=(xt,))  # multiprocessing.Process创建子进程\n      jc.start()  # 启动子进程\n      print('主进程准备发送数据...')\n      xt.put('有内鬼，终止交易！')  # 将管子的一端放在主进程这里，主进程往管子里丢入数据\n      jc.join()\n  ```\n\n- ### 线程\n\n  ```\n  启动一个线程就是把一个函数传入并创建Thread实例，然后调用start()开始执行：\n  import time, threading\n  # 新线程执行的代码:\n  def loop():\n      print('thread %s is running...' % threading.current_thread().name)\n      n = 0\n      while n < 5:\n          n = n + 1\n          print('thread %s >>> %s' % (threading.current_thread().name, n))\n          time.sleep(1)\n      print('thread %s ended.' % threading.current_thread().name)\n  \n  print('thread %s is running...' % threading.current_thread().name)\n  t = threading.Thread(target=loop, name='LoopThread')\n  t.start()\n  t.join()\n  print('thread %s ended.' % threading.current_thread().name)\n  ```\n\n  \n\n","source":"_posts/Python 进程和线程学习笔记.md","raw":"---\ntitle: Python 进程和线程学习笔记\ndate: 2019-12-01 22:53:13\ntags: python\n---\n\n\n- ### 进程和线程概述\n\n  进程：对于操作系统来说，一个任务就是一个进程（Process）\n\n  线程：在一个进程内部，要同时干多件事，就需要同时运行多个“子任务”，我们把进程内的这些“子任务”称为线程（Thread）。\n\n- ### 进程\n\n  ```\n  multprocessing # Python 中的 multiprocess 包提供了多进程支持\n  \n  ```\n<!-- more -->\n  ```\n  #process multprocessing包中的一个类表示进程对象\n  \n  from multiprocessing import Process\n  from tqdm import tqdm\n  import os\n  \n  # 子进程要执行的代码\n  def run_proc(name):\n      print('Run child process %s (%s)...' % (name, os.getpid())) #getpid()可以拿到进程的ID。\n      for i in tqdm(range(10000000)):\n          pass\n  \n  if __name__=='__main__': \n  \n  '''\n  有化部分 ，这句代码以上的部分，可以被其它的调用，以下的部分只有这个文件自己可以看见，如果文件被调用了，其他人是无法看见私有化部分的\n  也就是说你自己运行该模块的时候 这句话是执行的 因为自己运行时__name__就是__main__，而当别人调用你这个模块时，以下代码会被忽略，此时的__name__是模块名\n  '''\n      print('Parent process %s.' % os.getpid())\n      p = Process(target=run_proc, args=('test1',))\n      d = Process(target=run_proc, args=('test2',))\n      print('Child process will start.')\n      p.start()#调用进程\n      d.start()#调用进程\n      p.join()#join()方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步\n      d.join()\n      print('Child process end.')\n  ```\n\n  \n\n  ```\n  #Pool multprocessing包中的一个类，如果要启动大量的子进程，可以用进程池的方式批量创建子进程：\n  \n  from multiprocessing import Pool\n  import os, time, random\n  # 子进程要执行的代码\n  def long_time_task(name):\n      # for i in tqdm(range(10000000)):\n      #     pass\n      print('Run task %s (%s)...' % (name, os.getpid()))\n      start = time.time()\n      time.sleep(random.random() * 3)\n      end = time.time()\n      print('Task %s runs %0.2f seconds.' % (name, (end - start)))\n  \n  if __name__=='__main__':\n      print('Parent process %s.' % os.getpid())\n      p = Pool(4)\n      #创建子进程池\n      #参数数决定同时运行多少进程 如果是4 task4会等待 0 1 2 3 运行完在运行，如果是5 就0 1 2 3 4 一起运行\n      #如果你的参数大于你的CPU线程数还是要等待\n      #把参数去掉，就是按照操作系统的核数来\n      \n      for i in range(13):\n          p.apply_async(long_time_task, args=(i,)) #注意这里，因为是类所有调用函数是 P.\n      print('Waiting for all subprocesses done...')\n      p.close()\n      p.join()\n      print('All subprocesses done.')\n  ```\n\n  ```\n  #这种方法可以实现任意进程间的通信，这里写的是主、子进程间的通信\n  import multiprocessing\n  \n  def foo(aa):#必须要接收一个元祖\n      message = aa.get()  # 管子的另一端放在子进程这里，子进程接收到了数据\n      print('子进程已收到数据...')\n      print(message)  # 子进程打印出了数据内容...\n  \n  \n  \n  if __name__ == '__main__': \n  \n      xt = multiprocessing.Queue()  # 创建进程通信的Queue，你可以理解为我拿了个管子来...\n      jc = multiprocessing.Process(target=foo, args=(xt,))  # multiprocessing.Process创建子进程\n      jc.start()  # 启动子进程\n      print('主进程准备发送数据...')\n      xt.put('有内鬼，终止交易！')  # 将管子的一端放在主进程这里，主进程往管子里丢入数据\n      jc.join()\n  ```\n\n- ### 线程\n\n  ```\n  启动一个线程就是把一个函数传入并创建Thread实例，然后调用start()开始执行：\n  import time, threading\n  # 新线程执行的代码:\n  def loop():\n      print('thread %s is running...' % threading.current_thread().name)\n      n = 0\n      while n < 5:\n          n = n + 1\n          print('thread %s >>> %s' % (threading.current_thread().name, n))\n          time.sleep(1)\n      print('thread %s ended.' % threading.current_thread().name)\n  \n  print('thread %s is running...' % threading.current_thread().name)\n  t = threading.Thread(target=loop, name='LoopThread')\n  t.start()\n  t.join()\n  print('thread %s ended.' % threading.current_thread().name)\n  ```\n\n  \n\n","slug":"Python 进程和线程学习笔记","published":1,"updated":"2020-03-11T02:24:32.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7rbphzf000bw8p4gq7913ul","content":"<ul>\n<li><h3 id=\"进程和线程概述\"><a href=\"#进程和线程概述\" class=\"headerlink\" title=\"进程和线程概述\"></a>进程和线程概述</h3><p>进程：对于操作系统来说，一个任务就是一个进程（Process）</p>\n<p>线程：在一个进程内部，要同时干多件事，就需要同时运行多个“子任务”，我们把进程内的这些“子任务”称为线程（Thread）。</p>\n</li>\n<li><h3 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">multprocessing # Python 中的 multiprocess 包提供了多进程支持</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#process multprocessing包中的一个类表示进程对象</span><br><span class=\"line\"></span><br><span class=\"line\">from multiprocessing import Process</span><br><span class=\"line\">from tqdm import tqdm</span><br><span class=\"line\">import os</span><br><span class=\"line\"></span><br><span class=\"line\"># 子进程要执行的代码</span><br><span class=\"line\">def run_proc(name):</span><br><span class=\"line\">    print(&#39;Run child process %s (%s)...&#39; % (name, os.getpid())) #getpid()可以拿到进程的ID。</span><br><span class=\"line\">    for i in tqdm(range(10000000)):</span><br><span class=\"line\">        pass</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__&#x3D;&#x3D;&#39;__main__&#39;: </span><br><span class=\"line\"></span><br><span class=\"line\">&#39;&#39;&#39;</span><br><span class=\"line\">有化部分 ，这句代码以上的部分，可以被其它的调用，以下的部分只有这个文件自己可以看见，如果文件被调用了，其他人是无法看见私有化部分的</span><br><span class=\"line\">也就是说你自己运行该模块的时候 这句话是执行的 因为自己运行时__name__就是__main__，而当别人调用你这个模块时，以下代码会被忽略，此时的__name__是模块名</span><br><span class=\"line\">&#39;&#39;&#39;</span><br><span class=\"line\">    print(&#39;Parent process %s.&#39; % os.getpid())</span><br><span class=\"line\">    p &#x3D; Process(target&#x3D;run_proc, args&#x3D;(&#39;test1&#39;,))</span><br><span class=\"line\">    d &#x3D; Process(target&#x3D;run_proc, args&#x3D;(&#39;test2&#39;,))</span><br><span class=\"line\">    print(&#39;Child process will start.&#39;)</span><br><span class=\"line\">    p.start()#调用进程</span><br><span class=\"line\">    d.start()#调用进程</span><br><span class=\"line\">    p.join()#join()方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步</span><br><span class=\"line\">    d.join()</span><br><span class=\"line\">    print(&#39;Child process end.&#39;)</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Pool multprocessing包中的一个类，如果要启动大量的子进程，可以用进程池的方式批量创建子进程：</span><br><span class=\"line\"></span><br><span class=\"line\">from multiprocessing import Pool</span><br><span class=\"line\">import os, time, random</span><br><span class=\"line\"># 子进程要执行的代码</span><br><span class=\"line\">def long_time_task(name):</span><br><span class=\"line\">    # for i in tqdm(range(10000000)):</span><br><span class=\"line\">    #     pass</span><br><span class=\"line\">    print(&#39;Run task %s (%s)...&#39; % (name, os.getpid()))</span><br><span class=\"line\">    start &#x3D; time.time()</span><br><span class=\"line\">    time.sleep(random.random() * 3)</span><br><span class=\"line\">    end &#x3D; time.time()</span><br><span class=\"line\">    print(&#39;Task %s runs %0.2f seconds.&#39; % (name, (end - start)))</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__&#x3D;&#x3D;&#39;__main__&#39;:</span><br><span class=\"line\">    print(&#39;Parent process %s.&#39; % os.getpid())</span><br><span class=\"line\">    p &#x3D; Pool(4)</span><br><span class=\"line\">    #创建子进程池</span><br><span class=\"line\">    #参数数决定同时运行多少进程 如果是4 task4会等待 0 1 2 3 运行完在运行，如果是5 就0 1 2 3 4 一起运行</span><br><span class=\"line\">    #如果你的参数大于你的CPU线程数还是要等待</span><br><span class=\"line\">    #把参数去掉，就是按照操作系统的核数来</span><br><span class=\"line\">    </span><br><span class=\"line\">    for i in range(13):</span><br><span class=\"line\">        p.apply_async(long_time_task, args&#x3D;(i,)) #注意这里，因为是类所有调用函数是 P.</span><br><span class=\"line\">    print(&#39;Waiting for all subprocesses done...&#39;)</span><br><span class=\"line\">    p.close()</span><br><span class=\"line\">    p.join()</span><br><span class=\"line\">    print(&#39;All subprocesses done.&#39;)</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#这种方法可以实现任意进程间的通信，这里写的是主、子进程间的通信</span><br><span class=\"line\">import multiprocessing</span><br><span class=\"line\"></span><br><span class=\"line\">def foo(aa):#必须要接收一个元祖</span><br><span class=\"line\">    message &#x3D; aa.get()  # 管子的另一端放在子进程这里，子进程接收到了数据</span><br><span class=\"line\">    print(&#39;子进程已收到数据...&#39;)</span><br><span class=\"line\">    print(message)  # 子进程打印出了数据内容...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;: </span><br><span class=\"line\"></span><br><span class=\"line\">    xt &#x3D; multiprocessing.Queue()  # 创建进程通信的Queue，你可以理解为我拿了个管子来...</span><br><span class=\"line\">    jc &#x3D; multiprocessing.Process(target&#x3D;foo, args&#x3D;(xt,))  # multiprocessing.Process创建子进程</span><br><span class=\"line\">    jc.start()  # 启动子进程</span><br><span class=\"line\">    print(&#39;主进程准备发送数据...&#39;)</span><br><span class=\"line\">    xt.put(&#39;有内鬼，终止交易！&#39;)  # 将管子的一端放在主进程这里，主进程往管子里丢入数据</span><br><span class=\"line\">    jc.join()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h3 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动一个线程就是把一个函数传入并创建Thread实例，然后调用start()开始执行：</span><br><span class=\"line\">import time, threading</span><br><span class=\"line\"># 新线程执行的代码:</span><br><span class=\"line\">def loop():</span><br><span class=\"line\">    print(&#39;thread %s is running...&#39; % threading.current_thread().name)</span><br><span class=\"line\">    n &#x3D; 0</span><br><span class=\"line\">    while n &lt; 5:</span><br><span class=\"line\">        n &#x3D; n + 1</span><br><span class=\"line\">        print(&#39;thread %s &gt;&gt;&gt; %s&#39; % (threading.current_thread().name, n))</span><br><span class=\"line\">        time.sleep(1)</span><br><span class=\"line\">    print(&#39;thread %s ended.&#39; % threading.current_thread().name)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&#39;thread %s is running...&#39; % threading.current_thread().name)</span><br><span class=\"line\">t &#x3D; threading.Thread(target&#x3D;loop, name&#x3D;&#39;LoopThread&#39;)</span><br><span class=\"line\">t.start()</span><br><span class=\"line\">t.join()</span><br><span class=\"line\">print(&#39;thread %s ended.&#39; % threading.current_thread().name)</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#2d6b96","paginator":"#6AA7D2","button_hover":"#3B8BC4","text_selection":"#6AA7D2","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#6AA7D2","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"文章":"/","归档":"/archives"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":true,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":null,"top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2013,"footer_custom_text":"Hi, welcome to my <a href=\"https://sunyuxianggit.github.io/\">blog</a>!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":true,"url":"https://github.com/sunyuxianggit","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"SunYuxiangのBlog","subtitle":"好记性,不如烂笔头.今天你要写点什么？","description":"","author":"Sun Yuxiang","language":"zh-Hans","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/sunyuxianggit/sunyuxianggit.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false}}}}},"excerpt":"<ul>\n<li><h3 id=\"进程和线程概述\"><a href=\"#进程和线程概述\" class=\"headerlink\" title=\"进程和线程概述\"></a>进程和线程概述</h3><p>进程：对于操作系统来说，一个任务就是一个进程（Process）</p>\n<p>线程：在一个进程内部，要同时干多件事，就需要同时运行多个“子任务”，我们把进程内的这些“子任务”称为线程（Thread）。</p>\n</li>\n<li><h3 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">multprocessing # Python 中的 multiprocess 包提供了多进程支持</span><br></pre></td></tr></table></figure></li></ul>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#process multprocessing包中的一个类表示进程对象</span><br><span class=\"line\"></span><br><span class=\"line\">from multiprocessing import Process</span><br><span class=\"line\">from tqdm import tqdm</span><br><span class=\"line\">import os</span><br><span class=\"line\"></span><br><span class=\"line\"># 子进程要执行的代码</span><br><span class=\"line\">def run_proc(name):</span><br><span class=\"line\">    print(&#39;Run child process %s (%s)...&#39; % (name, os.getpid())) #getpid()可以拿到进程的ID。</span><br><span class=\"line\">    for i in tqdm(range(10000000)):</span><br><span class=\"line\">        pass</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__&#x3D;&#x3D;&#39;__main__&#39;: </span><br><span class=\"line\"></span><br><span class=\"line\">&#39;&#39;&#39;</span><br><span class=\"line\">有化部分 ，这句代码以上的部分，可以被其它的调用，以下的部分只有这个文件自己可以看见，如果文件被调用了，其他人是无法看见私有化部分的</span><br><span class=\"line\">也就是说你自己运行该模块的时候 这句话是执行的 因为自己运行时__name__就是__main__，而当别人调用你这个模块时，以下代码会被忽略，此时的__name__是模块名</span><br><span class=\"line\">&#39;&#39;&#39;</span><br><span class=\"line\">    print(&#39;Parent process %s.&#39; % os.getpid())</span><br><span class=\"line\">    p &#x3D; Process(target&#x3D;run_proc, args&#x3D;(&#39;test1&#39;,))</span><br><span class=\"line\">    d &#x3D; Process(target&#x3D;run_proc, args&#x3D;(&#39;test2&#39;,))</span><br><span class=\"line\">    print(&#39;Child process will start.&#39;)</span><br><span class=\"line\">    p.start()#调用进程</span><br><span class=\"line\">    d.start()#调用进程</span><br><span class=\"line\">    p.join()#join()方法可以等待子进程结束后再继续往下运行，通常用于进程间的同步</span><br><span class=\"line\">    d.join()</span><br><span class=\"line\">    print(&#39;Child process end.&#39;)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Pool multprocessing包中的一个类，如果要启动大量的子进程，可以用进程池的方式批量创建子进程：</span><br><span class=\"line\"></span><br><span class=\"line\">from multiprocessing import Pool</span><br><span class=\"line\">import os, time, random</span><br><span class=\"line\"># 子进程要执行的代码</span><br><span class=\"line\">def long_time_task(name):</span><br><span class=\"line\">    # for i in tqdm(range(10000000)):</span><br><span class=\"line\">    #     pass</span><br><span class=\"line\">    print(&#39;Run task %s (%s)...&#39; % (name, os.getpid()))</span><br><span class=\"line\">    start &#x3D; time.time()</span><br><span class=\"line\">    time.sleep(random.random() * 3)</span><br><span class=\"line\">    end &#x3D; time.time()</span><br><span class=\"line\">    print(&#39;Task %s runs %0.2f seconds.&#39; % (name, (end - start)))</span><br><span class=\"line\"></span><br><span class=\"line\">if __name__&#x3D;&#x3D;&#39;__main__&#39;:</span><br><span class=\"line\">    print(&#39;Parent process %s.&#39; % os.getpid())</span><br><span class=\"line\">    p &#x3D; Pool(4)</span><br><span class=\"line\">    #创建子进程池</span><br><span class=\"line\">    #参数数决定同时运行多少进程 如果是4 task4会等待 0 1 2 3 运行完在运行，如果是5 就0 1 2 3 4 一起运行</span><br><span class=\"line\">    #如果你的参数大于你的CPU线程数还是要等待</span><br><span class=\"line\">    #把参数去掉，就是按照操作系统的核数来</span><br><span class=\"line\">    </span><br><span class=\"line\">    for i in range(13):</span><br><span class=\"line\">        p.apply_async(long_time_task, args&#x3D;(i,)) #注意这里，因为是类所有调用函数是 P.</span><br><span class=\"line\">    print(&#39;Waiting for all subprocesses done...&#39;)</span><br><span class=\"line\">    p.close()</span><br><span class=\"line\">    p.join()</span><br><span class=\"line\">    print(&#39;All subprocesses done.&#39;)</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#这种方法可以实现任意进程间的通信，这里写的是主、子进程间的通信</span><br><span class=\"line\">import multiprocessing</span><br><span class=\"line\"></span><br><span class=\"line\">def foo(aa):#必须要接收一个元祖</span><br><span class=\"line\">    message &#x3D; aa.get()  # 管子的另一端放在子进程这里，子进程接收到了数据</span><br><span class=\"line\">    print(&#39;子进程已收到数据...&#39;)</span><br><span class=\"line\">    print(message)  # 子进程打印出了数据内容...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;: </span><br><span class=\"line\"></span><br><span class=\"line\">    xt &#x3D; multiprocessing.Queue()  # 创建进程通信的Queue，你可以理解为我拿了个管子来...</span><br><span class=\"line\">    jc &#x3D; multiprocessing.Process(target&#x3D;foo, args&#x3D;(xt,))  # multiprocessing.Process创建子进程</span><br><span class=\"line\">    jc.start()  # 启动子进程</span><br><span class=\"line\">    print(&#39;主进程准备发送数据...&#39;)</span><br><span class=\"line\">    xt.put(&#39;有内鬼，终止交易！&#39;)  # 将管子的一端放在主进程这里，主进程往管子里丢入数据</span><br><span class=\"line\">    jc.join()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><h3 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动一个线程就是把一个函数传入并创建Thread实例，然后调用start()开始执行：</span><br><span class=\"line\">import time, threading</span><br><span class=\"line\"># 新线程执行的代码:</span><br><span class=\"line\">def loop():</span><br><span class=\"line\">    print(&#39;thread %s is running...&#39; % threading.current_thread().name)</span><br><span class=\"line\">    n &#x3D; 0</span><br><span class=\"line\">    while n &lt; 5:</span><br><span class=\"line\">        n &#x3D; n + 1</span><br><span class=\"line\">        print(&#39;thread %s &gt;&gt;&gt; %s&#39; % (threading.current_thread().name, n))</span><br><span class=\"line\">        time.sleep(1)</span><br><span class=\"line\">    print(&#39;thread %s ended.&#39; % threading.current_thread().name)</span><br><span class=\"line\"></span><br><span class=\"line\">print(&#39;thread %s is running...&#39; % threading.current_thread().name)</span><br><span class=\"line\">t &#x3D; threading.Thread(target&#x3D;loop, name&#x3D;&#39;LoopThread&#39;)</span><br><span class=\"line\">t.start()</span><br><span class=\"line\">t.join()</span><br><span class=\"line\">print(&#39;thread %s ended.&#39; % threading.current_thread().name)</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>"},{"title":"Maya卡顿优化","date":"2020-03-09T15:50:34.000Z","_content":"\n\n针对美术制作的 Maya 卡顿优化\n\n## CPU\n\n### 信息获取\n\n- 解释分析器\n- 求值工具包\n\n## GPU\n\n### \t信息获取\n\n- Viewport 2.0,必须拥有正确的图形配置和图形驱动程序版本。有关 Maya 认证显卡和最新驱动程序版本的信息：\n\n  https://knowledge.autodesk.com/certified-graphics-hardware\n\n  \n\n- GPU 内存\n\n  对于包含大量纹理、几何体或缓存动画的场景，请务必记下显卡上可用的 GPU RAM 量，如果 GPU RAM 使用量非常接近显卡的 GPU RAM 限制，纹理可能无法加载，并且场景可能显示为着色模式。此时将显示一条错误信息，指明已超出纹理 RAM 限制并建议您减小“最大纹理分辨率”(Max Texture Resolution)钳制。\n\n  查看 GPU 内存使用情况（以 MB 为单位），请使用Mel命令 \n\n  <!-- more -->\n\n  ```\n  ogs -gpu\n  ```\n\n  如图：\n\n  ![1558686550786](Maya卡顿优化/1558686550786.png)\n\n- 查看卡的 GPU RAM 限制，请参见“Maya 的输出窗口”(Output Window of Maya)。\n\n  ![图片1](Maya卡顿优化/1558686723618.png)\n\n### \t如何优化\n\n- 尽量关闭屏幕空间环境光遮挡、多重采样抗锯齿、运动模糊。\n\n- 不使用复杂的Shader（例如复杂的 ShaderFX 网络）或大量使用 DirectX 11 ubershader 的场景。\n\n- 禁用灯光和灯光阴影。\n\n- GPU 实例化可减少 GPU 内存使用量。\n\n  ![图片2](Maya卡顿优化/1558687101606.png)\n\n- 减小摄影机的远剪裁距离，以便在视口中显示较少的几何体\n\n- 隐藏无需显示的对象\n\n- 卸载引用文件\n\n- 将对象更改为Bounding Box模式\n\n- 关闭多个Maya，同时运行 Maya 和其他 3D 程序，需要额外的 GPU 内存。\n\n- 可以考虑使用GPU缓存工作流程\n\n  ![图片3](Maya卡顿优化/1558688555512.png)\n\n  关于GPU缓存工作流程的更多内容：\n\n  https://knowledge.autodesk.com/zh-hans/support/maya/learn-explore/caas/CloudHelp/cloudhelp/2018/CHS/Maya-ManagingScenes/files/GUID-C893BE60-6E65-4F36-8005-FD4D1A0E9822-htm.html\n\n","source":"_posts/Maya卡顿优化.md","raw":"---\ntitle: Maya卡顿优化\ndate: 2020-03-09 23:50:34\ntags: Maya\n---\n\n\n针对美术制作的 Maya 卡顿优化\n\n## CPU\n\n### 信息获取\n\n- 解释分析器\n- 求值工具包\n\n## GPU\n\n### \t信息获取\n\n- Viewport 2.0,必须拥有正确的图形配置和图形驱动程序版本。有关 Maya 认证显卡和最新驱动程序版本的信息：\n\n  https://knowledge.autodesk.com/certified-graphics-hardware\n\n  \n\n- GPU 内存\n\n  对于包含大量纹理、几何体或缓存动画的场景，请务必记下显卡上可用的 GPU RAM 量，如果 GPU RAM 使用量非常接近显卡的 GPU RAM 限制，纹理可能无法加载，并且场景可能显示为着色模式。此时将显示一条错误信息，指明已超出纹理 RAM 限制并建议您减小“最大纹理分辨率”(Max Texture Resolution)钳制。\n\n  查看 GPU 内存使用情况（以 MB 为单位），请使用Mel命令 \n\n  <!-- more -->\n\n  ```\n  ogs -gpu\n  ```\n\n  如图：\n\n  ![1558686550786](Maya卡顿优化/1558686550786.png)\n\n- 查看卡的 GPU RAM 限制，请参见“Maya 的输出窗口”(Output Window of Maya)。\n\n  ![图片1](Maya卡顿优化/1558686723618.png)\n\n### \t如何优化\n\n- 尽量关闭屏幕空间环境光遮挡、多重采样抗锯齿、运动模糊。\n\n- 不使用复杂的Shader（例如复杂的 ShaderFX 网络）或大量使用 DirectX 11 ubershader 的场景。\n\n- 禁用灯光和灯光阴影。\n\n- GPU 实例化可减少 GPU 内存使用量。\n\n  ![图片2](Maya卡顿优化/1558687101606.png)\n\n- 减小摄影机的远剪裁距离，以便在视口中显示较少的几何体\n\n- 隐藏无需显示的对象\n\n- 卸载引用文件\n\n- 将对象更改为Bounding Box模式\n\n- 关闭多个Maya，同时运行 Maya 和其他 3D 程序，需要额外的 GPU 内存。\n\n- 可以考虑使用GPU缓存工作流程\n\n  ![图片3](Maya卡顿优化/1558688555512.png)\n\n  关于GPU缓存工作流程的更多内容：\n\n  https://knowledge.autodesk.com/zh-hans/support/maya/learn-explore/caas/CloudHelp/cloudhelp/2018/CHS/Maya-ManagingScenes/files/GUID-C893BE60-6E65-4F36-8005-FD4D1A0E9822-htm.html\n\n","slug":"Maya卡顿优化","published":1,"updated":"2020-03-11T02:24:46.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7rbphzg000ew8p466ad5heb","content":"<p>针对美术制作的 Maya 卡顿优化</p>\n<h2 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h2><h3 id=\"信息获取\"><a href=\"#信息获取\" class=\"headerlink\" title=\"信息获取\"></a>信息获取</h3><ul>\n<li>解释分析器</li>\n<li>求值工具包</li>\n</ul>\n<h2 id=\"GPU\"><a href=\"#GPU\" class=\"headerlink\" title=\"GPU\"></a>GPU</h2><h3 id=\"信息获取-1\"><a href=\"#信息获取-1\" class=\"headerlink\" title=\"信息获取\"></a>信息获取</h3><ul>\n<li><p>Viewport 2.0,必须拥有正确的图形配置和图形驱动程序版本。有关 Maya 认证显卡和最新驱动程序版本的信息：</p>\n<p><a href=\"https://knowledge.autodesk.com/certified-graphics-hardware\" target=\"_blank\" rel=\"noopener\">https://knowledge.autodesk.com/certified-graphics-hardware</a></p>\n</li>\n</ul>\n<ul>\n<li><p>GPU 内存</p>\n<p>对于包含大量纹理、几何体或缓存动画的场景，请务必记下显卡上可用的 GPU RAM 量，如果 GPU RAM 使用量非常接近显卡的 GPU RAM 限制，纹理可能无法加载，并且场景可能显示为着色模式。此时将显示一条错误信息，指明已超出纹理 RAM 限制并建议您减小“最大纹理分辨率”(Max Texture Resolution)钳制。</p>\n<p>查看 GPU 内存使用情况（以 MB 为单位），请使用Mel命令 </p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ogs -gpu</span><br></pre></td></tr></table></figure>\n\n<p>如图：</p>\n<p><img src=\"/2020/03/09/Maya%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/1558686550786.png\" alt=\"1558686550786\"></p>\n</li>\n<li><p>查看卡的 GPU RAM 限制，请参见“Maya 的输出窗口”(Output Window of Maya)。</p>\n<p><img src=\"/2020/03/09/Maya%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/1558686723618.png\" alt=\"图片1\"></p>\n</li>\n</ul>\n<h3 id=\"如何优化\"><a href=\"#如何优化\" class=\"headerlink\" title=\"如何优化\"></a>如何优化</h3><ul>\n<li><p>尽量关闭屏幕空间环境光遮挡、多重采样抗锯齿、运动模糊。</p>\n</li>\n<li><p>不使用复杂的Shader（例如复杂的 ShaderFX 网络）或大量使用 DirectX 11 ubershader 的场景。</p>\n</li>\n<li><p>禁用灯光和灯光阴影。</p>\n</li>\n<li><p>GPU 实例化可减少 GPU 内存使用量。</p>\n<p><img src=\"/2020/03/09/Maya%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/1558687101606.png\" alt=\"图片2\"></p>\n</li>\n<li><p>减小摄影机的远剪裁距离，以便在视口中显示较少的几何体</p>\n</li>\n<li><p>隐藏无需显示的对象</p>\n</li>\n<li><p>卸载引用文件</p>\n</li>\n<li><p>将对象更改为Bounding Box模式</p>\n</li>\n<li><p>关闭多个Maya，同时运行 Maya 和其他 3D 程序，需要额外的 GPU 内存。</p>\n</li>\n<li><p>可以考虑使用GPU缓存工作流程</p>\n<p><img src=\"/2020/03/09/Maya%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/1558688555512.png\" alt=\"图片3\"></p>\n<p>关于GPU缓存工作流程的更多内容：</p>\n<p><a href=\"https://knowledge.autodesk.com/zh-hans/support/maya/learn-explore/caas/CloudHelp/cloudhelp/2018/CHS/Maya-ManagingScenes/files/GUID-C893BE60-6E65-4F36-8005-FD4D1A0E9822-htm.html\" target=\"_blank\" rel=\"noopener\">https://knowledge.autodesk.com/zh-hans/support/maya/learn-explore/caas/CloudHelp/cloudhelp/2018/CHS/Maya-ManagingScenes/files/GUID-C893BE60-6E65-4F36-8005-FD4D1A0E9822-htm.html</a></p>\n</li>\n</ul>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#2d6b96","paginator":"#6AA7D2","button_hover":"#3B8BC4","text_selection":"#6AA7D2","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#6AA7D2","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"文章":"/","归档":"/archives"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":true,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":null,"top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2013,"footer_custom_text":"Hi, welcome to my <a href=\"https://sunyuxianggit.github.io/\">blog</a>!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":true,"url":"https://github.com/sunyuxianggit","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"SunYuxiangのBlog","subtitle":"好记性,不如烂笔头.今天你要写点什么？","description":"","author":"Sun Yuxiang","language":"zh-Hans","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/sunyuxianggit/sunyuxianggit.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false}}}}},"excerpt":"<p>针对美术制作的 Maya 卡顿优化</p>\n<h2 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h2><h3 id=\"信息获取\"><a href=\"#信息获取\" class=\"headerlink\" title=\"信息获取\"></a>信息获取</h3><ul>\n<li>解释分析器</li>\n<li>求值工具包</li>\n</ul>\n<h2 id=\"GPU\"><a href=\"#GPU\" class=\"headerlink\" title=\"GPU\"></a>GPU</h2><h3 id=\"信息获取-1\"><a href=\"#信息获取-1\" class=\"headerlink\" title=\"信息获取\"></a>信息获取</h3><ul>\n<li><p>Viewport 2.0,必须拥有正确的图形配置和图形驱动程序版本。有关 Maya 认证显卡和最新驱动程序版本的信息：</p>\n<p><a href=\"https://knowledge.autodesk.com/certified-graphics-hardware\" target=\"_blank\" rel=\"noopener\">https://knowledge.autodesk.com/certified-graphics-hardware</a></p>\n</li>\n</ul>\n<ul>\n<li><p>GPU 内存</p>\n<p>对于包含大量纹理、几何体或缓存动画的场景，请务必记下显卡上可用的 GPU RAM 量，如果 GPU RAM 使用量非常接近显卡的 GPU RAM 限制，纹理可能无法加载，并且场景可能显示为着色模式。此时将显示一条错误信息，指明已超出纹理 RAM 限制并建议您减小“最大纹理分辨率”(Max Texture Resolution)钳制。</p>\n<p>查看 GPU 内存使用情况（以 MB 为单位），请使用Mel命令 </p></li></ul>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ogs -gpu</span><br></pre></td></tr></table></figure>\n\n<p>如图：</p>\n<p><img src=\"/2020/03/09/Maya%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/1558686550786.png\" alt=\"1558686550786\"></p>\n\n<li><p>查看卡的 GPU RAM 限制，请参见“Maya 的输出窗口”(Output Window of Maya)。</p>\n<p><img src=\"/2020/03/09/Maya%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/1558686723618.png\" alt=\"图片1\"></p>\n</li>\n\n<h3 id=\"如何优化\"><a href=\"#如何优化\" class=\"headerlink\" title=\"如何优化\"></a>如何优化</h3><ul>\n<li><p>尽量关闭屏幕空间环境光遮挡、多重采样抗锯齿、运动模糊。</p>\n</li>\n<li><p>不使用复杂的Shader（例如复杂的 ShaderFX 网络）或大量使用 DirectX 11 ubershader 的场景。</p>\n</li>\n<li><p>禁用灯光和灯光阴影。</p>\n</li>\n<li><p>GPU 实例化可减少 GPU 内存使用量。</p>\n<p><img src=\"/2020/03/09/Maya%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/1558687101606.png\" alt=\"图片2\"></p>\n</li>\n<li><p>减小摄影机的远剪裁距离，以便在视口中显示较少的几何体</p>\n</li>\n<li><p>隐藏无需显示的对象</p>\n</li>\n<li><p>卸载引用文件</p>\n</li>\n<li><p>将对象更改为Bounding Box模式</p>\n</li>\n<li><p>关闭多个Maya，同时运行 Maya 和其他 3D 程序，需要额外的 GPU 内存。</p>\n</li>\n<li><p>可以考虑使用GPU缓存工作流程</p>\n<p><img src=\"/2020/03/09/Maya%E5%8D%A1%E9%A1%BF%E4%BC%98%E5%8C%96/1558688555512.png\" alt=\"图片3\"></p>\n<p>关于GPU缓存工作流程的更多内容：</p>\n<p><a href=\"https://knowledge.autodesk.com/zh-hans/support/maya/learn-explore/caas/CloudHelp/cloudhelp/2018/CHS/Maya-ManagingScenes/files/GUID-C893BE60-6E65-4F36-8005-FD4D1A0E9822-htm.html\" target=\"_blank\" rel=\"noopener\">https://knowledge.autodesk.com/zh-hans/support/maya/learn-explore/caas/CloudHelp/cloudhelp/2018/CHS/Maya-ManagingScenes/files/GUID-C893BE60-6E65-4F36-8005-FD4D1A0E9822-htm.html</a></p>\n</li>\n</ul>"},{"title":"Top 10 ways to make Maya go FASTER","date":"2019-12-01T14:53:13.000Z","_content":"\n\n## 1关闭一些显示设置：\n\n首先是阴影，然后OCC，然后运动模糊然后抗锯齿\n\n## 2关闭材质球实时预览\n\n可以改用右键单个refresh swatch\n\n## 3选择暂停viewport\n<!-- more -->\n## 4确保不实用的插件不加载\n\n还可以导入的时候不自动载入ref，选择手动载入\n\n## 5关闭模型的Adaptive open Subdiv\n\n## 6设置Viewport2.0\n\n1浮点渲染目标，此设置与色彩管理有关系，代价是CPU的RAM\n\n推荐，R32G32B32A32_Float > R16G16B16A16_Float\n\n也可以完全禁用\n\n2性能下把透明贴图算法改成 Alpha Cut\n\n代价是牺牲了半透明的效果，但是提高了速度\n\n## 7使用贴图时，最轻量的贴图是JPEG","source":"_posts/Top 10 ways to make Maya go FASTER.md","raw":"---\ntitle: Top 10 ways to make Maya go FASTER\ndate: 2019-12-01 22:53:13\ntags: maya\n---\n\n\n## 1关闭一些显示设置：\n\n首先是阴影，然后OCC，然后运动模糊然后抗锯齿\n\n## 2关闭材质球实时预览\n\n可以改用右键单个refresh swatch\n\n## 3选择暂停viewport\n<!-- more -->\n## 4确保不实用的插件不加载\n\n还可以导入的时候不自动载入ref，选择手动载入\n\n## 5关闭模型的Adaptive open Subdiv\n\n## 6设置Viewport2.0\n\n1浮点渲染目标，此设置与色彩管理有关系，代价是CPU的RAM\n\n推荐，R32G32B32A32_Float > R16G16B16A16_Float\n\n也可以完全禁用\n\n2性能下把透明贴图算法改成 Alpha Cut\n\n代价是牺牲了半透明的效果，但是提高了速度\n\n## 7使用贴图时，最轻量的贴图是JPEG","slug":"Top 10 ways to make Maya go FASTER","published":1,"updated":"2020-03-14T08:15:18.770Z","_id":"ck7rbphzh000gw8p43zxrenen","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1关闭一些显示设置：\"><a href=\"#1关闭一些显示设置：\" class=\"headerlink\" title=\"1关闭一些显示设置：\"></a>1关闭一些显示设置：</h2><p>首先是阴影，然后OCC，然后运动模糊然后抗锯齿</p>\n<h2 id=\"2关闭材质球实时预览\"><a href=\"#2关闭材质球实时预览\" class=\"headerlink\" title=\"2关闭材质球实时预览\"></a>2关闭材质球实时预览</h2><p>可以改用右键单个refresh swatch</p>\n<h2 id=\"3选择暂停viewport\"><a href=\"#3选择暂停viewport\" class=\"headerlink\" title=\"3选择暂停viewport\"></a>3选择暂停viewport</h2><a id=\"more\"></a>\n<h2 id=\"4确保不实用的插件不加载\"><a href=\"#4确保不实用的插件不加载\" class=\"headerlink\" title=\"4确保不实用的插件不加载\"></a>4确保不实用的插件不加载</h2><p>还可以导入的时候不自动载入ref，选择手动载入</p>\n<h2 id=\"5关闭模型的Adaptive-open-Subdiv\"><a href=\"#5关闭模型的Adaptive-open-Subdiv\" class=\"headerlink\" title=\"5关闭模型的Adaptive open Subdiv\"></a>5关闭模型的Adaptive open Subdiv</h2><h2 id=\"6设置Viewport2-0\"><a href=\"#6设置Viewport2-0\" class=\"headerlink\" title=\"6设置Viewport2.0\"></a>6设置Viewport2.0</h2><p>1浮点渲染目标，此设置与色彩管理有关系，代价是CPU的RAM</p>\n<p>推荐，R32G32B32A32_Float &gt; R16G16B16A16_Float</p>\n<p>也可以完全禁用</p>\n<p>2性能下把透明贴图算法改成 Alpha Cut</p>\n<p>代价是牺牲了半透明的效果，但是提高了速度</p>\n<h2 id=\"7使用贴图时，最轻量的贴图是JPEG\"><a href=\"#7使用贴图时，最轻量的贴图是JPEG\" class=\"headerlink\" title=\"7使用贴图时，最轻量的贴图是JPEG\"></a>7使用贴图时，最轻量的贴图是JPEG</h2>","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#2d6b96","paginator":"#6AA7D2","button_hover":"#3B8BC4","text_selection":"#6AA7D2","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#6AA7D2","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"文章":"/","归档":"/archives"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":true,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":null,"top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2013,"footer_custom_text":"Hi, welcome to my <a href=\"https://sunyuxianggit.github.io/\">blog</a>!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":true,"url":"https://github.com/sunyuxianggit","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"SunYuxiangのBlog","subtitle":"好记性,不如烂笔头.今天你要写点什么？","description":"","author":"Sun Yuxiang","language":"zh-Hans","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/sunyuxianggit/sunyuxianggit.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"sitemap":{"path":"sitemap.xml","rel":false},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"<h2 id=\"1关闭一些显示设置：\"><a href=\"#1关闭一些显示设置：\" class=\"headerlink\" title=\"1关闭一些显示设置：\"></a>1关闭一些显示设置：</h2><p>首先是阴影，然后OCC，然后运动模糊然后抗锯齿</p>\n<h2 id=\"2关闭材质球实时预览\"><a href=\"#2关闭材质球实时预览\" class=\"headerlink\" title=\"2关闭材质球实时预览\"></a>2关闭材质球实时预览</h2><p>可以改用右键单个refresh swatch</p>\n<h2 id=\"3选择暂停viewport\"><a href=\"#3选择暂停viewport\" class=\"headerlink\" title=\"3选择暂停viewport\"></a>3选择暂停viewport</h2>","more":"<h2 id=\"4确保不实用的插件不加载\"><a href=\"#4确保不实用的插件不加载\" class=\"headerlink\" title=\"4确保不实用的插件不加载\"></a>4确保不实用的插件不加载</h2><p>还可以导入的时候不自动载入ref，选择手动载入</p>\n<h2 id=\"5关闭模型的Adaptive-open-Subdiv\"><a href=\"#5关闭模型的Adaptive-open-Subdiv\" class=\"headerlink\" title=\"5关闭模型的Adaptive open Subdiv\"></a>5关闭模型的Adaptive open Subdiv</h2><h2 id=\"6设置Viewport2-0\"><a href=\"#6设置Viewport2-0\" class=\"headerlink\" title=\"6设置Viewport2.0\"></a>6设置Viewport2.0</h2><p>1浮点渲染目标，此设置与色彩管理有关系，代价是CPU的RAM</p>\n<p>推荐，R32G32B32A32_Float &gt; R16G16B16A16_Float</p>\n<p>也可以完全禁用</p>\n<p>2性能下把透明贴图算法改成 Alpha Cut</p>\n<p>代价是牺牲了半透明的效果，但是提高了速度</p>\n<h2 id=\"7使用贴图时，最轻量的贴图是JPEG\"><a href=\"#7使用贴图时，最轻量的贴图是JPEG\" class=\"headerlink\" title=\"7使用贴图时，最轻量的贴图是JPEG\"></a>7使用贴图时，最轻量的贴图是JPEG</h2>"},{"title":"使用hexo创建个人blog网页的笔记","date":"2019-12-01T14:53:13.000Z","_content":"\n## 安装支持软件\n\n1. 下载并安装node.js.https://nodejs.org/en/\n\n2. 下载好可以在cmd里面通过查看版本号来确认安装成功。\n\n   ```\n   $ node -v #参看node版本号\n   $ npm -v # 查看npm包管理器版本号\n   ```\n<!--more-->\n3. 由于npm国内下载包速度太慢，所以可以里面npm安装一个cnpm（使用淘宝源）加快速度，不需要可以跳过，同理可以通过查看版本号确认安装成功。\n\n   ```\n   $ npm install -g cnpm --registry=\"https://registry.npm.taobao.org\" #-g表示全局安装\n   $ cnpm -v#参看cnpm 版本号\n   ```\n\n4. 使用cnpm 安装hexo，同理可以通过查看版本号确认安装成功。\n\n   ```\n   $ cnpm install -g hexo-cli #全局安装hexo\n   $ hexo -v #参看hexo版本号\n   ```\n\n\n\n## 使用hexo搭建博客\n\n1. 首先建立一个空的文件夹blog\n\n2. 命令行进入blog文件夹\n\n3. 使用hexo生成博客\n\n   ```\n   $ hexo init #生成博客\n   ```\n\n4. 使用hexo server进行本地预览博客，预览完成后Ctrl+C退出预览\n\n   ```\n   $ hexo s#本地预览博客\n   ```\n\n5. 使用hexo new 新建文章\n\n   ```\n   $ hexo n \"文章名\"\n   ```\n\n6. 先使用hexo clean 清除已经创建的页面，在使用hexo generated生成页面，建议生成先进行本地预览。\n\n   ```\n   $ hexo clean #清除\n   $ hexo g #生成\n   ```\n\n## 如何把博客布置到github上\n\n1. 首先在github自己的账号内新建仓库，注意仓库名就是你的域名。仓库名必须是 [账户名.github.io]\n\n2. 安装git并在git下设置用户名和邮箱\n\n   ```\n   git config --global user.name [username]\n   git config --global user.email [email]\n   ```\n\n3. 在bolg文件夹下安装git部署插件\n\n   ```\n   $ cnpm install --save hexo-deployer-git\n   ```\n\n4. 设置一下bolg文件夹的_config.yml，注意每个冒号后面有空格\n\n   ```\n   # Deployment\n   ## Docs: https://hexo.io/docs/deployment.html\n   deploy:\n     type: git \n     repo: https://github.com/sunyuxianggit/sunyuxianggit.github.io.git\n     branch: master\n   ```\n\n5. 部署到github，中间需要输入github的账号密码。\n\n   ```\n   $ hexo doploy#部署到GitHub\n   ```\n   \n6. 常见错误：\n\n   fatal: in unpopulated submodule '.deploy_git'\n\n   这种情况可以先安装下相关的依赖：\n\n   ```\n   $ npm install hexo-deployer-git –save\n   $ rm -rf .deploy_git#删掉\n   $ hexo g\n   $ hexo d#重新生成和部署\n   ```\n\n   \n\n## 日常更新文章\n\n1. 命令行进入blog文件夹使用```$ hexo new``` 新建文章\n2. 使用```$ hexo clean```清除老页面，然后在使用```$ hexo generated```生成页面\n3. 使用```$ hexo server```本地预览没有问题后，使用 ```$ hexo deploy```部署到Github\n\n## 如何更换主题\n\n1. 命令行进入blog\n\n2. 使用git clone 功能 clone喜欢的主题\n\n   ```\n   $ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n   ```\n\n3. 修改配置文件\n\n   ```\n   # Extensions\n   ## Plugins: https://hexo.io/plugins/\n   ## Themes: https://hexo.io/themes/\n   theme: yilia#这里\n   ```\n\n\n## 多台设备同步管理\n\n1. 原创建博客设备把源文件上传到GitHub，上传时注意检查所有.gitignore文件忽略情况和把node_modules文件夹删掉（因为内部文件名太长，上传的话git报错）.\n2. 另一台电脑上将源代码clone下来之后，直接执行 ```cnpm install```把node_modules安装回来.\n3. 然后```hexo s```正常使用.","source":"_posts/使用hexo创建个人blog网页的笔记.md","raw":"---\ntitle: 使用hexo创建个人blog网页的笔记\ndate: 2019-12-01 22:53:13\ntags: hexo\n---\n\n## 安装支持软件\n\n1. 下载并安装node.js.https://nodejs.org/en/\n\n2. 下载好可以在cmd里面通过查看版本号来确认安装成功。\n\n   ```\n   $ node -v #参看node版本号\n   $ npm -v # 查看npm包管理器版本号\n   ```\n<!--more-->\n3. 由于npm国内下载包速度太慢，所以可以里面npm安装一个cnpm（使用淘宝源）加快速度，不需要可以跳过，同理可以通过查看版本号确认安装成功。\n\n   ```\n   $ npm install -g cnpm --registry=\"https://registry.npm.taobao.org\" #-g表示全局安装\n   $ cnpm -v#参看cnpm 版本号\n   ```\n\n4. 使用cnpm 安装hexo，同理可以通过查看版本号确认安装成功。\n\n   ```\n   $ cnpm install -g hexo-cli #全局安装hexo\n   $ hexo -v #参看hexo版本号\n   ```\n\n\n\n## 使用hexo搭建博客\n\n1. 首先建立一个空的文件夹blog\n\n2. 命令行进入blog文件夹\n\n3. 使用hexo生成博客\n\n   ```\n   $ hexo init #生成博客\n   ```\n\n4. 使用hexo server进行本地预览博客，预览完成后Ctrl+C退出预览\n\n   ```\n   $ hexo s#本地预览博客\n   ```\n\n5. 使用hexo new 新建文章\n\n   ```\n   $ hexo n \"文章名\"\n   ```\n\n6. 先使用hexo clean 清除已经创建的页面，在使用hexo generated生成页面，建议生成先进行本地预览。\n\n   ```\n   $ hexo clean #清除\n   $ hexo g #生成\n   ```\n\n## 如何把博客布置到github上\n\n1. 首先在github自己的账号内新建仓库，注意仓库名就是你的域名。仓库名必须是 [账户名.github.io]\n\n2. 安装git并在git下设置用户名和邮箱\n\n   ```\n   git config --global user.name [username]\n   git config --global user.email [email]\n   ```\n\n3. 在bolg文件夹下安装git部署插件\n\n   ```\n   $ cnpm install --save hexo-deployer-git\n   ```\n\n4. 设置一下bolg文件夹的_config.yml，注意每个冒号后面有空格\n\n   ```\n   # Deployment\n   ## Docs: https://hexo.io/docs/deployment.html\n   deploy:\n     type: git \n     repo: https://github.com/sunyuxianggit/sunyuxianggit.github.io.git\n     branch: master\n   ```\n\n5. 部署到github，中间需要输入github的账号密码。\n\n   ```\n   $ hexo doploy#部署到GitHub\n   ```\n   \n6. 常见错误：\n\n   fatal: in unpopulated submodule '.deploy_git'\n\n   这种情况可以先安装下相关的依赖：\n\n   ```\n   $ npm install hexo-deployer-git –save\n   $ rm -rf .deploy_git#删掉\n   $ hexo g\n   $ hexo d#重新生成和部署\n   ```\n\n   \n\n## 日常更新文章\n\n1. 命令行进入blog文件夹使用```$ hexo new``` 新建文章\n2. 使用```$ hexo clean```清除老页面，然后在使用```$ hexo generated```生成页面\n3. 使用```$ hexo server```本地预览没有问题后，使用 ```$ hexo deploy```部署到Github\n\n## 如何更换主题\n\n1. 命令行进入blog\n\n2. 使用git clone 功能 clone喜欢的主题\n\n   ```\n   $ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia\n   ```\n\n3. 修改配置文件\n\n   ```\n   # Extensions\n   ## Plugins: https://hexo.io/plugins/\n   ## Themes: https://hexo.io/themes/\n   theme: yilia#这里\n   ```\n\n\n## 多台设备同步管理\n\n1. 原创建博客设备把源文件上传到GitHub，上传时注意检查所有.gitignore文件忽略情况和把node_modules文件夹删掉（因为内部文件名太长，上传的话git报错）.\n2. 另一台电脑上将源代码clone下来之后，直接执行 ```cnpm install```把node_modules安装回来.\n3. 然后```hexo s```正常使用.","slug":"使用hexo创建个人blog网页的笔记","published":1,"updated":"2020-03-11T02:26:27.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7rbpij8000pw8p4cd069lax","content":"<h2 id=\"安装支持软件\"><a href=\"#安装支持软件\" class=\"headerlink\" title=\"安装支持软件\"></a>安装支持软件</h2><ol>\n<li><p>下载并安装node.js.<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/</a></p>\n</li>\n<li><p>下载好可以在cmd里面通过查看版本号来确认安装成功。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v #参看node版本号</span><br><span class=\"line\">$ npm -v # 查看npm包管理器版本号</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a></li>\n<li><p>由于npm国内下载包速度太慢，所以可以里面npm安装一个cnpm（使用淘宝源）加快速度，不需要可以跳过，同理可以通过查看版本号确认安装成功。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g cnpm --registry&#x3D;&quot;https:&#x2F;&#x2F;registry.npm.taobao.org&quot; #-g表示全局安装</span><br><span class=\"line\">$ cnpm -v#参看cnpm 版本号</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用cnpm 安装hexo，同理可以通过查看版本号确认安装成功。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm install -g hexo-cli #全局安装hexo</span><br><span class=\"line\">$ hexo -v #参看hexo版本号</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<h2 id=\"使用hexo搭建博客\"><a href=\"#使用hexo搭建博客\" class=\"headerlink\" title=\"使用hexo搭建博客\"></a>使用hexo搭建博客</h2><ol>\n<li><p>首先建立一个空的文件夹blog</p>\n</li>\n<li><p>命令行进入blog文件夹</p>\n</li>\n<li><p>使用hexo生成博客</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init #生成博客</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用hexo server进行本地预览博客，预览完成后Ctrl+C退出预览</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s#本地预览博客</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用hexo new 新建文章</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo n &quot;文章名&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>先使用hexo clean 清除已经创建的页面，在使用hexo generated生成页面，建议生成先进行本地预览。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean #清除</span><br><span class=\"line\">$ hexo g #生成</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"如何把博客布置到github上\"><a href=\"#如何把博客布置到github上\" class=\"headerlink\" title=\"如何把博客布置到github上\"></a>如何把博客布置到github上</h2><ol>\n<li><p>首先在github自己的账号内新建仓库，注意仓库名就是你的域名。仓库名必须是 [账户名.github.io]</p>\n</li>\n<li><p>安装git并在git下设置用户名和邮箱</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name [username]</span><br><span class=\"line\">git config --global user.email [email]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在bolg文件夹下安装git部署插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置一下bolg文件夹的_config.yml，注意每个冒号后面有空格</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git </span><br><span class=\"line\">  repo: https:&#x2F;&#x2F;github.com&#x2F;sunyuxianggit&#x2F;sunyuxianggit.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>部署到github，中间需要输入github的账号密码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo doploy#部署到GitHub</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>常见错误：</p>\n<p>fatal: in unpopulated submodule ‘.deploy_git’</p>\n<p>这种情况可以先安装下相关的依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git –save</span><br><span class=\"line\">$ rm -rf .deploy_git#删掉</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d#重新生成和部署</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<h2 id=\"日常更新文章\"><a href=\"#日常更新文章\" class=\"headerlink\" title=\"日常更新文章\"></a>日常更新文章</h2><ol>\n<li>命令行进入blog文件夹使用<code>$ hexo new</code> 新建文章</li>\n<li>使用<code>$ hexo clean</code>清除老页面，然后在使用<code>$ hexo generated</code>生成页面</li>\n<li>使用<code>$ hexo server</code>本地预览没有问题后，使用 <code>$ hexo deploy</code>部署到Github</li>\n</ol>\n<h2 id=\"如何更换主题\"><a href=\"#如何更换主题\" class=\"headerlink\" title=\"如何更换主题\"></a>如何更换主题</h2><ol>\n<li><p>命令行进入blog</p>\n</li>\n<li><p>使用git clone 功能 clone喜欢的主题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https:&#x2F;&#x2F;github.com&#x2F;litten&#x2F;hexo-theme-yilia.git themes&#x2F;yilia</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class=\"line\">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class=\"line\">theme: yilia#这里</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<h2 id=\"多台设备同步管理\"><a href=\"#多台设备同步管理\" class=\"headerlink\" title=\"多台设备同步管理\"></a>多台设备同步管理</h2><ol>\n<li>原创建博客设备把源文件上传到GitHub，上传时注意检查所有.gitignore文件忽略情况和把node_modules文件夹删掉（因为内部文件名太长，上传的话git报错）.</li>\n<li>另一台电脑上将源代码clone下来之后，直接执行 <code>cnpm install</code>把node_modules安装回来.</li>\n<li>然后<code>hexo s</code>正常使用.</li>\n</ol>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#2d6b96","paginator":"#6AA7D2","button_hover":"#3B8BC4","text_selection":"#6AA7D2","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#6AA7D2","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"文章":"/","归档":"/archives"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":true,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":null,"top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2013,"footer_custom_text":"Hi, welcome to my <a href=\"https://sunyuxianggit.github.io/\">blog</a>!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":true,"url":"https://github.com/sunyuxianggit","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"SunYuxiangのBlog","subtitle":"好记性,不如烂笔头.今天你要写点什么？","description":"","author":"Sun Yuxiang","language":"zh-Hans","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/sunyuxianggit/sunyuxianggit.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false}}}}},"excerpt":"<h2 id=\"安装支持软件\"><a href=\"#安装支持软件\" class=\"headerlink\" title=\"安装支持软件\"></a>安装支持软件</h2><ol>\n<li><p>下载并安装node.js.<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/</a></p>\n</li>\n<li><p>下载好可以在cmd里面通过查看版本号来确认安装成功。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v #参看node版本号</span><br><span class=\"line\">$ npm -v # 查看npm包管理器版本号</span><br></pre></td></tr></table></figure></li></ol>","more":"\n<li><p>由于npm国内下载包速度太慢，所以可以里面npm安装一个cnpm（使用淘宝源）加快速度，不需要可以跳过，同理可以通过查看版本号确认安装成功。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g cnpm --registry&#x3D;&quot;https:&#x2F;&#x2F;registry.npm.taobao.org&quot; #-g表示全局安装</span><br><span class=\"line\">$ cnpm -v#参看cnpm 版本号</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用cnpm 安装hexo，同理可以通过查看版本号确认安装成功。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm install -g hexo-cli #全局安装hexo</span><br><span class=\"line\">$ hexo -v #参看hexo版本号</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n\n<h2 id=\"使用hexo搭建博客\"><a href=\"#使用hexo搭建博客\" class=\"headerlink\" title=\"使用hexo搭建博客\"></a>使用hexo搭建博客</h2><ol>\n<li><p>首先建立一个空的文件夹blog</p>\n</li>\n<li><p>命令行进入blog文件夹</p>\n</li>\n<li><p>使用hexo生成博客</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init #生成博客</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用hexo server进行本地预览博客，预览完成后Ctrl+C退出预览</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s#本地预览博客</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用hexo new 新建文章</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo n &quot;文章名&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>先使用hexo clean 清除已经创建的页面，在使用hexo generated生成页面，建议生成先进行本地预览。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean #清除</span><br><span class=\"line\">$ hexo g #生成</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"如何把博客布置到github上\"><a href=\"#如何把博客布置到github上\" class=\"headerlink\" title=\"如何把博客布置到github上\"></a>如何把博客布置到github上</h2><ol>\n<li><p>首先在github自己的账号内新建仓库，注意仓库名就是你的域名。仓库名必须是 [账户名.github.io]</p>\n</li>\n<li><p>安装git并在git下设置用户名和邮箱</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name [username]</span><br><span class=\"line\">git config --global user.email [email]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在bolg文件夹下安装git部署插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置一下bolg文件夹的_config.yml，注意每个冒号后面有空格</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git </span><br><span class=\"line\">  repo: https:&#x2F;&#x2F;github.com&#x2F;sunyuxianggit&#x2F;sunyuxianggit.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>部署到github，中间需要输入github的账号密码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo doploy#部署到GitHub</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>常见错误：</p>\n<p>fatal: in unpopulated submodule ‘.deploy_git’</p>\n<p>这种情况可以先安装下相关的依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git –save</span><br><span class=\"line\">$ rm -rf .deploy_git#删掉</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo d#重新生成和部署</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ol>\n<h2 id=\"日常更新文章\"><a href=\"#日常更新文章\" class=\"headerlink\" title=\"日常更新文章\"></a>日常更新文章</h2><ol>\n<li>命令行进入blog文件夹使用<code>$ hexo new</code> 新建文章</li>\n<li>使用<code>$ hexo clean</code>清除老页面，然后在使用<code>$ hexo generated</code>生成页面</li>\n<li>使用<code>$ hexo server</code>本地预览没有问题后，使用 <code>$ hexo deploy</code>部署到Github</li>\n</ol>\n<h2 id=\"如何更换主题\"><a href=\"#如何更换主题\" class=\"headerlink\" title=\"如何更换主题\"></a>如何更换主题</h2><ol>\n<li><p>命令行进入blog</p>\n</li>\n<li><p>使用git clone 功能 clone喜欢的主题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git clone https:&#x2F;&#x2F;github.com&#x2F;litten&#x2F;hexo-theme-yilia.git themes&#x2F;yilia</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Extensions</span><br><span class=\"line\">## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class=\"line\">## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;</span><br><span class=\"line\">theme: yilia#这里</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<h2 id=\"多台设备同步管理\"><a href=\"#多台设备同步管理\" class=\"headerlink\" title=\"多台设备同步管理\"></a>多台设备同步管理</h2><ol>\n<li>原创建博客设备把源文件上传到GitHub，上传时注意检查所有.gitignore文件忽略情况和把node_modules文件夹删掉（因为内部文件名太长，上传的话git报错）.</li>\n<li>另一台电脑上将源代码clone下来之后，直接执行 <code>cnpm install</code>把node_modules安装回来.</li>\n<li>然后<code>hexo s</code>正常使用.</li>\n</ol>"},{"title":"Hexo博客如何插入图片","date":"2020-03-09T14:47:30.000Z","_content":"\n\n1. 首先确认主页配置的_config.yml中：post_asset_folder:true.\n  ![图片测试0](图片测试/Snipaste_2020-03-09_22-50-07.png)\n\n2. 在你的hexo目录下执行：\n  `npm install hexo-asset-image --save`\n  若出现错误则先执行：\n  `npm install -g cnpm --registry=https://registry.npm.taobao.org`\n\n  <!-- more -->\n\n3. 等待一小段时间后，再运行hexo n \"xxxx\"来生成md博文时，/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹。\n\n4. 在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中。\n  ![图片测试1](图片测试/Snipaste_2020-03-09_22-50-25.png)\n\n5. 在xxxx.md中按照markdown的格式引入图片.\n\n引用：\n[系列4：总结别人hexo博客如何插图片方法（有自己实现的图片实例）](https://www.jianshu.com/p/a2786cdb06e1)\n\n\n","source":"_posts/图片测试.md","raw":"---\ntitle: Hexo博客如何插入图片\ndate: 2020-03-09 22:47:30\ntags: hexo\n---\n\n\n1. 首先确认主页配置的_config.yml中：post_asset_folder:true.\n  ![图片测试0](图片测试/Snipaste_2020-03-09_22-50-07.png)\n\n2. 在你的hexo目录下执行：\n  `npm install hexo-asset-image --save`\n  若出现错误则先执行：\n  `npm install -g cnpm --registry=https://registry.npm.taobao.org`\n\n  <!-- more -->\n\n3. 等待一小段时间后，再运行hexo n \"xxxx\"来生成md博文时，/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹。\n\n4. 在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中。\n  ![图片测试1](图片测试/Snipaste_2020-03-09_22-50-25.png)\n\n5. 在xxxx.md中按照markdown的格式引入图片.\n\n引用：\n[系列4：总结别人hexo博客如何插图片方法（有自己实现的图片实例）](https://www.jianshu.com/p/a2786cdb06e1)\n\n\n","slug":"图片测试","published":1,"updated":"2020-03-11T02:26:21.966Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7rbpijm000sw8p40228e3ch","content":"<ol>\n<li><p>首先确认主页配置的_config.yml中：post_asset_folder:true.<br><img src=\"/2020/03/09/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/Snipaste_2020-03-09_22-50-07.png\" alt=\"图片测试0\"></p>\n</li>\n<li><p>在你的hexo目录下执行：<br><code>npm install hexo-asset-image --save</code><br>若出现错误则先执行：<br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>\n<a id=\"more\"></a>\n</li>\n<li><p>等待一小段时间后，再运行hexo n “xxxx”来生成md博文时，/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹。</p>\n</li>\n<li><p>在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中。<br><img src=\"/2020/03/09/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/Snipaste_2020-03-09_22-50-25.png\" alt=\"图片测试1\"></p>\n</li>\n<li><p>在xxxx.md中按照markdown的格式引入图片.</p>\n</li>\n</ol>\n<p>引用：<br><a href=\"https://www.jianshu.com/p/a2786cdb06e1\" target=\"_blank\" rel=\"noopener\">系列4：总结别人hexo博客如何插图片方法（有自己实现的图片实例）</a></p>\n","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#2d6b96","paginator":"#6AA7D2","button_hover":"#3B8BC4","text_selection":"#6AA7D2","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#6AA7D2","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"文章":"/","归档":"/archives"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":true,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":null,"top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2013,"footer_custom_text":"Hi, welcome to my <a href=\"https://sunyuxianggit.github.io/\">blog</a>!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":true,"url":"https://github.com/sunyuxianggit","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"SunYuxiangのBlog","subtitle":"好记性,不如烂笔头.今天你要写点什么？","description":"","author":"Sun Yuxiang","language":"zh-Hans","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/sunyuxianggit/sunyuxianggit.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"sitemap":{"path":"sitemap.xml","rel":false}}}}},"excerpt":"<ol>\n<li><p>首先确认主页配置的_config.yml中：post_asset_folder:true.<br><img src=\"/2020/03/09/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/Snipaste_2020-03-09_22-50-07.png\" alt=\"图片测试0\"></p>\n</li>\n<li><p>在你的hexo目录下执行：<br><code>npm install hexo-asset-image --save</code><br>若出现错误则先执行：<br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p></li></ol>","more":"\n<li><p>等待一小段时间后，再运行hexo n “xxxx”来生成md博文时，/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹。</p>\n</li>\n<li><p>在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中。<br><img src=\"/2020/03/09/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/Snipaste_2020-03-09_22-50-25.png\" alt=\"图片测试1\"></p>\n</li>\n<li><p>在xxxx.md中按照markdown的格式引入图片.</p>\n</li>\n\n<p>引用：<br><a href=\"https://www.jianshu.com/p/a2786cdb06e1\" target=\"_blank\" rel=\"noopener\">系列4：总结别人hexo博客如何插图片方法（有自己实现的图片实例）</a></p>"},{"title":"SubstancePainter_Plugin_Study_Notes","date":"2020-03-14T08:08:52.000Z","_content":"\n# Substance Painter Plugin 学习笔记\n\n## First steps\n\n核心思路：\n![](SubstancePainter-Plugin-Study-Notes/2020-03-13-21-25-23.png)\n<!-- more -->\n\n### Plugin skeleton\n\n```Js\nimport QtQuick 2.2\nimport Painter 1.0\n\nPainterPlugin {\n        // starts a timer that will trigger the 'onTick' callback at regular interval\n        // 启动一个计时器，该计时器将定期触发“ on tick”回调\n        tickIntervalMS: -1 // -1 禁用（默认值）\n\n        // starts a JSON server on the given port:\n        // 在给定的端口上启动json服务器\n        // you send javascript that will be evaluated and you get the result in JSON format\n        //您发送将被评估的javascript，并以json格式获取结果\n        jsonServerPort: -1 // -1 禁用（默认值）\n\n        Component.onCompleted: {\n                // Called after the object has been instantiated.\n                // 在实例化对象之后调用。\n                // This can be used to execute script code at startup,\n                // 可用于在启动时执行脚本代码，\n                // once the full QML environment has been established.\n                // 现已建立完整的qml环境\n                alg.log.info(\"Component.onCompleted\")\n        }\n\n        onTick: {\n                // Do something at each tick, depending on tickIntervalMS value\n                // 在每个滴答声中有一些东西，具体取决于滴答间隔ms值\n                alg.log.info(\"onTick\")\n        }\n\n        onConfigure: {\n                // Do something when the user request the plugin configuration panel\n                // 当用户请求插件配置面板时执行某些操作\n                alg.log.info(\"onConfigure\")\n        }\n\n        onApplicationStarted: {\n                // Called when the application is started\n                // 启动应用程序时调用\n                alg.log.info(\"onApplicationStarted\")\n        }\n\n        onNewProjectCreated: {\n                // Called when a new project is created, before the onProjectOpened callback\n                // 在创建新项目时调用，在on project打开回调之前调用\n                alg.log.info(\"onNewProjectCreated\")\n        }\n\n        onProjectOpened: {\n                // Called when the project is fully loaded\n                // 在项目完全加载时调用\n                alg.log.info(\"onProjectOpened\")\n        }\n\n        onProjectAboutToClose: {\n                // Called before project unload\n                // 在项目卸载之前调用\n                alg.log.info(\"onProjectAboutToClose\")\n        }\n\n        onProjectAboutToSave: function(destinationUrl) {\n                // Called before a save, 'destination_url' parameter contains the save destination\n                // 在保存之前调用，“目标网址”参数包含保存目标\n                alg.log.info(\"onProjectAboutToSave: \"+destinationUrl)\n        }\n\n        onProjectSaved: {\n                // Called after the project was saved\n                // 项目保存后调用\n                alg.log.info(\"onProjectSaved\")\n        }\n\n        onComputationStatusChanged: function(isComputing) {\n                // Called when the state of the engine computing stacks content change.\n                // 当引擎计算堆栈的状态更改内容时调用。\n                // If the stack content is computed, 'isComputing' parameter will be false\n                // 如果计算堆栈内容，则“正在计算”参数为false\n                alg.log.info(\"onComputationStatusChanged: \"+isComputing)\n        }\n\n        onExportAboutToStart: function(maps) {\n                // Called just before the export process starts.\n                // 在导出过程开始之前调用。\n                // 'maps' is the list of filepaths expected to be written.\n                // “映射”是预期要写入的文件路径的列表。\n                alg.log.info(\"onExportAboutToStart: \")\n                for (var stackName in maps) {\n                    alg.log.info(stackName);\n                    for (var filePath in maps[stackName]) {\n                        alg.log.info(maps[stackName][filePath]);\n                    }\n                }\n\n                // Example:\n                // Open the 'PreviewSphere' sample, set 'C:/tmp' as export path, choose 'png' as export\n                // 打开“预览球”示例，将“ c：/ tmp”设置为导出路径，选择“ png”作为导出\n                // format and select the 'PBR MetalRough' config, the example above will output:\n                // 格式化并选择“ pbr metal raw”配置，以上示例将输出：\n\n                // onExportAboutToStart:\n                // Sphere\n                // c:/tmp/Sphere_Sphere_BaseColor.png\n                // c:/tmp/Sphere_Sphere_Roughness.png\n                // c:/tmp/Sphere_Sphere_Metallic.png\n                // c:/tmp/Sphere_Sphere_Normal.png\n                // c:/tmp/Sphere_Sphere_Height.png\n\n                // Please note the 'Opacity' and 'Emissive' maps are not listed here because they\n                // 请注意，此处未列出“不透明”和“发射”地图，因为它们\n                // can not be exported with this sample while the actual export will warn about it.\n                // 不能与该样品一起出口，但实际出口会发出警告。\n        }\n\n        onExportFinished: function(status, maps) {\n                // Called right after the export process ends.\n                // 在导出过程结束后立即调用\n                // 'status' is the error status returned by the process. Available values are:\n                // “状态”是进程返回的错误状态。,可用值为：\n                // - Export.Status_Ok\n                // - Export.Status_Warn\n                // - Export.Status_Error\n                // - Export.Status_Canceled\n                // 'maps' is the list of filepaths effectively exported.\n                // “映射”是有效导出的文件路径的列表。\n                alg.log.info(\"onExportFinished: \")\n                if (status != Export.Status_Ok) {\n                    alg.log.error(\"Export failed.\")\n                }\n                else {\n                    for (var stackName in maps) {\n                        alg.log.info(stackName);\n                        for (var filePath in maps[stackName]) {\n                            alg.log.info(maps[stackName][filePath]);\n                        }\n                    }\n                }\n        }\n\n}\n```\n\n* Plugin meta data:\nInformation about the plugin can be provided by creating a plugin.json file in the plugin directory. Available properties are:\n可以通过在plugin目录中创建一个plugin.json文件来提供有关该插件的信息。,可用属性为：\ndescription: plugin description, displayed in the plugin about dialog.\nurl: project homepage, displayed in the plugin about dialog. Warning, the scheme is mandatory to create a clickable link.\nversion: plugin version.\nlicense: plugin license.\nmin_api_version: required minimal scripting API version.\nExample:\n```js\n{\n        \"description\": \"This is a sample plugin\",\n        \"url\": \"https://www.allegorithmic.com\",\n        \"version\": \"0.1.0\",\n        \"license\": \"<a href=\\\"https://opensource.org/licenses/MIT\\\">MIT</a>\"\n}\n```\n\n## Custom UI\n\n```js\nimport QtQuick 2.2\nimport Painter 1.0\n\nPainterPlugin {\n        // 在实例化对象之后调用。\n        // 可用于在启动时执行脚本代码，\n        // 建立环境\n        Component.onCompleted: {\n                // 创建一个toolbar 按钮\n                var t = alg.ui.addToolBarWidget(\"dock.qml\");\n                t.rectangle.color = \"blue\"\n                t = alg.ui.addToolBarWidget(\"dock.qml\");\n                t.rectangle.color = \"green\"\n                t = alg.ui.addToolBarWidget(\"dock.qml\");\n                t.rectangle.color = \"yellow\"\n                t = alg.ui.addToolBarWidget(\"dock.qml\");\n                t.rectangle.color = \"purple\"\n                // 创建停靠小部件\n                alg.ui.addDockWidget(\"dock.qml\");\n        }\n\n}\n```\n\n```js\nimport QtQuick 2.3\nimport QtQuick.Window 2.2\nimport QtQuick.Layouts 1.2\n\nItem {\n        width: 24\n        height: 24\n        objectName: \"My plugin UI\"\n        property alias rectangle: rect\n\n        Rectangle {\n                id: rect\n                anchors.fill: parent\n                color: \"red\"\n                MouseArea {\n                        id: mouseArea\n                        anchors.fill: parent\n                        onClicked: {\n                                var ok = alg.mapexport.showExportDialog();//打开导出窗口  alg是指Javascript API\n                                if (ok) {\n                                        alg.log.info(\"Export successful!\")\n                                } else {\n                                        alg.log.warn(\"Export cancelled!\")\n                                }\n                        }\n                }\n        }\n}\n```\n\n## Javascript API\nNamespace: alg\n\n### alg.Members\n<static> documents_directory 当前substance 文件所在文件夹路径\nProperties:\nName                Type    Description\ndocuments_directory string  Path to Substance Painter documents folder\n\n\n<static> plugin_root_directory 当前插件所在文件夹路径\nProperties:\nName                    Type    Description\nplugin_root_directory   string  Root directory of the plugin\n\n<static> version\nProperties:\nName            Type    Description \nversion.api     string  JavaScript api version 当前javascript api 版本\nversion.painter string  Substance Painter version 当前substance painter 版本\n\n### alg. baking \n管理已打开项目的烘培\n\n<static> bake(textureSetName)\n烘焙具有当前烘焙参数的纹理集的贴图\nParameters:\nName            Type    Description\ntextureSetName  string  The texture set name\n\nThrows:\nalg.baking.BakingError\n\n<static> commonBakingParameters()\n从当前的项目里获得通用烘培设置\nThrows:\nalg.baking.BakingError\nReturns:\nThe baking parameters as a JSON object\nType\nobject\nExample\n```js\n// Form of the common baking parameters\n     {\n        commonParameters: {\n          Apply_Diffusion: true,\n          Dilation_width: 1,\n          Output_Size: [9, 9]\n        },\n        detailParameters: {\n          Antialiasing: \"None\",\n          Average_Normals: true,\n          Cage_File: \"\",\n          High_Definition_Meshes: [],\n          High_poly_mesh_suffix: \"_high\",\n          Ignore_Backface: true,\n          Low_poly_mesh_suffix: \"_low\",\n          Match: \"Always\",\n          Max_Frontal_Distance: 0.01,\n          Max_Rear_Distance: 0.01,\n          Relative_to_Bounding_Box: true,\n          Use_Cage: false\n        }\n      }\n```\n\n待续\n\n### alg.display\n管理项目的显示设置\n\n<static> getColorLutResource()\n获得当前项目的色彩配置LUT的URL\n\n<static> getEnvironmentResource()\n获得当前项目的environment map的URL\n\n<static> setColorLutResource(newUrl)\n设置当前项目的颜色配置文件lut的URL\n\n<static> setEnvironmentResource(newUrl)\n设置当前项目的环境图的URL\n\n### alg.ui\nUi 实用程序\n\n<static> addDockWidget(qmlFileUrl)\n从qml文件创建小部件，然后将其作为“停靠小部件”添加到主窗口\nName        Type    Description\nqmlFileUrl  string  qml file to be loaded. Can be an absolute url or a path relative to the plugin directory.\n\n\n<static> addToolBarWidget(qmlFileUrl)\n从qml文件创建小部件，然后将其作为“工具栏”添加到主窗口。\nName        Type    Description\nqmlFileUrl  string  qml file to be loaded. Can be an absolute url or a path relative to the plugin directory.\n\n<static> addWidgetToPluginToolBar(qmlFileUrl)\n从qml文件创建小部件，然后将其添加到插件工具栏。\nName        Type    Description\nqmlFileUrl  string  qml file to be loaded. Can be an absolute url or a path relative to the plugin directory.\n\n<static> clickButton(name)\nSimulate a click on a button.\n\nName    Type    Description\nname    string  the object name of the button\n\n\n\n### alg. subprocess\n\nSpawn new processes. All processes are started from the plugin root directory.\n产生新进程。,所有进程均从插件的根目录启动。\n\n<static> call(command)\nRun command. Wait for command to complete, then return the returncode.\n运行命令,等待命令完成，然后返回返回码\n\nName\tType\tDescription\ncommand\tstring | Array.<string>\tThe command to be launched\n\n<static> check_call(command)\nRun command. Wait for command to complete. If the return code was zero then return, otherwise raise an error.\n运行命令,等待命令完成。,如果返回码为零，则返回，否则返回错误。\n\nName\tType\tDescription\ncommand\tstring | Array.<string>\tThe command to be launched\n\n<static> check_output(command)\nRun command. Wait for command to complete and return its standard output as a string. Raise an error if the return code is non-zero.\n运行命令。,等待命令完成并以字符串形式返回其标准输出。,如果返回码不为零，则会引发错误\n\nName\tType\tDescription\ncommand\tstring | Array.<string>\tThe command to be launched\n\n\n<static> start(command [, callback])\nStart the given command asynchronously.\n异步启动给定命令。\ncommand\tstring | Array.<string>\t\tThe command to be launched\ncallback\talg.subprocess~processEndedCallback\t<optional>\nCallback called when the command terminates\n\n\n\n\n\n\n## 例子1\n\nsubstance painter  hello world 窗口\n\n* 首先需要有一个定义主入口点的qml文件main. \n1. C:\\Users\\sunyuxiang\\Documents\\Allegorithmic\\Substance Painter\\plugins\n2. 在此处创建一个名为“ HelloPlugin”的文件夹 \n3. 在插件内，创建两个文件  \n        * plugin.json \n        * main.qml \n4. 打开main.qml文件写入\n\n```javascript\nimport QtQuick 2.2\nimport Painter 1.0\n\nPainterPlugin \n{\n        Component.onCompleted: \n        {\n                alg.log.info(\"hello world!\")//注意这里，alg.log.info()等于python里面的print()\n        }\n}\n```\n* 填写JSON文件：\n1. JSON文件包含插件的元数据，在这里显示.\n![](SubstancePainter-Plugin-Study-Notes/2020-03-06-10-45-09.png)\n![](SubstancePainter-Plugin-Study-Notes/2020-03-06-10-43-52.png)\n2. 我们知道json文件是键值对,观察一下现有插件的json文件,然后修改一后面的值改为.\n![](SubstancePainter-Plugin-Study-Notes/2020-03-06-10-47-53.png)\n\n```javascript\n{\n    \"description\": \"This is a sample plugin to print hello world\",\n    \"url\": \"https://test\",\n    \"version\": \"0.1.0\",\n    \"license\": \"<a href=\\\"https://opensource.org/licenses/MIT\\\">MIT</a>\"\n}\n```\n\n* 然后打开substance painter\n\n1. 可以看到log文件已经打印出了hello world\n![](SubstancePainter-Plugin-Study-Notes/2020-03-06-10-56-41.png)\n2. plugins下的对应插件名字下面的about也可以正常工作\n3. 现在 我们可以看到插件的加载，还可以看到plugin.json文件的关于窗口信息.\n\n* 添加一个窗口\n1. 在我们的HelloPlugin目录中创建一个HelloWorldWindow.qml.\n2. 编辑文件，添加代码来定义一个简单的窗口。\n\n```\nimport AlgWidgets 1.0 //窗口类导入\n\nAlgWindow\n{\n    // 属性就像对象类型上的变量\n    id: window//对应 main.qml的id 这个id很有用，因为它允许我们在插件的其他位置引用该对象，访问其可见性之类的属性。  \n    title: \"hello world window\"\n    visible: true\n}\n```\n* 现在，我们有一个简单的窗口，但是在看到窗口之前，我们需要在main.qml文件中实例化它。 \n1. 编辑main.qml\n```javascript\nimport QtQuick 2.2\nimport Painter 1.0\n\nPainterPlugin \n{       \n        HelloWorldWindow// 在这里声明一个window，HelloWorldWindow指向HelloWorldWindow.qml\n        {\n                id: window//对应 HelloWorldWindow.qml的id\n        }\n\n        Component.onCompleted: \n        {\n                alg.log.info(\"hello world!\")\n        }\n}\n```\n2. 现在打开substance painter 禁用插件在启用插件就会看到该窗口弹出，这是因为在加载插件时首先实例化该窗口（？），我们稍后将解决此问题。 \n\n* 创建一个按钮：\n1. 接下来创建一个按钮来替代禁用/启用\n2. 打开“ HelloWorldWindow.qml”文件。\n3. 我们将添加三件事： \n        * 一系列的布局元素。 \n        * 一个标签。 \n        * 一个按钮\n\n```javascript\nimport AlgWidgets 1.0 \n\n//下面这些模块是UI布局需要的\nimport QtQuick 2.7\nimport QtQuick.Layouts 1.3\nimport \".\"\n\nAlgWindow\n{\n    id: window//对应 main.qml的id\n    title: \"hello world window\"\n    visible: true//注意这里\n\n    ColumnLayout //也可以用 RowLayout这里定义了一系列的布局元素 \n    {\n        id: horizontalLayout\n        anchors.fill: parent\n\n        Rectangle //这里定义了一系列的布局元素 \n        {\n            id: buttonBar\n            anchors.left: parent.left\n            anchors.right: parent.right\n\n            ColumnLayout//也可以用 RowLayout这里定义了一系列的布局元素 \n            {\n                anchors.fill:parent\n\n                AlgLabel//一个标签\n                {\n                    id: buttonLabel\n                    font.pixelSize: 14\n                    font.bold: true\n\n                    text: \"Press Me\"\n                }\n\n                AlgButton//一个按钮\n                {\n                    text: \"Say Hello!\"\n                    //Layout.preferredWidth: Style.widgets.buttonWidth\n\n                    onClicked:\n                    {\n                        alg.log.info(\"hello World\")\n                    }\n                }\n\n\n                }\n            }\n        }\n    }\n}\n```\n        1. QML窗口是使用一系列嵌套的布局对象创建的-为了达到我们的目的，我们将使用列，矩形和行。 \n        2. 我们需要添加其他导入语句来访问这些对象类型-QtQuick和QtQuick.Layouts。\n        3. 该列表示总体布局-元素将按照添加顺序堆叠在此形状中。 \n        4. 矩形允许我们使用子布局填充此列的分区。 \n        5. 最后，行布局允许我们添加将按照添加顺序从左到右呈现的元素。 \n        6. 在行布局中添加AlgLabel和AlgButton将两个新元素添加到我们的窗口中。 \n        7. 最后，为按钮定义“ onClicked”事件将替换启动时登录main.qml的位置。 \n\n* 重新加载脚本：\n可以使用painter中的Plugins-> HelloPlugin-> Reload  菜单即时重新加载脚本。在后面debug和尝试过程中这个超级有用，避免了我们要重新开关软件。\n\n* 将插件添加到工具栏：\n1. 现在如果关闭插件窗口，则必须通过reload插件才能再次打开插件窗口。 \n2. 让我们在工具栏上添加一个按钮，来替代每次reload调用窗口。\n3. 工具栏中的按钮将非常简单，要做的就是在按下插件窗口时切换可见性。 \n4. 首先，我们将通过改变visible值的true改为false,让插件窗口不会加载自动弹出。\n5. 创建一个名为“ toolbar.qml ” 的新文件，并且与我们之前所做的类似,仅一排，带有一个按钮。 \n比较重要的是-插件加载时，属性变量“ windowReference”将由我们的插件填充。 \n由于windowReference在本地以null开头，因此我们稍后将对其的调用包装在try / catch块中。 \n如果脚本中其他地方的内容使我们无法创建窗口，那么这将阻止崩溃，我们可以将信息打印到控制台。 \n```\nimport QtQuick 2.7\nimport QtQuick.controls 2.0\nimport AlgWidgets 1.0\n\nRow //现在是横向的如果需要侧边的话就是AlgToolBarButton\n{\n    property var windowReference : null\n\n    Button\n    {\n        id: rect\n        width: 30\n        height: 30\n\n        onClicked:\n        {\n            try \n            {\n                windowReference.visible = true\n            }\n            catch(err) \n            {\n                alg.log.exception(err)\n            }\n        }\n    }\n}\n\n```\n\n* 最后，在“ main.qml”文件中，我们将添加一个新的工具栏小部件，该小部件将把“ toolbar.qml”实例化为工具栏上的按钮。 \n我们还使用其ID将HelloWorldWindow实例分配给工具栏按钮中的windowReference变量。 \n```JavaScript\nimport QtQuick 2.2\nimport Painter 1.0\n\nPainterPlugin \n{\n        // 在这里声明一个window，HelloWorldWindow指向HelloWorldWindow.qml\n        HelloWorldWindow\n        {\n                id: window//对应 HelloWorldWindow.qml的id\n        }\n\n        Component.onCompleted: \n        {\n                var qmToolbar = alg.ui.addWidgetToPluginToolBar(\"toolbar.qml\")\n                qmToolbar.windowReference = window//这里调用了window\n\n        }\n\n}\n\n```\n* 这就是向Substance Painter添加基本插件的小例子.\n* ref：http://peterhanshawart.blogspot.com/2017/11/making-hello-world-substance-painter.html\n\n## 例子2\n```\nAlgWindow\n{\n    Item\n    {\n        Item \n        {\n            Row\n            {\n                Alglabel {}\n                AlgTextInput {}\n            }\n            Row\n            {\n                AlgComboBox {}\n                AlgLabel {}\n                AlgComboBox {}\n            }\n            Row\n            {\n                AlgCheckBox {}\n            }\n        }\n        GridView\n        {\n            ListElement {}\n        }\n        Item \n        {\n            Row \n            {\n                Rectangle {}\n                FileDialog {}\n                AlgButton {}\n                AlgButton {}\n            }\n        }\n    }\n}\n```","source":"_posts/SubstancePainter-Plugin-Study-Notes.md","raw":"---\ntitle: SubstancePainter_Plugin_Study_Notes\ndate: 2020-03-14 16:08:52\ntags: SubstancePainter\n---\n\n# Substance Painter Plugin 学习笔记\n\n## First steps\n\n核心思路：\n![](SubstancePainter-Plugin-Study-Notes/2020-03-13-21-25-23.png)\n<!-- more -->\n\n### Plugin skeleton\n\n```Js\nimport QtQuick 2.2\nimport Painter 1.0\n\nPainterPlugin {\n        // starts a timer that will trigger the 'onTick' callback at regular interval\n        // 启动一个计时器，该计时器将定期触发“ on tick”回调\n        tickIntervalMS: -1 // -1 禁用（默认值）\n\n        // starts a JSON server on the given port:\n        // 在给定的端口上启动json服务器\n        // you send javascript that will be evaluated and you get the result in JSON format\n        //您发送将被评估的javascript，并以json格式获取结果\n        jsonServerPort: -1 // -1 禁用（默认值）\n\n        Component.onCompleted: {\n                // Called after the object has been instantiated.\n                // 在实例化对象之后调用。\n                // This can be used to execute script code at startup,\n                // 可用于在启动时执行脚本代码，\n                // once the full QML environment has been established.\n                // 现已建立完整的qml环境\n                alg.log.info(\"Component.onCompleted\")\n        }\n\n        onTick: {\n                // Do something at each tick, depending on tickIntervalMS value\n                // 在每个滴答声中有一些东西，具体取决于滴答间隔ms值\n                alg.log.info(\"onTick\")\n        }\n\n        onConfigure: {\n                // Do something when the user request the plugin configuration panel\n                // 当用户请求插件配置面板时执行某些操作\n                alg.log.info(\"onConfigure\")\n        }\n\n        onApplicationStarted: {\n                // Called when the application is started\n                // 启动应用程序时调用\n                alg.log.info(\"onApplicationStarted\")\n        }\n\n        onNewProjectCreated: {\n                // Called when a new project is created, before the onProjectOpened callback\n                // 在创建新项目时调用，在on project打开回调之前调用\n                alg.log.info(\"onNewProjectCreated\")\n        }\n\n        onProjectOpened: {\n                // Called when the project is fully loaded\n                // 在项目完全加载时调用\n                alg.log.info(\"onProjectOpened\")\n        }\n\n        onProjectAboutToClose: {\n                // Called before project unload\n                // 在项目卸载之前调用\n                alg.log.info(\"onProjectAboutToClose\")\n        }\n\n        onProjectAboutToSave: function(destinationUrl) {\n                // Called before a save, 'destination_url' parameter contains the save destination\n                // 在保存之前调用，“目标网址”参数包含保存目标\n                alg.log.info(\"onProjectAboutToSave: \"+destinationUrl)\n        }\n\n        onProjectSaved: {\n                // Called after the project was saved\n                // 项目保存后调用\n                alg.log.info(\"onProjectSaved\")\n        }\n\n        onComputationStatusChanged: function(isComputing) {\n                // Called when the state of the engine computing stacks content change.\n                // 当引擎计算堆栈的状态更改内容时调用。\n                // If the stack content is computed, 'isComputing' parameter will be false\n                // 如果计算堆栈内容，则“正在计算”参数为false\n                alg.log.info(\"onComputationStatusChanged: \"+isComputing)\n        }\n\n        onExportAboutToStart: function(maps) {\n                // Called just before the export process starts.\n                // 在导出过程开始之前调用。\n                // 'maps' is the list of filepaths expected to be written.\n                // “映射”是预期要写入的文件路径的列表。\n                alg.log.info(\"onExportAboutToStart: \")\n                for (var stackName in maps) {\n                    alg.log.info(stackName);\n                    for (var filePath in maps[stackName]) {\n                        alg.log.info(maps[stackName][filePath]);\n                    }\n                }\n\n                // Example:\n                // Open the 'PreviewSphere' sample, set 'C:/tmp' as export path, choose 'png' as export\n                // 打开“预览球”示例，将“ c：/ tmp”设置为导出路径，选择“ png”作为导出\n                // format and select the 'PBR MetalRough' config, the example above will output:\n                // 格式化并选择“ pbr metal raw”配置，以上示例将输出：\n\n                // onExportAboutToStart:\n                // Sphere\n                // c:/tmp/Sphere_Sphere_BaseColor.png\n                // c:/tmp/Sphere_Sphere_Roughness.png\n                // c:/tmp/Sphere_Sphere_Metallic.png\n                // c:/tmp/Sphere_Sphere_Normal.png\n                // c:/tmp/Sphere_Sphere_Height.png\n\n                // Please note the 'Opacity' and 'Emissive' maps are not listed here because they\n                // 请注意，此处未列出“不透明”和“发射”地图，因为它们\n                // can not be exported with this sample while the actual export will warn about it.\n                // 不能与该样品一起出口，但实际出口会发出警告。\n        }\n\n        onExportFinished: function(status, maps) {\n                // Called right after the export process ends.\n                // 在导出过程结束后立即调用\n                // 'status' is the error status returned by the process. Available values are:\n                // “状态”是进程返回的错误状态。,可用值为：\n                // - Export.Status_Ok\n                // - Export.Status_Warn\n                // - Export.Status_Error\n                // - Export.Status_Canceled\n                // 'maps' is the list of filepaths effectively exported.\n                // “映射”是有效导出的文件路径的列表。\n                alg.log.info(\"onExportFinished: \")\n                if (status != Export.Status_Ok) {\n                    alg.log.error(\"Export failed.\")\n                }\n                else {\n                    for (var stackName in maps) {\n                        alg.log.info(stackName);\n                        for (var filePath in maps[stackName]) {\n                            alg.log.info(maps[stackName][filePath]);\n                        }\n                    }\n                }\n        }\n\n}\n```\n\n* Plugin meta data:\nInformation about the plugin can be provided by creating a plugin.json file in the plugin directory. Available properties are:\n可以通过在plugin目录中创建一个plugin.json文件来提供有关该插件的信息。,可用属性为：\ndescription: plugin description, displayed in the plugin about dialog.\nurl: project homepage, displayed in the plugin about dialog. Warning, the scheme is mandatory to create a clickable link.\nversion: plugin version.\nlicense: plugin license.\nmin_api_version: required minimal scripting API version.\nExample:\n```js\n{\n        \"description\": \"This is a sample plugin\",\n        \"url\": \"https://www.allegorithmic.com\",\n        \"version\": \"0.1.0\",\n        \"license\": \"<a href=\\\"https://opensource.org/licenses/MIT\\\">MIT</a>\"\n}\n```\n\n## Custom UI\n\n```js\nimport QtQuick 2.2\nimport Painter 1.0\n\nPainterPlugin {\n        // 在实例化对象之后调用。\n        // 可用于在启动时执行脚本代码，\n        // 建立环境\n        Component.onCompleted: {\n                // 创建一个toolbar 按钮\n                var t = alg.ui.addToolBarWidget(\"dock.qml\");\n                t.rectangle.color = \"blue\"\n                t = alg.ui.addToolBarWidget(\"dock.qml\");\n                t.rectangle.color = \"green\"\n                t = alg.ui.addToolBarWidget(\"dock.qml\");\n                t.rectangle.color = \"yellow\"\n                t = alg.ui.addToolBarWidget(\"dock.qml\");\n                t.rectangle.color = \"purple\"\n                // 创建停靠小部件\n                alg.ui.addDockWidget(\"dock.qml\");\n        }\n\n}\n```\n\n```js\nimport QtQuick 2.3\nimport QtQuick.Window 2.2\nimport QtQuick.Layouts 1.2\n\nItem {\n        width: 24\n        height: 24\n        objectName: \"My plugin UI\"\n        property alias rectangle: rect\n\n        Rectangle {\n                id: rect\n                anchors.fill: parent\n                color: \"red\"\n                MouseArea {\n                        id: mouseArea\n                        anchors.fill: parent\n                        onClicked: {\n                                var ok = alg.mapexport.showExportDialog();//打开导出窗口  alg是指Javascript API\n                                if (ok) {\n                                        alg.log.info(\"Export successful!\")\n                                } else {\n                                        alg.log.warn(\"Export cancelled!\")\n                                }\n                        }\n                }\n        }\n}\n```\n\n## Javascript API\nNamespace: alg\n\n### alg.Members\n<static> documents_directory 当前substance 文件所在文件夹路径\nProperties:\nName                Type    Description\ndocuments_directory string  Path to Substance Painter documents folder\n\n\n<static> plugin_root_directory 当前插件所在文件夹路径\nProperties:\nName                    Type    Description\nplugin_root_directory   string  Root directory of the plugin\n\n<static> version\nProperties:\nName            Type    Description \nversion.api     string  JavaScript api version 当前javascript api 版本\nversion.painter string  Substance Painter version 当前substance painter 版本\n\n### alg. baking \n管理已打开项目的烘培\n\n<static> bake(textureSetName)\n烘焙具有当前烘焙参数的纹理集的贴图\nParameters:\nName            Type    Description\ntextureSetName  string  The texture set name\n\nThrows:\nalg.baking.BakingError\n\n<static> commonBakingParameters()\n从当前的项目里获得通用烘培设置\nThrows:\nalg.baking.BakingError\nReturns:\nThe baking parameters as a JSON object\nType\nobject\nExample\n```js\n// Form of the common baking parameters\n     {\n        commonParameters: {\n          Apply_Diffusion: true,\n          Dilation_width: 1,\n          Output_Size: [9, 9]\n        },\n        detailParameters: {\n          Antialiasing: \"None\",\n          Average_Normals: true,\n          Cage_File: \"\",\n          High_Definition_Meshes: [],\n          High_poly_mesh_suffix: \"_high\",\n          Ignore_Backface: true,\n          Low_poly_mesh_suffix: \"_low\",\n          Match: \"Always\",\n          Max_Frontal_Distance: 0.01,\n          Max_Rear_Distance: 0.01,\n          Relative_to_Bounding_Box: true,\n          Use_Cage: false\n        }\n      }\n```\n\n待续\n\n### alg.display\n管理项目的显示设置\n\n<static> getColorLutResource()\n获得当前项目的色彩配置LUT的URL\n\n<static> getEnvironmentResource()\n获得当前项目的environment map的URL\n\n<static> setColorLutResource(newUrl)\n设置当前项目的颜色配置文件lut的URL\n\n<static> setEnvironmentResource(newUrl)\n设置当前项目的环境图的URL\n\n### alg.ui\nUi 实用程序\n\n<static> addDockWidget(qmlFileUrl)\n从qml文件创建小部件，然后将其作为“停靠小部件”添加到主窗口\nName        Type    Description\nqmlFileUrl  string  qml file to be loaded. Can be an absolute url or a path relative to the plugin directory.\n\n\n<static> addToolBarWidget(qmlFileUrl)\n从qml文件创建小部件，然后将其作为“工具栏”添加到主窗口。\nName        Type    Description\nqmlFileUrl  string  qml file to be loaded. Can be an absolute url or a path relative to the plugin directory.\n\n<static> addWidgetToPluginToolBar(qmlFileUrl)\n从qml文件创建小部件，然后将其添加到插件工具栏。\nName        Type    Description\nqmlFileUrl  string  qml file to be loaded. Can be an absolute url or a path relative to the plugin directory.\n\n<static> clickButton(name)\nSimulate a click on a button.\n\nName    Type    Description\nname    string  the object name of the button\n\n\n\n### alg. subprocess\n\nSpawn new processes. All processes are started from the plugin root directory.\n产生新进程。,所有进程均从插件的根目录启动。\n\n<static> call(command)\nRun command. Wait for command to complete, then return the returncode.\n运行命令,等待命令完成，然后返回返回码\n\nName\tType\tDescription\ncommand\tstring | Array.<string>\tThe command to be launched\n\n<static> check_call(command)\nRun command. Wait for command to complete. If the return code was zero then return, otherwise raise an error.\n运行命令,等待命令完成。,如果返回码为零，则返回，否则返回错误。\n\nName\tType\tDescription\ncommand\tstring | Array.<string>\tThe command to be launched\n\n<static> check_output(command)\nRun command. Wait for command to complete and return its standard output as a string. Raise an error if the return code is non-zero.\n运行命令。,等待命令完成并以字符串形式返回其标准输出。,如果返回码不为零，则会引发错误\n\nName\tType\tDescription\ncommand\tstring | Array.<string>\tThe command to be launched\n\n\n<static> start(command [, callback])\nStart the given command asynchronously.\n异步启动给定命令。\ncommand\tstring | Array.<string>\t\tThe command to be launched\ncallback\talg.subprocess~processEndedCallback\t<optional>\nCallback called when the command terminates\n\n\n\n\n\n\n## 例子1\n\nsubstance painter  hello world 窗口\n\n* 首先需要有一个定义主入口点的qml文件main. \n1. C:\\Users\\sunyuxiang\\Documents\\Allegorithmic\\Substance Painter\\plugins\n2. 在此处创建一个名为“ HelloPlugin”的文件夹 \n3. 在插件内，创建两个文件  \n        * plugin.json \n        * main.qml \n4. 打开main.qml文件写入\n\n```javascript\nimport QtQuick 2.2\nimport Painter 1.0\n\nPainterPlugin \n{\n        Component.onCompleted: \n        {\n                alg.log.info(\"hello world!\")//注意这里，alg.log.info()等于python里面的print()\n        }\n}\n```\n* 填写JSON文件：\n1. JSON文件包含插件的元数据，在这里显示.\n![](SubstancePainter-Plugin-Study-Notes/2020-03-06-10-45-09.png)\n![](SubstancePainter-Plugin-Study-Notes/2020-03-06-10-43-52.png)\n2. 我们知道json文件是键值对,观察一下现有插件的json文件,然后修改一后面的值改为.\n![](SubstancePainter-Plugin-Study-Notes/2020-03-06-10-47-53.png)\n\n```javascript\n{\n    \"description\": \"This is a sample plugin to print hello world\",\n    \"url\": \"https://test\",\n    \"version\": \"0.1.0\",\n    \"license\": \"<a href=\\\"https://opensource.org/licenses/MIT\\\">MIT</a>\"\n}\n```\n\n* 然后打开substance painter\n\n1. 可以看到log文件已经打印出了hello world\n![](SubstancePainter-Plugin-Study-Notes/2020-03-06-10-56-41.png)\n2. plugins下的对应插件名字下面的about也可以正常工作\n3. 现在 我们可以看到插件的加载，还可以看到plugin.json文件的关于窗口信息.\n\n* 添加一个窗口\n1. 在我们的HelloPlugin目录中创建一个HelloWorldWindow.qml.\n2. 编辑文件，添加代码来定义一个简单的窗口。\n\n```\nimport AlgWidgets 1.0 //窗口类导入\n\nAlgWindow\n{\n    // 属性就像对象类型上的变量\n    id: window//对应 main.qml的id 这个id很有用，因为它允许我们在插件的其他位置引用该对象，访问其可见性之类的属性。  \n    title: \"hello world window\"\n    visible: true\n}\n```\n* 现在，我们有一个简单的窗口，但是在看到窗口之前，我们需要在main.qml文件中实例化它。 \n1. 编辑main.qml\n```javascript\nimport QtQuick 2.2\nimport Painter 1.0\n\nPainterPlugin \n{       \n        HelloWorldWindow// 在这里声明一个window，HelloWorldWindow指向HelloWorldWindow.qml\n        {\n                id: window//对应 HelloWorldWindow.qml的id\n        }\n\n        Component.onCompleted: \n        {\n                alg.log.info(\"hello world!\")\n        }\n}\n```\n2. 现在打开substance painter 禁用插件在启用插件就会看到该窗口弹出，这是因为在加载插件时首先实例化该窗口（？），我们稍后将解决此问题。 \n\n* 创建一个按钮：\n1. 接下来创建一个按钮来替代禁用/启用\n2. 打开“ HelloWorldWindow.qml”文件。\n3. 我们将添加三件事： \n        * 一系列的布局元素。 \n        * 一个标签。 \n        * 一个按钮\n\n```javascript\nimport AlgWidgets 1.0 \n\n//下面这些模块是UI布局需要的\nimport QtQuick 2.7\nimport QtQuick.Layouts 1.3\nimport \".\"\n\nAlgWindow\n{\n    id: window//对应 main.qml的id\n    title: \"hello world window\"\n    visible: true//注意这里\n\n    ColumnLayout //也可以用 RowLayout这里定义了一系列的布局元素 \n    {\n        id: horizontalLayout\n        anchors.fill: parent\n\n        Rectangle //这里定义了一系列的布局元素 \n        {\n            id: buttonBar\n            anchors.left: parent.left\n            anchors.right: parent.right\n\n            ColumnLayout//也可以用 RowLayout这里定义了一系列的布局元素 \n            {\n                anchors.fill:parent\n\n                AlgLabel//一个标签\n                {\n                    id: buttonLabel\n                    font.pixelSize: 14\n                    font.bold: true\n\n                    text: \"Press Me\"\n                }\n\n                AlgButton//一个按钮\n                {\n                    text: \"Say Hello!\"\n                    //Layout.preferredWidth: Style.widgets.buttonWidth\n\n                    onClicked:\n                    {\n                        alg.log.info(\"hello World\")\n                    }\n                }\n\n\n                }\n            }\n        }\n    }\n}\n```\n        1. QML窗口是使用一系列嵌套的布局对象创建的-为了达到我们的目的，我们将使用列，矩形和行。 \n        2. 我们需要添加其他导入语句来访问这些对象类型-QtQuick和QtQuick.Layouts。\n        3. 该列表示总体布局-元素将按照添加顺序堆叠在此形状中。 \n        4. 矩形允许我们使用子布局填充此列的分区。 \n        5. 最后，行布局允许我们添加将按照添加顺序从左到右呈现的元素。 \n        6. 在行布局中添加AlgLabel和AlgButton将两个新元素添加到我们的窗口中。 \n        7. 最后，为按钮定义“ onClicked”事件将替换启动时登录main.qml的位置。 \n\n* 重新加载脚本：\n可以使用painter中的Plugins-> HelloPlugin-> Reload  菜单即时重新加载脚本。在后面debug和尝试过程中这个超级有用，避免了我们要重新开关软件。\n\n* 将插件添加到工具栏：\n1. 现在如果关闭插件窗口，则必须通过reload插件才能再次打开插件窗口。 \n2. 让我们在工具栏上添加一个按钮，来替代每次reload调用窗口。\n3. 工具栏中的按钮将非常简单，要做的就是在按下插件窗口时切换可见性。 \n4. 首先，我们将通过改变visible值的true改为false,让插件窗口不会加载自动弹出。\n5. 创建一个名为“ toolbar.qml ” 的新文件，并且与我们之前所做的类似,仅一排，带有一个按钮。 \n比较重要的是-插件加载时，属性变量“ windowReference”将由我们的插件填充。 \n由于windowReference在本地以null开头，因此我们稍后将对其的调用包装在try / catch块中。 \n如果脚本中其他地方的内容使我们无法创建窗口，那么这将阻止崩溃，我们可以将信息打印到控制台。 \n```\nimport QtQuick 2.7\nimport QtQuick.controls 2.0\nimport AlgWidgets 1.0\n\nRow //现在是横向的如果需要侧边的话就是AlgToolBarButton\n{\n    property var windowReference : null\n\n    Button\n    {\n        id: rect\n        width: 30\n        height: 30\n\n        onClicked:\n        {\n            try \n            {\n                windowReference.visible = true\n            }\n            catch(err) \n            {\n                alg.log.exception(err)\n            }\n        }\n    }\n}\n\n```\n\n* 最后，在“ main.qml”文件中，我们将添加一个新的工具栏小部件，该小部件将把“ toolbar.qml”实例化为工具栏上的按钮。 \n我们还使用其ID将HelloWorldWindow实例分配给工具栏按钮中的windowReference变量。 \n```JavaScript\nimport QtQuick 2.2\nimport Painter 1.0\n\nPainterPlugin \n{\n        // 在这里声明一个window，HelloWorldWindow指向HelloWorldWindow.qml\n        HelloWorldWindow\n        {\n                id: window//对应 HelloWorldWindow.qml的id\n        }\n\n        Component.onCompleted: \n        {\n                var qmToolbar = alg.ui.addWidgetToPluginToolBar(\"toolbar.qml\")\n                qmToolbar.windowReference = window//这里调用了window\n\n        }\n\n}\n\n```\n* 这就是向Substance Painter添加基本插件的小例子.\n* ref：http://peterhanshawart.blogspot.com/2017/11/making-hello-world-substance-painter.html\n\n## 例子2\n```\nAlgWindow\n{\n    Item\n    {\n        Item \n        {\n            Row\n            {\n                Alglabel {}\n                AlgTextInput {}\n            }\n            Row\n            {\n                AlgComboBox {}\n                AlgLabel {}\n                AlgComboBox {}\n            }\n            Row\n            {\n                AlgCheckBox {}\n            }\n        }\n        GridView\n        {\n            ListElement {}\n        }\n        Item \n        {\n            Row \n            {\n                Rectangle {}\n                FileDialog {}\n                AlgButton {}\n                AlgButton {}\n            }\n        }\n    }\n}\n```","slug":"SubstancePainter-Plugin-Study-Notes","published":1,"updated":"2020-03-14T08:13:15.540Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7rc2b940000mop46w7jgesk","content":"<h1 id=\"Substance-Painter-Plugin-学习笔记\"><a href=\"#Substance-Painter-Plugin-学习笔记\" class=\"headerlink\" title=\"Substance Painter Plugin 学习笔记\"></a>Substance Painter Plugin 学习笔记</h1><h2 id=\"First-steps\"><a href=\"#First-steps\" class=\"headerlink\" title=\"First steps\"></a>First steps</h2><p>核心思路：<br><img src=\"/2020/03/14/SubstancePainter-Plugin-Study-Notes/2020-03-13-21-25-23.png\" alt></p>\n<a id=\"more\"></a>\n\n<h3 id=\"Plugin-skeleton\"><a href=\"#Plugin-skeleton\" class=\"headerlink\" title=\"Plugin skeleton\"></a>Plugin skeleton</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> QtQuick <span class=\"number\">2.2</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Painter <span class=\"number\">1.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">PainterPlugin &#123;</span><br><span class=\"line\">        <span class=\"comment\">// starts a timer that will trigger the 'onTick' callback at regular interval</span></span><br><span class=\"line\">        <span class=\"comment\">// 启动一个计时器，该计时器将定期触发“ on tick”回调</span></span><br><span class=\"line\">        tickIntervalMS: <span class=\"number\">-1</span> <span class=\"comment\">// -1 禁用（默认值）</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// starts a JSON server on the given port:</span></span><br><span class=\"line\">        <span class=\"comment\">// 在给定的端口上启动json服务器</span></span><br><span class=\"line\">        <span class=\"comment\">// you send javascript that will be evaluated and you get the result in JSON format</span></span><br><span class=\"line\">        <span class=\"comment\">//您发送将被评估的javascript，并以json格式获取结果</span></span><br><span class=\"line\">        jsonServerPort: <span class=\"number\">-1</span> <span class=\"comment\">// -1 禁用（默认值）</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Component.onCompleted: &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Called after the object has been instantiated.</span></span><br><span class=\"line\">                <span class=\"comment\">// 在实例化对象之后调用。</span></span><br><span class=\"line\">                <span class=\"comment\">// This can be used to execute script code at startup,</span></span><br><span class=\"line\">                <span class=\"comment\">// 可用于在启动时执行脚本代码，</span></span><br><span class=\"line\">                <span class=\"comment\">// once the full QML environment has been established.</span></span><br><span class=\"line\">                <span class=\"comment\">// 现已建立完整的qml环境</span></span><br><span class=\"line\">                alg.log.info(<span class=\"string\">\"Component.onCompleted\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        onTick: &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Do something at each tick, depending on tickIntervalMS value</span></span><br><span class=\"line\">                <span class=\"comment\">// 在每个滴答声中有一些东西，具体取决于滴答间隔ms值</span></span><br><span class=\"line\">                alg.log.info(<span class=\"string\">\"onTick\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        onConfigure: &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Do something when the user request the plugin configuration panel</span></span><br><span class=\"line\">                <span class=\"comment\">// 当用户请求插件配置面板时执行某些操作</span></span><br><span class=\"line\">                alg.log.info(<span class=\"string\">\"onConfigure\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        onApplicationStarted: &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Called when the application is started</span></span><br><span class=\"line\">                <span class=\"comment\">// 启动应用程序时调用</span></span><br><span class=\"line\">                alg.log.info(<span class=\"string\">\"onApplicationStarted\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        onNewProjectCreated: &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Called when a new project is created, before the onProjectOpened callback</span></span><br><span class=\"line\">                <span class=\"comment\">// 在创建新项目时调用，在on project打开回调之前调用</span></span><br><span class=\"line\">                alg.log.info(<span class=\"string\">\"onNewProjectCreated\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        onProjectOpened: &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Called when the project is fully loaded</span></span><br><span class=\"line\">                <span class=\"comment\">// 在项目完全加载时调用</span></span><br><span class=\"line\">                alg.log.info(<span class=\"string\">\"onProjectOpened\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        onProjectAboutToClose: &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Called before project unload</span></span><br><span class=\"line\">                <span class=\"comment\">// 在项目卸载之前调用</span></span><br><span class=\"line\">                alg.log.info(<span class=\"string\">\"onProjectAboutToClose\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        onProjectAboutToSave: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">destinationUrl</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// Called before a save, 'destination_url' parameter contains the save destination</span></span><br><span class=\"line\">                <span class=\"comment\">// 在保存之前调用，“目标网址”参数包含保存目标</span></span><br><span class=\"line\">                alg.log.info(<span class=\"string\">\"onProjectAboutToSave: \"</span>+destinationUrl)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        onProjectSaved: &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Called after the project was saved</span></span><br><span class=\"line\">                <span class=\"comment\">// 项目保存后调用</span></span><br><span class=\"line\">                alg.log.info(<span class=\"string\">\"onProjectSaved\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        onComputationStatusChanged: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">isComputing</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// Called when the state of the engine computing stacks content change.</span></span><br><span class=\"line\">                <span class=\"comment\">// 当引擎计算堆栈的状态更改内容时调用。</span></span><br><span class=\"line\">                <span class=\"comment\">// If the stack content is computed, 'isComputing' parameter will be false</span></span><br><span class=\"line\">                <span class=\"comment\">// 如果计算堆栈内容，则“正在计算”参数为false</span></span><br><span class=\"line\">                alg.log.info(<span class=\"string\">\"onComputationStatusChanged: \"</span>+isComputing)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        onExportAboutToStart: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">maps</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// Called just before the export process starts.</span></span><br><span class=\"line\">                <span class=\"comment\">// 在导出过程开始之前调用。</span></span><br><span class=\"line\">                <span class=\"comment\">// 'maps' is the list of filepaths expected to be written.</span></span><br><span class=\"line\">                <span class=\"comment\">// “映射”是预期要写入的文件路径的列表。</span></span><br><span class=\"line\">                alg.log.info(<span class=\"string\">\"onExportAboutToStart: \"</span>)</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> stackName <span class=\"keyword\">in</span> maps) &#123;</span><br><span class=\"line\">                    alg.log.info(stackName);</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> filePath <span class=\"keyword\">in</span> maps[stackName]) &#123;</span><br><span class=\"line\">                        alg.log.info(maps[stackName][filePath]);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Example:</span></span><br><span class=\"line\">                <span class=\"comment\">// Open the 'PreviewSphere' sample, set 'C:/tmp' as export path, choose 'png' as export</span></span><br><span class=\"line\">                <span class=\"comment\">// 打开“预览球”示例，将“ c：/ tmp”设置为导出路径，选择“ png”作为导出</span></span><br><span class=\"line\">                <span class=\"comment\">// format and select the 'PBR MetalRough' config, the example above will output:</span></span><br><span class=\"line\">                <span class=\"comment\">// 格式化并选择“ pbr metal raw”配置，以上示例将输出：</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// onExportAboutToStart:</span></span><br><span class=\"line\">                <span class=\"comment\">// Sphere</span></span><br><span class=\"line\">                <span class=\"comment\">// c:/tmp/Sphere_Sphere_BaseColor.png</span></span><br><span class=\"line\">                <span class=\"comment\">// c:/tmp/Sphere_Sphere_Roughness.png</span></span><br><span class=\"line\">                <span class=\"comment\">// c:/tmp/Sphere_Sphere_Metallic.png</span></span><br><span class=\"line\">                <span class=\"comment\">// c:/tmp/Sphere_Sphere_Normal.png</span></span><br><span class=\"line\">                <span class=\"comment\">// c:/tmp/Sphere_Sphere_Height.png</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Please note the 'Opacity' and 'Emissive' maps are not listed here because they</span></span><br><span class=\"line\">                <span class=\"comment\">// 请注意，此处未列出“不透明”和“发射”地图，因为它们</span></span><br><span class=\"line\">                <span class=\"comment\">// can not be exported with this sample while the actual export will warn about it.</span></span><br><span class=\"line\">                <span class=\"comment\">// 不能与该样品一起出口，但实际出口会发出警告。</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        onExportFinished: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">status, maps</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// Called right after the export process ends.</span></span><br><span class=\"line\">                <span class=\"comment\">// 在导出过程结束后立即调用</span></span><br><span class=\"line\">                <span class=\"comment\">// 'status' is the error status returned by the process. Available values are:</span></span><br><span class=\"line\">                <span class=\"comment\">// “状态”是进程返回的错误状态。,可用值为：</span></span><br><span class=\"line\">                <span class=\"comment\">// - Export.Status_Ok</span></span><br><span class=\"line\">                <span class=\"comment\">// - Export.Status_Warn</span></span><br><span class=\"line\">                <span class=\"comment\">// - Export.Status_Error</span></span><br><span class=\"line\">                <span class=\"comment\">// - Export.Status_Canceled</span></span><br><span class=\"line\">                <span class=\"comment\">// 'maps' is the list of filepaths effectively exported.</span></span><br><span class=\"line\">                <span class=\"comment\">// “映射”是有效导出的文件路径的列表。</span></span><br><span class=\"line\">                alg.log.info(<span class=\"string\">\"onExportFinished: \"</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (status != Export.Status_Ok) &#123;</span><br><span class=\"line\">                    alg.log.error(<span class=\"string\">\"Export failed.\"</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> stackName <span class=\"keyword\">in</span> maps) &#123;</span><br><span class=\"line\">                        alg.log.info(stackName);</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> filePath <span class=\"keyword\">in</span> maps[stackName]) &#123;</span><br><span class=\"line\">                            alg.log.info(maps[stackName][filePath]);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Plugin meta data:<br>Information about the plugin can be provided by creating a plugin.json file in the plugin directory. Available properties are:<br>可以通过在plugin目录中创建一个plugin.json文件来提供有关该插件的信息。,可用属性为：<br>description: plugin description, displayed in the plugin about dialog.<br>url: project homepage, displayed in the plugin about dialog. Warning, the scheme is mandatory to create a clickable link.<br>version: plugin version.<br>license: plugin license.<br>min_api_version: required minimal scripting API version.<br>Example:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"string\">\"description\"</span>: <span class=\"string\">\"This is a sample plugin\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"url\"</span>: <span class=\"string\">\"https://www.allegorithmic.com\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"version\"</span>: <span class=\"string\">\"0.1.0\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"license\"</span>: <span class=\"string\">\"&lt;a href=\\\"https://opensource.org/licenses/MIT\\\"&gt;MIT&lt;/a&gt;\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"Custom-UI\"><a href=\"#Custom-UI\" class=\"headerlink\" title=\"Custom UI\"></a>Custom UI</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> QtQuick <span class=\"number\">2.2</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Painter <span class=\"number\">1.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">PainterPlugin &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在实例化对象之后调用。</span></span><br><span class=\"line\">        <span class=\"comment\">// 可用于在启动时执行脚本代码，</span></span><br><span class=\"line\">        <span class=\"comment\">// 建立环境</span></span><br><span class=\"line\">        Component.onCompleted: &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 创建一个toolbar 按钮</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> t = alg.ui.addToolBarWidget(<span class=\"string\">\"dock.qml\"</span>);</span><br><span class=\"line\">                t.rectangle.color = <span class=\"string\">\"blue\"</span></span><br><span class=\"line\">                t = alg.ui.addToolBarWidget(<span class=\"string\">\"dock.qml\"</span>);</span><br><span class=\"line\">                t.rectangle.color = <span class=\"string\">\"green\"</span></span><br><span class=\"line\">                t = alg.ui.addToolBarWidget(<span class=\"string\">\"dock.qml\"</span>);</span><br><span class=\"line\">                t.rectangle.color = <span class=\"string\">\"yellow\"</span></span><br><span class=\"line\">                t = alg.ui.addToolBarWidget(<span class=\"string\">\"dock.qml\"</span>);</span><br><span class=\"line\">                t.rectangle.color = <span class=\"string\">\"purple\"</span></span><br><span class=\"line\">                <span class=\"comment\">// 创建停靠小部件</span></span><br><span class=\"line\">                alg.ui.addDockWidget(<span class=\"string\">\"dock.qml\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> QtQuick <span class=\"number\">2.3</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> QtQuick.Window <span class=\"number\">2.2</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> QtQuick.Layouts <span class=\"number\">1.2</span></span><br><span class=\"line\"></span><br><span class=\"line\">Item &#123;</span><br><span class=\"line\">        width: <span class=\"number\">24</span></span><br><span class=\"line\">        height: <span class=\"number\">24</span></span><br><span class=\"line\">        objectName: <span class=\"string\">\"My plugin UI\"</span></span><br><span class=\"line\">        property alias rectangle: rect</span><br><span class=\"line\"></span><br><span class=\"line\">        Rectangle &#123;</span><br><span class=\"line\">                id: rect</span><br><span class=\"line\">                anchors.fill: parent</span><br><span class=\"line\">                color: <span class=\"string\">\"red\"</span></span><br><span class=\"line\">                MouseArea &#123;</span><br><span class=\"line\">                        id: mouseArea</span><br><span class=\"line\">                        anchors.fill: parent</span><br><span class=\"line\">                        onClicked: &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">var</span> ok = alg.mapexport.showExportDialog();<span class=\"comment\">//打开导出窗口  alg是指Javascript API</span></span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (ok) &#123;</span><br><span class=\"line\">                                        alg.log.info(<span class=\"string\">\"Export successful!\"</span>)</span><br><span class=\"line\">                                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                        alg.log.warn(<span class=\"string\">\"Export cancelled!\"</span>)</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Javascript-API\"><a href=\"#Javascript-API\" class=\"headerlink\" title=\"Javascript API\"></a>Javascript API</h2><p>Namespace: alg</p>\n<h3 id=\"alg-Members\"><a href=\"#alg-Members\" class=\"headerlink\" title=\"alg.Members\"></a>alg.Members</h3><p><static> documents_directory 当前substance 文件所在文件夹路径<br>Properties:<br>Name                Type    Description<br>documents_directory string  Path to Substance Painter documents folder</static></p>\n<p><static> plugin_root_directory 当前插件所在文件夹路径<br>Properties:<br>Name                    Type    Description<br>plugin_root_directory   string  Root directory of the plugin</static></p>\n<p><static> version<br>Properties:<br>Name            Type    Description<br>version.api     string  JavaScript api version 当前javascript api 版本<br>version.painter string  Substance Painter version 当前substance painter 版本</static></p>\n<h3 id=\"alg-baking\"><a href=\"#alg-baking\" class=\"headerlink\" title=\"alg. baking\"></a>alg. baking</h3><p>管理已打开项目的烘培</p>\n<p><static> bake(textureSetName)<br>烘焙具有当前烘焙参数的纹理集的贴图<br>Parameters:<br>Name            Type    Description<br>textureSetName  string  The texture set name</static></p>\n<p>Throws:<br>alg.baking.BakingError</p>\n<p><static> commonBakingParameters()<br>从当前的项目里获得通用烘培设置<br>Throws:<br>alg.baking.BakingError<br>Returns:<br>The baking parameters as a JSON object<br>Type<br>object<br>Example</static></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Form of the common baking parameters</span></span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">        commonParameters: &#123;</span><br><span class=\"line\">          Apply_Diffusion: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          Dilation_width: <span class=\"number\">1</span>,</span><br><span class=\"line\">          Output_Size: [<span class=\"number\">9</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        detailParameters: &#123;</span><br><span class=\"line\">          Antialiasing: <span class=\"string\">\"None\"</span>,</span><br><span class=\"line\">          Average_Normals: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          Cage_File: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">          High_Definition_Meshes: [],</span><br><span class=\"line\">          High_poly_mesh_suffix: <span class=\"string\">\"_high\"</span>,</span><br><span class=\"line\">          Ignore_Backface: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          Low_poly_mesh_suffix: <span class=\"string\">\"_low\"</span>,</span><br><span class=\"line\">          Match: <span class=\"string\">\"Always\"</span>,</span><br><span class=\"line\">          Max_Frontal_Distance: <span class=\"number\">0.01</span>,</span><br><span class=\"line\">          Max_Rear_Distance: <span class=\"number\">0.01</span>,</span><br><span class=\"line\">          Relative_to_Bounding_Box: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          Use_Cage: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<p>待续</p>\n<h3 id=\"alg-display\"><a href=\"#alg-display\" class=\"headerlink\" title=\"alg.display\"></a>alg.display</h3><p>管理项目的显示设置</p>\n<p><static> getColorLutResource()<br>获得当前项目的色彩配置LUT的URL</static></p>\n<p><static> getEnvironmentResource()<br>获得当前项目的environment map的URL</static></p>\n<p><static> setColorLutResource(newUrl)<br>设置当前项目的颜色配置文件lut的URL</static></p>\n<p><static> setEnvironmentResource(newUrl)<br>设置当前项目的环境图的URL</static></p>\n<h3 id=\"alg-ui\"><a href=\"#alg-ui\" class=\"headerlink\" title=\"alg.ui\"></a>alg.ui</h3><p>Ui 实用程序</p>\n<p><static> addDockWidget(qmlFileUrl)<br>从qml文件创建小部件，然后将其作为“停靠小部件”添加到主窗口<br>Name        Type    Description<br>qmlFileUrl  string  qml file to be loaded. Can be an absolute url or a path relative to the plugin directory.</static></p>\n<p><static> addToolBarWidget(qmlFileUrl)<br>从qml文件创建小部件，然后将其作为“工具栏”添加到主窗口。<br>Name        Type    Description<br>qmlFileUrl  string  qml file to be loaded. Can be an absolute url or a path relative to the plugin directory.</static></p>\n<p><static> addWidgetToPluginToolBar(qmlFileUrl)<br>从qml文件创建小部件，然后将其添加到插件工具栏。<br>Name        Type    Description<br>qmlFileUrl  string  qml file to be loaded. Can be an absolute url or a path relative to the plugin directory.</static></p>\n<p><static> clickButton(name)<br>Simulate a click on a button.</static></p>\n<p>Name    Type    Description<br>name    string  the object name of the button</p>\n<h3 id=\"alg-subprocess\"><a href=\"#alg-subprocess\" class=\"headerlink\" title=\"alg. subprocess\"></a>alg. subprocess</h3><p>Spawn new processes. All processes are started from the plugin root directory.<br>产生新进程。,所有进程均从插件的根目录启动。</p>\n<p><static> call(command)<br>Run command. Wait for command to complete, then return the returncode.<br>运行命令,等待命令完成，然后返回返回码</static></p>\n<p>Name    Type    Description<br>command    string | Array.<string>    The command to be launched</string></p>\n<p><static> check_call(command)<br>Run command. Wait for command to complete. If the return code was zero then return, otherwise raise an error.<br>运行命令,等待命令完成。,如果返回码为零，则返回，否则返回错误。</static></p>\n<p>Name    Type    Description<br>command    string | Array.<string>    The command to be launched</string></p>\n<p><static> check_output(command)<br>Run command. Wait for command to complete and return its standard output as a string. Raise an error if the return code is non-zero.<br>运行命令。,等待命令完成并以字符串形式返回其标准输出。,如果返回码不为零，则会引发错误</static></p>\n<p>Name    Type    Description<br>command    string | Array.<string>    The command to be launched</string></p>\n<p><static> start(command [, callback])<br>Start the given command asynchronously.<br>异步启动给定命令。<br>command    string | Array.<string>        The command to be launched<br>callback    alg.subprocess~processEndedCallback    <optional><br>Callback called when the command terminates</optional></string></static></p>\n<h2 id=\"例子1\"><a href=\"#例子1\" class=\"headerlink\" title=\"例子1\"></a>例子1</h2><p>substance painter  hello world 窗口</p>\n<ul>\n<li>首先需要有一个定义主入口点的qml文件main. </li>\n</ul>\n<ol>\n<li>C:\\Users\\sunyuxiang\\Documents\\Allegorithmic\\Substance Painter\\plugins</li>\n<li>在此处创建一个名为“ HelloPlugin”的文件夹 </li>\n<li>在插件内，创建两个文件  <pre><code>* plugin.json \n* main.qml </code></pre></li>\n<li>打开main.qml文件写入</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> QtQuick <span class=\"number\">2.2</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Painter <span class=\"number\">1.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">PainterPlugin </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        Component.onCompleted: </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                alg.log.info(<span class=\"string\">\"hello world!\"</span>)<span class=\"comment\">//注意这里，alg.log.info()等于python里面的print()</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>填写JSON文件：</li>\n</ul>\n<ol>\n<li>JSON文件包含插件的元数据，在这里显示.<br><img src=\"/2020/03/14/SubstancePainter-Plugin-Study-Notes/2020-03-06-10-45-09.png\" alt><br><img src=\"/2020/03/14/SubstancePainter-Plugin-Study-Notes/2020-03-06-10-43-52.png\" alt></li>\n<li>我们知道json文件是键值对,观察一下现有插件的json文件,然后修改一后面的值改为.<br><img src=\"/2020/03/14/SubstancePainter-Plugin-Study-Notes/2020-03-06-10-47-53.png\" alt></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"description\"</span>: <span class=\"string\">\"This is a sample plugin to print hello world\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"url\"</span>: <span class=\"string\">\"https://test\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"version\"</span>: <span class=\"string\">\"0.1.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"license\"</span>: <span class=\"string\">\"&lt;a href=\\\"https://opensource.org/licenses/MIT\\\"&gt;MIT&lt;/a&gt;\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>然后打开substance painter</li>\n</ul>\n<ol>\n<li>可以看到log文件已经打印出了hello world<br><img src=\"/2020/03/14/SubstancePainter-Plugin-Study-Notes/2020-03-06-10-56-41.png\" alt></li>\n<li>plugins下的对应插件名字下面的about也可以正常工作</li>\n<li>现在 我们可以看到插件的加载，还可以看到plugin.json文件的关于窗口信息.</li>\n</ol>\n<ul>\n<li>添加一个窗口</li>\n</ul>\n<ol>\n<li>在我们的HelloPlugin目录中创建一个HelloWorldWindow.qml.</li>\n<li>编辑文件，添加代码来定义一个简单的窗口。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import AlgWidgets 1.0 &#x2F;&#x2F;窗口类导入</span><br><span class=\"line\"></span><br><span class=\"line\">AlgWindow</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 属性就像对象类型上的变量</span><br><span class=\"line\">    id: window&#x2F;&#x2F;对应 main.qml的id 这个id很有用，因为它允许我们在插件的其他位置引用该对象，访问其可见性之类的属性。  </span><br><span class=\"line\">    title: &quot;hello world window&quot;</span><br><span class=\"line\">    visible: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>现在，我们有一个简单的窗口，但是在看到窗口之前，我们需要在main.qml文件中实例化它。 </li>\n</ul>\n<ol>\n<li>编辑main.qml<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> QtQuick <span class=\"number\">2.2</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Painter <span class=\"number\">1.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">PainterPlugin </span><br><span class=\"line\">&#123;       </span><br><span class=\"line\">        HelloWorldWindow<span class=\"comment\">// 在这里声明一个window，HelloWorldWindow指向HelloWorldWindow.qml</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                id: <span class=\"built_in\">window</span><span class=\"comment\">//对应 HelloWorldWindow.qml的id</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Component.onCompleted: </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                alg.log.info(<span class=\"string\">\"hello world!\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>现在打开substance painter 禁用插件在启用插件就会看到该窗口弹出，这是因为在加载插件时首先实例化该窗口（？），我们稍后将解决此问题。 </li>\n</ol>\n<ul>\n<li>创建一个按钮：</li>\n</ul>\n<ol>\n<li>接下来创建一个按钮来替代禁用/启用</li>\n<li>打开“ HelloWorldWindow.qml”文件。</li>\n<li>我们将添加三件事： <pre><code>* 一系列的布局元素。 \n* 一个标签。 \n* 一个按钮</code></pre></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> AlgWidgets <span class=\"number\">1.0</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//下面这些模块是UI布局需要的</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> QtQuick <span class=\"number\">2.7</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> QtQuick.Layouts <span class=\"number\">1.3</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\".\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">AlgWindow</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    id: <span class=\"built_in\">window</span><span class=\"comment\">//对应 main.qml的id</span></span><br><span class=\"line\">    title: <span class=\"string\">\"hello world window\"</span></span><br><span class=\"line\">    visible: <span class=\"literal\">true</span><span class=\"comment\">//注意这里</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ColumnLayout <span class=\"comment\">//也可以用 RowLayout这里定义了一系列的布局元素 </span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        id: horizontalLayout</span><br><span class=\"line\">        anchors.fill: parent</span><br><span class=\"line\"></span><br><span class=\"line\">        Rectangle <span class=\"comment\">//这里定义了一系列的布局元素 </span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            id: buttonBar</span><br><span class=\"line\">            anchors.left: parent.left</span><br><span class=\"line\">            anchors.right: parent.right</span><br><span class=\"line\"></span><br><span class=\"line\">            ColumnLayout<span class=\"comment\">//也可以用 RowLayout这里定义了一系列的布局元素 </span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                anchors.fill:parent</span><br><span class=\"line\"></span><br><span class=\"line\">                AlgLabel<span class=\"comment\">//一个标签</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    id: buttonLabel</span><br><span class=\"line\">                    font.pixelSize: <span class=\"number\">14</span></span><br><span class=\"line\">                    font.bold: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    text: <span class=\"string\">\"Press Me\"</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                AlgButton<span class=\"comment\">//一个按钮</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    text: <span class=\"string\">\"Say Hello!\"</span></span><br><span class=\"line\">                    <span class=\"comment\">//Layout.preferredWidth: Style.widgets.buttonWidth</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    onClicked:</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        alg.log.info(<span class=\"string\">\"hello World\"</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>1. QML窗口是使用一系列嵌套的布局对象创建的-为了达到我们的目的，我们将使用列，矩形和行。 \n2. 我们需要添加其他导入语句来访问这些对象类型-QtQuick和QtQuick.Layouts。\n3. 该列表示总体布局-元素将按照添加顺序堆叠在此形状中。 \n4. 矩形允许我们使用子布局填充此列的分区。 \n5. 最后，行布局允许我们添加将按照添加顺序从左到右呈现的元素。 \n6. 在行布局中添加AlgLabel和AlgButton将两个新元素添加到我们的窗口中。 \n7. 最后，为按钮定义“ onClicked”事件将替换启动时登录main.qml的位置。 </code></pre><ul>\n<li><p>重新加载脚本：<br>可以使用painter中的Plugins-&gt; HelloPlugin-&gt; Reload  菜单即时重新加载脚本。在后面debug和尝试过程中这个超级有用，避免了我们要重新开关软件。</p>\n</li>\n<li><p>将插件添加到工具栏：</p>\n</li>\n</ul>\n<ol>\n<li>现在如果关闭插件窗口，则必须通过reload插件才能再次打开插件窗口。 </li>\n<li>让我们在工具栏上添加一个按钮，来替代每次reload调用窗口。</li>\n<li>工具栏中的按钮将非常简单，要做的就是在按下插件窗口时切换可见性。 </li>\n<li>首先，我们将通过改变visible值的true改为false,让插件窗口不会加载自动弹出。</li>\n<li>创建一个名为“ toolbar.qml ” 的新文件，并且与我们之前所做的类似,仅一排，带有一个按钮。<br>比较重要的是-插件加载时，属性变量“ windowReference”将由我们的插件填充。<br>由于windowReference在本地以null开头，因此我们稍后将对其的调用包装在try / catch块中。<br>如果脚本中其他地方的内容使我们无法创建窗口，那么这将阻止崩溃，我们可以将信息打印到控制台。 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import QtQuick 2.7</span><br><span class=\"line\">import QtQuick.controls 2.0</span><br><span class=\"line\">import AlgWidgets 1.0</span><br><span class=\"line\"></span><br><span class=\"line\">Row &#x2F;&#x2F;现在是横向的如果需要侧边的话就是AlgToolBarButton</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    property var windowReference : null</span><br><span class=\"line\"></span><br><span class=\"line\">    Button</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        id: rect</span><br><span class=\"line\">        width: 30</span><br><span class=\"line\">        height: 30</span><br><span class=\"line\"></span><br><span class=\"line\">        onClicked:</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            try </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                windowReference.visible &#x3D; true</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch(err) </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                alg.log.exception(err)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>最后，在“ main.qml”文件中，我们将添加一个新的工具栏小部件，该小部件将把“ toolbar.qml”实例化为工具栏上的按钮。<br>我们还使用其ID将HelloWorldWindow实例分配给工具栏按钮中的windowReference变量。 <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> QtQuick <span class=\"number\">2.2</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Painter <span class=\"number\">1.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">PainterPlugin </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在这里声明一个window，HelloWorldWindow指向HelloWorldWindow.qml</span></span><br><span class=\"line\">        HelloWorldWindow</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                id: <span class=\"built_in\">window</span><span class=\"comment\">//对应 HelloWorldWindow.qml的id</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Component.onCompleted: </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> qmToolbar = alg.ui.addWidgetToPluginToolBar(<span class=\"string\">\"toolbar.qml\"</span>)</span><br><span class=\"line\">                qmToolbar.windowReference = <span class=\"built_in\">window</span><span class=\"comment\">//这里调用了window</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>这就是向Substance Painter添加基本插件的小例子.</li>\n<li>ref：<a href=\"http://peterhanshawart.blogspot.com/2017/11/making-hello-world-substance-painter.html\" target=\"_blank\" rel=\"noopener\">http://peterhanshawart.blogspot.com/2017/11/making-hello-world-substance-painter.html</a></li>\n</ul>\n<h2 id=\"例子2\"><a href=\"#例子2\" class=\"headerlink\" title=\"例子2\"></a>例子2</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AlgWindow</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Item</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Item </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Row</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Alglabel &#123;&#125;</span><br><span class=\"line\">                AlgTextInput &#123;&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Row</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                AlgComboBox &#123;&#125;</span><br><span class=\"line\">                AlgLabel &#123;&#125;</span><br><span class=\"line\">                AlgComboBox &#123;&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Row</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                AlgCheckBox &#123;&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        GridView</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ListElement &#123;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Item </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Row </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Rectangle &#123;&#125;</span><br><span class=\"line\">                FileDialog &#123;&#125;</span><br><span class=\"line\">                AlgButton &#123;&#125;</span><br><span class=\"line\">                AlgButton &#123;&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"melody":{"theme_color":{"enable":true,"main":"#2d6b96","paginator":"#6AA7D2","button_hover":"#3B8BC4","text_selection":"#6AA7D2","link_color":"#858585","hr_color":"#A4D8FA","tag_start_color":"#A4D8FA","tag_end_color":"#6AA7D2","header_text_color":"#EEEEEE","footer_text_color":"#EEEEEE"},"menu":{"文章":"/","归档":"/archives"},"favicon":"/melody-favicon.ico","pwa":{"enable":false,"manifest":"/manifest.json"},"highlight_theme":"light","algolia_search":{"enable":false,"hits":{"per_page":10}},"local_search":{"enable":false},"mathjax":{"enable":false,"cdn":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"},"katex":{"enable":false,"cdn":{"css":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css"}},"fireworks":true,"google_analytics":null,"tencent_analytics":null,"stylesheets":["/css/index.css"],"scripts":["/js/utils.js","/js/fancybox.js","/js/sidebar.js","/js/copy.js","/js/fireworks.js","/js/transition.js","/js/scroll.js","/js/head.js"],"cdn":{"css":{"fontawesome":"https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"},"js":{"anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","jquery":"https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","velocity":"https://cdn.jsdelivr.net/npm/velocity-animate@latest/velocity.min.js","velocity-ui":"https://cdn.jsdelivr.net/npm/velocity-ui-pack@latest/velocity.ui.min.js"}},"avatar":null,"top_img":true,"post_meta":{"date_type":"created","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"slide":{"separator":"---","separator_vertical":"--","charset":"utf-8","theme":"black","mouseWheel":false,"transition":"slide","transitionSpeed":"default","parallaxBackgroundImage":"","parallaxBackgroundSize":"","parallaxBackgroundHorizontal":null,"parallaxBackgroundVertical":null},"addThis":{"enable":false},"disqus":{"enable":false},"since":2013,"footer_custom_text":"Hi, welcome to my <a href=\"https://sunyuxianggit.github.io/\">blog</a>!","ICP":{"enable":false},"busuanzi":{"enable":true,"site_uv":true,"site_uv_header":"<i class=\"fa fa-user\"></i>","site_uv_footer":null,"site_pv":true,"site_pv_header":"<i class=\"fa fa-eye\"></i>","site_pv_footer":null,"page_pv":true,"page_pv_header":"<i class=\"fa fa-file-o\"></i>","page_pv_footer":null},"follow":{"enable":true,"url":"https://github.com/sunyuxianggit","text":"Follow Me"},"google_adsense":{"enable":false,"js":"//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js","client":"ca-pub-...........","enable_page_level_ads":true},"rootConfig":{"title":"SunYuxiangのBlog","subtitle":"好记性,不如烂笔头.今天你要写点什么？","description":"","author":"Sun Yuxiang","language":"zh-Hans","timezone":"","url":"http://yoursite.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":true,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"melody","server":{"port":4000,"log":false,"compress":false,"header":true,"cache":false},"deploy":{"type":"git","repo":"https://github.com/sunyuxianggit/sunyuxianggit.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"category_generator":{"per_page":10},"feed":{"type":"atom","limit":20,"hub":"","content":true,"content_limit":140,"content_limit_delim":"","order_by":"-date","autodiscovery":true,"template":"","path":"atom.xml"},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"sitemap":{"path":"sitemap.xml","rel":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true}}}}},"excerpt":"<h1 id=\"Substance-Painter-Plugin-学习笔记\"><a href=\"#Substance-Painter-Plugin-学习笔记\" class=\"headerlink\" title=\"Substance Painter Plugin 学习笔记\"></a>Substance Painter Plugin 学习笔记</h1><h2 id=\"First-steps\"><a href=\"#First-steps\" class=\"headerlink\" title=\"First steps\"></a>First steps</h2><p>核心思路：<br><img src=\"/2020/03/14/SubstancePainter-Plugin-Study-Notes/2020-03-13-21-25-23.png\" alt></p>","more":"<h3 id=\"Plugin-skeleton\"><a href=\"#Plugin-skeleton\" class=\"headerlink\" title=\"Plugin skeleton\"></a>Plugin skeleton</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> QtQuick <span class=\"number\">2.2</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Painter <span class=\"number\">1.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">PainterPlugin &#123;</span><br><span class=\"line\">        <span class=\"comment\">// starts a timer that will trigger the 'onTick' callback at regular interval</span></span><br><span class=\"line\">        <span class=\"comment\">// 启动一个计时器，该计时器将定期触发“ on tick”回调</span></span><br><span class=\"line\">        tickIntervalMS: <span class=\"number\">-1</span> <span class=\"comment\">// -1 禁用（默认值）</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// starts a JSON server on the given port:</span></span><br><span class=\"line\">        <span class=\"comment\">// 在给定的端口上启动json服务器</span></span><br><span class=\"line\">        <span class=\"comment\">// you send javascript that will be evaluated and you get the result in JSON format</span></span><br><span class=\"line\">        <span class=\"comment\">//您发送将被评估的javascript，并以json格式获取结果</span></span><br><span class=\"line\">        jsonServerPort: <span class=\"number\">-1</span> <span class=\"comment\">// -1 禁用（默认值）</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Component.onCompleted: &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Called after the object has been instantiated.</span></span><br><span class=\"line\">                <span class=\"comment\">// 在实例化对象之后调用。</span></span><br><span class=\"line\">                <span class=\"comment\">// This can be used to execute script code at startup,</span></span><br><span class=\"line\">                <span class=\"comment\">// 可用于在启动时执行脚本代码，</span></span><br><span class=\"line\">                <span class=\"comment\">// once the full QML environment has been established.</span></span><br><span class=\"line\">                <span class=\"comment\">// 现已建立完整的qml环境</span></span><br><span class=\"line\">                alg.log.info(<span class=\"string\">\"Component.onCompleted\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        onTick: &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Do something at each tick, depending on tickIntervalMS value</span></span><br><span class=\"line\">                <span class=\"comment\">// 在每个滴答声中有一些东西，具体取决于滴答间隔ms值</span></span><br><span class=\"line\">                alg.log.info(<span class=\"string\">\"onTick\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        onConfigure: &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Do something when the user request the plugin configuration panel</span></span><br><span class=\"line\">                <span class=\"comment\">// 当用户请求插件配置面板时执行某些操作</span></span><br><span class=\"line\">                alg.log.info(<span class=\"string\">\"onConfigure\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        onApplicationStarted: &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Called when the application is started</span></span><br><span class=\"line\">                <span class=\"comment\">// 启动应用程序时调用</span></span><br><span class=\"line\">                alg.log.info(<span class=\"string\">\"onApplicationStarted\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        onNewProjectCreated: &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Called when a new project is created, before the onProjectOpened callback</span></span><br><span class=\"line\">                <span class=\"comment\">// 在创建新项目时调用，在on project打开回调之前调用</span></span><br><span class=\"line\">                alg.log.info(<span class=\"string\">\"onNewProjectCreated\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        onProjectOpened: &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Called when the project is fully loaded</span></span><br><span class=\"line\">                <span class=\"comment\">// 在项目完全加载时调用</span></span><br><span class=\"line\">                alg.log.info(<span class=\"string\">\"onProjectOpened\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        onProjectAboutToClose: &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Called before project unload</span></span><br><span class=\"line\">                <span class=\"comment\">// 在项目卸载之前调用</span></span><br><span class=\"line\">                alg.log.info(<span class=\"string\">\"onProjectAboutToClose\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        onProjectAboutToSave: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">destinationUrl</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// Called before a save, 'destination_url' parameter contains the save destination</span></span><br><span class=\"line\">                <span class=\"comment\">// 在保存之前调用，“目标网址”参数包含保存目标</span></span><br><span class=\"line\">                alg.log.info(<span class=\"string\">\"onProjectAboutToSave: \"</span>+destinationUrl)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        onProjectSaved: &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Called after the project was saved</span></span><br><span class=\"line\">                <span class=\"comment\">// 项目保存后调用</span></span><br><span class=\"line\">                alg.log.info(<span class=\"string\">\"onProjectSaved\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        onComputationStatusChanged: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">isComputing</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// Called when the state of the engine computing stacks content change.</span></span><br><span class=\"line\">                <span class=\"comment\">// 当引擎计算堆栈的状态更改内容时调用。</span></span><br><span class=\"line\">                <span class=\"comment\">// If the stack content is computed, 'isComputing' parameter will be false</span></span><br><span class=\"line\">                <span class=\"comment\">// 如果计算堆栈内容，则“正在计算”参数为false</span></span><br><span class=\"line\">                alg.log.info(<span class=\"string\">\"onComputationStatusChanged: \"</span>+isComputing)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        onExportAboutToStart: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">maps</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// Called just before the export process starts.</span></span><br><span class=\"line\">                <span class=\"comment\">// 在导出过程开始之前调用。</span></span><br><span class=\"line\">                <span class=\"comment\">// 'maps' is the list of filepaths expected to be written.</span></span><br><span class=\"line\">                <span class=\"comment\">// “映射”是预期要写入的文件路径的列表。</span></span><br><span class=\"line\">                alg.log.info(<span class=\"string\">\"onExportAboutToStart: \"</span>)</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> stackName <span class=\"keyword\">in</span> maps) &#123;</span><br><span class=\"line\">                    alg.log.info(stackName);</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> filePath <span class=\"keyword\">in</span> maps[stackName]) &#123;</span><br><span class=\"line\">                        alg.log.info(maps[stackName][filePath]);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Example:</span></span><br><span class=\"line\">                <span class=\"comment\">// Open the 'PreviewSphere' sample, set 'C:/tmp' as export path, choose 'png' as export</span></span><br><span class=\"line\">                <span class=\"comment\">// 打开“预览球”示例，将“ c：/ tmp”设置为导出路径，选择“ png”作为导出</span></span><br><span class=\"line\">                <span class=\"comment\">// format and select the 'PBR MetalRough' config, the example above will output:</span></span><br><span class=\"line\">                <span class=\"comment\">// 格式化并选择“ pbr metal raw”配置，以上示例将输出：</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// onExportAboutToStart:</span></span><br><span class=\"line\">                <span class=\"comment\">// Sphere</span></span><br><span class=\"line\">                <span class=\"comment\">// c:/tmp/Sphere_Sphere_BaseColor.png</span></span><br><span class=\"line\">                <span class=\"comment\">// c:/tmp/Sphere_Sphere_Roughness.png</span></span><br><span class=\"line\">                <span class=\"comment\">// c:/tmp/Sphere_Sphere_Metallic.png</span></span><br><span class=\"line\">                <span class=\"comment\">// c:/tmp/Sphere_Sphere_Normal.png</span></span><br><span class=\"line\">                <span class=\"comment\">// c:/tmp/Sphere_Sphere_Height.png</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Please note the 'Opacity' and 'Emissive' maps are not listed here because they</span></span><br><span class=\"line\">                <span class=\"comment\">// 请注意，此处未列出“不透明”和“发射”地图，因为它们</span></span><br><span class=\"line\">                <span class=\"comment\">// can not be exported with this sample while the actual export will warn about it.</span></span><br><span class=\"line\">                <span class=\"comment\">// 不能与该样品一起出口，但实际出口会发出警告。</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        onExportFinished: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">status, maps</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// Called right after the export process ends.</span></span><br><span class=\"line\">                <span class=\"comment\">// 在导出过程结束后立即调用</span></span><br><span class=\"line\">                <span class=\"comment\">// 'status' is the error status returned by the process. Available values are:</span></span><br><span class=\"line\">                <span class=\"comment\">// “状态”是进程返回的错误状态。,可用值为：</span></span><br><span class=\"line\">                <span class=\"comment\">// - Export.Status_Ok</span></span><br><span class=\"line\">                <span class=\"comment\">// - Export.Status_Warn</span></span><br><span class=\"line\">                <span class=\"comment\">// - Export.Status_Error</span></span><br><span class=\"line\">                <span class=\"comment\">// - Export.Status_Canceled</span></span><br><span class=\"line\">                <span class=\"comment\">// 'maps' is the list of filepaths effectively exported.</span></span><br><span class=\"line\">                <span class=\"comment\">// “映射”是有效导出的文件路径的列表。</span></span><br><span class=\"line\">                alg.log.info(<span class=\"string\">\"onExportFinished: \"</span>)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (status != Export.Status_Ok) &#123;</span><br><span class=\"line\">                    alg.log.error(<span class=\"string\">\"Export failed.\"</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> stackName <span class=\"keyword\">in</span> maps) &#123;</span><br><span class=\"line\">                        alg.log.info(stackName);</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> filePath <span class=\"keyword\">in</span> maps[stackName]) &#123;</span><br><span class=\"line\">                            alg.log.info(maps[stackName][filePath]);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Plugin meta data:<br>Information about the plugin can be provided by creating a plugin.json file in the plugin directory. Available properties are:<br>可以通过在plugin目录中创建一个plugin.json文件来提供有关该插件的信息。,可用属性为：<br>description: plugin description, displayed in the plugin about dialog.<br>url: project homepage, displayed in the plugin about dialog. Warning, the scheme is mandatory to create a clickable link.<br>version: plugin version.<br>license: plugin license.<br>min_api_version: required minimal scripting API version.<br>Example:<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"string\">\"description\"</span>: <span class=\"string\">\"This is a sample plugin\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"url\"</span>: <span class=\"string\">\"https://www.allegorithmic.com\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"version\"</span>: <span class=\"string\">\"0.1.0\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"license\"</span>: <span class=\"string\">\"&lt;a href=\\\"https://opensource.org/licenses/MIT\\\"&gt;MIT&lt;/a&gt;\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"Custom-UI\"><a href=\"#Custom-UI\" class=\"headerlink\" title=\"Custom UI\"></a>Custom UI</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> QtQuick <span class=\"number\">2.2</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Painter <span class=\"number\">1.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">PainterPlugin &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在实例化对象之后调用。</span></span><br><span class=\"line\">        <span class=\"comment\">// 可用于在启动时执行脚本代码，</span></span><br><span class=\"line\">        <span class=\"comment\">// 建立环境</span></span><br><span class=\"line\">        Component.onCompleted: &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 创建一个toolbar 按钮</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> t = alg.ui.addToolBarWidget(<span class=\"string\">\"dock.qml\"</span>);</span><br><span class=\"line\">                t.rectangle.color = <span class=\"string\">\"blue\"</span></span><br><span class=\"line\">                t = alg.ui.addToolBarWidget(<span class=\"string\">\"dock.qml\"</span>);</span><br><span class=\"line\">                t.rectangle.color = <span class=\"string\">\"green\"</span></span><br><span class=\"line\">                t = alg.ui.addToolBarWidget(<span class=\"string\">\"dock.qml\"</span>);</span><br><span class=\"line\">                t.rectangle.color = <span class=\"string\">\"yellow\"</span></span><br><span class=\"line\">                t = alg.ui.addToolBarWidget(<span class=\"string\">\"dock.qml\"</span>);</span><br><span class=\"line\">                t.rectangle.color = <span class=\"string\">\"purple\"</span></span><br><span class=\"line\">                <span class=\"comment\">// 创建停靠小部件</span></span><br><span class=\"line\">                alg.ui.addDockWidget(<span class=\"string\">\"dock.qml\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> QtQuick <span class=\"number\">2.3</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> QtQuick.Window <span class=\"number\">2.2</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> QtQuick.Layouts <span class=\"number\">1.2</span></span><br><span class=\"line\"></span><br><span class=\"line\">Item &#123;</span><br><span class=\"line\">        width: <span class=\"number\">24</span></span><br><span class=\"line\">        height: <span class=\"number\">24</span></span><br><span class=\"line\">        objectName: <span class=\"string\">\"My plugin UI\"</span></span><br><span class=\"line\">        property alias rectangle: rect</span><br><span class=\"line\"></span><br><span class=\"line\">        Rectangle &#123;</span><br><span class=\"line\">                id: rect</span><br><span class=\"line\">                anchors.fill: parent</span><br><span class=\"line\">                color: <span class=\"string\">\"red\"</span></span><br><span class=\"line\">                MouseArea &#123;</span><br><span class=\"line\">                        id: mouseArea</span><br><span class=\"line\">                        anchors.fill: parent</span><br><span class=\"line\">                        onClicked: &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">var</span> ok = alg.mapexport.showExportDialog();<span class=\"comment\">//打开导出窗口  alg是指Javascript API</span></span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (ok) &#123;</span><br><span class=\"line\">                                        alg.log.info(<span class=\"string\">\"Export successful!\"</span>)</span><br><span class=\"line\">                                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                                        alg.log.warn(<span class=\"string\">\"Export cancelled!\"</span>)</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Javascript-API\"><a href=\"#Javascript-API\" class=\"headerlink\" title=\"Javascript API\"></a>Javascript API</h2><p>Namespace: alg</p>\n<h3 id=\"alg-Members\"><a href=\"#alg-Members\" class=\"headerlink\" title=\"alg.Members\"></a>alg.Members</h3><p><static> documents_directory 当前substance 文件所在文件夹路径<br>Properties:<br>Name                Type    Description<br>documents_directory string  Path to Substance Painter documents folder</static></p>\n<p><static> plugin_root_directory 当前插件所在文件夹路径<br>Properties:<br>Name                    Type    Description<br>plugin_root_directory   string  Root directory of the plugin</static></p>\n<p><static> version<br>Properties:<br>Name            Type    Description<br>version.api     string  JavaScript api version 当前javascript api 版本<br>version.painter string  Substance Painter version 当前substance painter 版本</static></p>\n<h3 id=\"alg-baking\"><a href=\"#alg-baking\" class=\"headerlink\" title=\"alg. baking\"></a>alg. baking</h3><p>管理已打开项目的烘培</p>\n<p><static> bake(textureSetName)<br>烘焙具有当前烘焙参数的纹理集的贴图<br>Parameters:<br>Name            Type    Description<br>textureSetName  string  The texture set name</static></p>\n<p>Throws:<br>alg.baking.BakingError</p>\n<p><static> commonBakingParameters()<br>从当前的项目里获得通用烘培设置<br>Throws:<br>alg.baking.BakingError<br>Returns:<br>The baking parameters as a JSON object<br>Type<br>object<br>Example</static></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Form of the common baking parameters</span></span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">        commonParameters: &#123;</span><br><span class=\"line\">          Apply_Diffusion: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          Dilation_width: <span class=\"number\">1</span>,</span><br><span class=\"line\">          Output_Size: [<span class=\"number\">9</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        detailParameters: &#123;</span><br><span class=\"line\">          Antialiasing: <span class=\"string\">\"None\"</span>,</span><br><span class=\"line\">          Average_Normals: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          Cage_File: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">          High_Definition_Meshes: [],</span><br><span class=\"line\">          High_poly_mesh_suffix: <span class=\"string\">\"_high\"</span>,</span><br><span class=\"line\">          Ignore_Backface: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          Low_poly_mesh_suffix: <span class=\"string\">\"_low\"</span>,</span><br><span class=\"line\">          Match: <span class=\"string\">\"Always\"</span>,</span><br><span class=\"line\">          Max_Frontal_Distance: <span class=\"number\">0.01</span>,</span><br><span class=\"line\">          Max_Rear_Distance: <span class=\"number\">0.01</span>,</span><br><span class=\"line\">          Relative_to_Bounding_Box: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          Use_Cage: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n<p>待续</p>\n<h3 id=\"alg-display\"><a href=\"#alg-display\" class=\"headerlink\" title=\"alg.display\"></a>alg.display</h3><p>管理项目的显示设置</p>\n<p><static> getColorLutResource()<br>获得当前项目的色彩配置LUT的URL</static></p>\n<p><static> getEnvironmentResource()<br>获得当前项目的environment map的URL</static></p>\n<p><static> setColorLutResource(newUrl)<br>设置当前项目的颜色配置文件lut的URL</static></p>\n<p><static> setEnvironmentResource(newUrl)<br>设置当前项目的环境图的URL</static></p>\n<h3 id=\"alg-ui\"><a href=\"#alg-ui\" class=\"headerlink\" title=\"alg.ui\"></a>alg.ui</h3><p>Ui 实用程序</p>\n<p><static> addDockWidget(qmlFileUrl)<br>从qml文件创建小部件，然后将其作为“停靠小部件”添加到主窗口<br>Name        Type    Description<br>qmlFileUrl  string  qml file to be loaded. Can be an absolute url or a path relative to the plugin directory.</static></p>\n<p><static> addToolBarWidget(qmlFileUrl)<br>从qml文件创建小部件，然后将其作为“工具栏”添加到主窗口。<br>Name        Type    Description<br>qmlFileUrl  string  qml file to be loaded. Can be an absolute url or a path relative to the plugin directory.</static></p>\n<p><static> addWidgetToPluginToolBar(qmlFileUrl)<br>从qml文件创建小部件，然后将其添加到插件工具栏。<br>Name        Type    Description<br>qmlFileUrl  string  qml file to be loaded. Can be an absolute url or a path relative to the plugin directory.</static></p>\n<p><static> clickButton(name)<br>Simulate a click on a button.</static></p>\n<p>Name    Type    Description<br>name    string  the object name of the button</p>\n<h3 id=\"alg-subprocess\"><a href=\"#alg-subprocess\" class=\"headerlink\" title=\"alg. subprocess\"></a>alg. subprocess</h3><p>Spawn new processes. All processes are started from the plugin root directory.<br>产生新进程。,所有进程均从插件的根目录启动。</p>\n<p><static> call(command)<br>Run command. Wait for command to complete, then return the returncode.<br>运行命令,等待命令完成，然后返回返回码</static></p>\n<p>Name    Type    Description<br>command    string | Array.<string>    The command to be launched</string></p>\n<p><static> check_call(command)<br>Run command. Wait for command to complete. If the return code was zero then return, otherwise raise an error.<br>运行命令,等待命令完成。,如果返回码为零，则返回，否则返回错误。</static></p>\n<p>Name    Type    Description<br>command    string | Array.<string>    The command to be launched</string></p>\n<p><static> check_output(command)<br>Run command. Wait for command to complete and return its standard output as a string. Raise an error if the return code is non-zero.<br>运行命令。,等待命令完成并以字符串形式返回其标准输出。,如果返回码不为零，则会引发错误</static></p>\n<p>Name    Type    Description<br>command    string | Array.<string>    The command to be launched</string></p>\n<p><static> start(command [, callback])<br>Start the given command asynchronously.<br>异步启动给定命令。<br>command    string | Array.<string>        The command to be launched<br>callback    alg.subprocess~processEndedCallback    <optional><br>Callback called when the command terminates</optional></string></static></p>\n<h2 id=\"例子1\"><a href=\"#例子1\" class=\"headerlink\" title=\"例子1\"></a>例子1</h2><p>substance painter  hello world 窗口</p>\n<ul>\n<li>首先需要有一个定义主入口点的qml文件main. </li>\n</ul>\n<ol>\n<li>C:\\Users\\sunyuxiang\\Documents\\Allegorithmic\\Substance Painter\\plugins</li>\n<li>在此处创建一个名为“ HelloPlugin”的文件夹 </li>\n<li>在插件内，创建两个文件  <pre><code>* plugin.json \n* main.qml </code></pre></li>\n<li>打开main.qml文件写入</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> QtQuick <span class=\"number\">2.2</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Painter <span class=\"number\">1.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">PainterPlugin </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        Component.onCompleted: </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                alg.log.info(<span class=\"string\">\"hello world!\"</span>)<span class=\"comment\">//注意这里，alg.log.info()等于python里面的print()</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>填写JSON文件：</li>\n</ul>\n<ol>\n<li>JSON文件包含插件的元数据，在这里显示.<br><img src=\"/2020/03/14/SubstancePainter-Plugin-Study-Notes/2020-03-06-10-45-09.png\" alt><br><img src=\"/2020/03/14/SubstancePainter-Plugin-Study-Notes/2020-03-06-10-43-52.png\" alt></li>\n<li>我们知道json文件是键值对,观察一下现有插件的json文件,然后修改一后面的值改为.<br><img src=\"/2020/03/14/SubstancePainter-Plugin-Study-Notes/2020-03-06-10-47-53.png\" alt></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"description\"</span>: <span class=\"string\">\"This is a sample plugin to print hello world\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"url\"</span>: <span class=\"string\">\"https://test\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"version\"</span>: <span class=\"string\">\"0.1.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"license\"</span>: <span class=\"string\">\"&lt;a href=\\\"https://opensource.org/licenses/MIT\\\"&gt;MIT&lt;/a&gt;\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>然后打开substance painter</li>\n</ul>\n<ol>\n<li>可以看到log文件已经打印出了hello world<br><img src=\"/2020/03/14/SubstancePainter-Plugin-Study-Notes/2020-03-06-10-56-41.png\" alt></li>\n<li>plugins下的对应插件名字下面的about也可以正常工作</li>\n<li>现在 我们可以看到插件的加载，还可以看到plugin.json文件的关于窗口信息.</li>\n</ol>\n<ul>\n<li>添加一个窗口</li>\n</ul>\n<ol>\n<li>在我们的HelloPlugin目录中创建一个HelloWorldWindow.qml.</li>\n<li>编辑文件，添加代码来定义一个简单的窗口。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import AlgWidgets 1.0 &#x2F;&#x2F;窗口类导入</span><br><span class=\"line\"></span><br><span class=\"line\">AlgWindow</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 属性就像对象类型上的变量</span><br><span class=\"line\">    id: window&#x2F;&#x2F;对应 main.qml的id 这个id很有用，因为它允许我们在插件的其他位置引用该对象，访问其可见性之类的属性。  </span><br><span class=\"line\">    title: &quot;hello world window&quot;</span><br><span class=\"line\">    visible: true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>现在，我们有一个简单的窗口，但是在看到窗口之前，我们需要在main.qml文件中实例化它。 </li>\n</ul>\n<ol>\n<li>编辑main.qml<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> QtQuick <span class=\"number\">2.2</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Painter <span class=\"number\">1.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">PainterPlugin </span><br><span class=\"line\">&#123;       </span><br><span class=\"line\">        HelloWorldWindow<span class=\"comment\">// 在这里声明一个window，HelloWorldWindow指向HelloWorldWindow.qml</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                id: <span class=\"built_in\">window</span><span class=\"comment\">//对应 HelloWorldWindow.qml的id</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Component.onCompleted: </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                alg.log.info(<span class=\"string\">\"hello world!\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>现在打开substance painter 禁用插件在启用插件就会看到该窗口弹出，这是因为在加载插件时首先实例化该窗口（？），我们稍后将解决此问题。 </li>\n</ol>\n<ul>\n<li>创建一个按钮：</li>\n</ul>\n<ol>\n<li>接下来创建一个按钮来替代禁用/启用</li>\n<li>打开“ HelloWorldWindow.qml”文件。</li>\n<li>我们将添加三件事： <pre><code>* 一系列的布局元素。 \n* 一个标签。 \n* 一个按钮</code></pre></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> AlgWidgets <span class=\"number\">1.0</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//下面这些模块是UI布局需要的</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> QtQuick <span class=\"number\">2.7</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> QtQuick.Layouts <span class=\"number\">1.3</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\".\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">AlgWindow</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    id: <span class=\"built_in\">window</span><span class=\"comment\">//对应 main.qml的id</span></span><br><span class=\"line\">    title: <span class=\"string\">\"hello world window\"</span></span><br><span class=\"line\">    visible: <span class=\"literal\">true</span><span class=\"comment\">//注意这里</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ColumnLayout <span class=\"comment\">//也可以用 RowLayout这里定义了一系列的布局元素 </span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        id: horizontalLayout</span><br><span class=\"line\">        anchors.fill: parent</span><br><span class=\"line\"></span><br><span class=\"line\">        Rectangle <span class=\"comment\">//这里定义了一系列的布局元素 </span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            id: buttonBar</span><br><span class=\"line\">            anchors.left: parent.left</span><br><span class=\"line\">            anchors.right: parent.right</span><br><span class=\"line\"></span><br><span class=\"line\">            ColumnLayout<span class=\"comment\">//也可以用 RowLayout这里定义了一系列的布局元素 </span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                anchors.fill:parent</span><br><span class=\"line\"></span><br><span class=\"line\">                AlgLabel<span class=\"comment\">//一个标签</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    id: buttonLabel</span><br><span class=\"line\">                    font.pixelSize: <span class=\"number\">14</span></span><br><span class=\"line\">                    font.bold: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    text: <span class=\"string\">\"Press Me\"</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                AlgButton<span class=\"comment\">//一个按钮</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    text: <span class=\"string\">\"Say Hello!\"</span></span><br><span class=\"line\">                    <span class=\"comment\">//Layout.preferredWidth: Style.widgets.buttonWidth</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    onClicked:</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        alg.log.info(<span class=\"string\">\"hello World\"</span>)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>1. QML窗口是使用一系列嵌套的布局对象创建的-为了达到我们的目的，我们将使用列，矩形和行。 \n2. 我们需要添加其他导入语句来访问这些对象类型-QtQuick和QtQuick.Layouts。\n3. 该列表示总体布局-元素将按照添加顺序堆叠在此形状中。 \n4. 矩形允许我们使用子布局填充此列的分区。 \n5. 最后，行布局允许我们添加将按照添加顺序从左到右呈现的元素。 \n6. 在行布局中添加AlgLabel和AlgButton将两个新元素添加到我们的窗口中。 \n7. 最后，为按钮定义“ onClicked”事件将替换启动时登录main.qml的位置。 </code></pre><ul>\n<li><p>重新加载脚本：<br>可以使用painter中的Plugins-&gt; HelloPlugin-&gt; Reload  菜单即时重新加载脚本。在后面debug和尝试过程中这个超级有用，避免了我们要重新开关软件。</p>\n</li>\n<li><p>将插件添加到工具栏：</p>\n</li>\n</ul>\n<ol>\n<li>现在如果关闭插件窗口，则必须通过reload插件才能再次打开插件窗口。 </li>\n<li>让我们在工具栏上添加一个按钮，来替代每次reload调用窗口。</li>\n<li>工具栏中的按钮将非常简单，要做的就是在按下插件窗口时切换可见性。 </li>\n<li>首先，我们将通过改变visible值的true改为false,让插件窗口不会加载自动弹出。</li>\n<li>创建一个名为“ toolbar.qml ” 的新文件，并且与我们之前所做的类似,仅一排，带有一个按钮。<br>比较重要的是-插件加载时，属性变量“ windowReference”将由我们的插件填充。<br>由于windowReference在本地以null开头，因此我们稍后将对其的调用包装在try / catch块中。<br>如果脚本中其他地方的内容使我们无法创建窗口，那么这将阻止崩溃，我们可以将信息打印到控制台。 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import QtQuick 2.7</span><br><span class=\"line\">import QtQuick.controls 2.0</span><br><span class=\"line\">import AlgWidgets 1.0</span><br><span class=\"line\"></span><br><span class=\"line\">Row &#x2F;&#x2F;现在是横向的如果需要侧边的话就是AlgToolBarButton</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    property var windowReference : null</span><br><span class=\"line\"></span><br><span class=\"line\">    Button</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        id: rect</span><br><span class=\"line\">        width: 30</span><br><span class=\"line\">        height: 30</span><br><span class=\"line\"></span><br><span class=\"line\">        onClicked:</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            try </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                windowReference.visible &#x3D; true</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            catch(err) </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                alg.log.exception(err)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>最后，在“ main.qml”文件中，我们将添加一个新的工具栏小部件，该小部件将把“ toolbar.qml”实例化为工具栏上的按钮。<br>我们还使用其ID将HelloWorldWindow实例分配给工具栏按钮中的windowReference变量。 <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> QtQuick <span class=\"number\">2.2</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Painter <span class=\"number\">1.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">PainterPlugin </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 在这里声明一个window，HelloWorldWindow指向HelloWorldWindow.qml</span></span><br><span class=\"line\">        HelloWorldWindow</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                id: <span class=\"built_in\">window</span><span class=\"comment\">//对应 HelloWorldWindow.qml的id</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Component.onCompleted: </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> qmToolbar = alg.ui.addWidgetToPluginToolBar(<span class=\"string\">\"toolbar.qml\"</span>)</span><br><span class=\"line\">                qmToolbar.windowReference = <span class=\"built_in\">window</span><span class=\"comment\">//这里调用了window</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>这就是向Substance Painter添加基本插件的小例子.</li>\n<li>ref：<a href=\"http://peterhanshawart.blogspot.com/2017/11/making-hello-world-substance-painter.html\" target=\"_blank\" rel=\"noopener\">http://peterhanshawart.blogspot.com/2017/11/making-hello-world-substance-painter.html</a></li>\n</ul>\n<h2 id=\"例子2\"><a href=\"#例子2\" class=\"headerlink\" title=\"例子2\"></a>例子2</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AlgWindow</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Item</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Item </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Row</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Alglabel &#123;&#125;</span><br><span class=\"line\">                AlgTextInput &#123;&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Row</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                AlgComboBox &#123;&#125;</span><br><span class=\"line\">                AlgLabel &#123;&#125;</span><br><span class=\"line\">                AlgComboBox &#123;&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Row</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                AlgCheckBox &#123;&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        GridView</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ListElement &#123;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Item </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Row </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Rectangle &#123;&#125;</span><br><span class=\"line\">                FileDialog &#123;&#125;</span><br><span class=\"line\">                AlgButton &#123;&#125;</span><br><span class=\"line\">                AlgButton &#123;&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[{"_id":"source/_posts/Effective-Python/2020-03-07-11-15-23.png","slug":"2020-03-07-11-15-23.png","post":"ck7rbphz60003w8p4gr0aanw4","modified":0,"renderable":0},{"_id":"source/_posts/Effective-Python/2020-03-07-11-18-24.png","slug":"2020-03-07-11-18-24.png","post":"ck7rbphz60003w8p4gr0aanw4","modified":0,"renderable":0},{"_id":"source/_posts/Effective-Python/2020-03-07-11-19-36.png","slug":"2020-03-07-11-19-36.png","post":"ck7rbphz60003w8p4gr0aanw4","modified":0,"renderable":0},{"_id":"source/_posts/Effective-Python/2020-03-07-11-22-33.png","slug":"2020-03-07-11-22-33.png","post":"ck7rbphz60003w8p4gr0aanw4","modified":0,"renderable":0},{"_id":"source/_posts/Effective-Python/2020-03-07-14-29-10.png","slug":"2020-03-07-14-29-10.png","post":"ck7rbphz60003w8p4gr0aanw4","modified":0,"renderable":0},{"_id":"source/_posts/Effective-Python/2020-03-07-14-32-20.png","slug":"2020-03-07-14-32-20.png","post":"ck7rbphz60003w8p4gr0aanw4","modified":0,"renderable":0},{"_id":"source/_posts/Effective-Python/2020-03-07-14-34-59.png","slug":"2020-03-07-14-34-59.png","post":"ck7rbphz60003w8p4gr0aanw4","modified":0,"renderable":0},{"_id":"source/_posts/Maya卡顿优化/1558686550786.png","slug":"1558686550786.png","post":"ck7rbphzg000ew8p466ad5heb","modified":0,"renderable":0},{"_id":"source/_posts/Maya卡顿优化/1558686723618.png","slug":"1558686723618.png","post":"ck7rbphzg000ew8p466ad5heb","modified":0,"renderable":0},{"_id":"source/_posts/Maya卡顿优化/1558687101606.png","slug":"1558687101606.png","post":"ck7rbphzg000ew8p466ad5heb","modified":0,"renderable":0},{"_id":"source/_posts/Maya卡顿优化/1558688555512.png","slug":"1558688555512.png","post":"ck7rbphzg000ew8p466ad5heb","modified":0,"renderable":0},{"_id":"source/_posts/Houdini_Entagma_学习笔记/![](2020-03-04-13-57-42.png).png","slug":"![](2020-03-04-13-57-42.png).png","post":"ck7rbphzd0007w8p447re7wc0","modified":0,"renderable":0},{"_id":"source/_posts/Houdini_Entagma_学习笔记/2020-02-18-20-23-42.png","slug":"2020-02-18-20-23-42.png","post":"ck7rbphzd0007w8p447re7wc0","modified":0,"renderable":0},{"_id":"source/_posts/Houdini_Entagma_学习笔记/2020-02-26-17-23-21.png","slug":"2020-02-26-17-23-21.png","post":"ck7rbphzd0007w8p447re7wc0","modified":0,"renderable":0},{"_id":"source/_posts/Houdini_Entagma_学习笔记/2020-02-26-21-19-46.png","slug":"2020-02-26-21-19-46.png","post":"ck7rbphzd0007w8p447re7wc0","modified":0,"renderable":0},{"_id":"source/_posts/Houdini_Entagma_学习笔记/2020-02-27-13-57-56.png","slug":"2020-02-27-13-57-56.png","post":"ck7rbphzd0007w8p447re7wc0","modified":0,"renderable":0},{"_id":"source/_posts/Houdini_Entagma_学习笔记/2020-02-27-14-37-42.png","slug":"2020-02-27-14-37-42.png","post":"ck7rbphzd0007w8p447re7wc0","modified":0,"renderable":0},{"_id":"source/_posts/Houdini_Entagma_学习笔记/2020-03-03-19-00-29.png","slug":"2020-03-03-19-00-29.png","post":"ck7rbphzd0007w8p447re7wc0","modified":0,"renderable":0},{"_id":"source/_posts/Houdini_Entagma_学习笔记/2020-03-03-19-19-50.png","slug":"2020-03-03-19-19-50.png","post":"ck7rbphzd0007w8p447re7wc0","modified":0,"renderable":0},{"_id":"source/_posts/Houdini_Entagma_学习笔记/2020-03-03-19-30-55.png","slug":"2020-03-03-19-30-55.png","post":"ck7rbphzd0007w8p447re7wc0","modified":0,"renderable":0},{"_id":"source/_posts/Houdini_Entagma_学习笔记/2020-03-03-19-31-43.png","slug":"2020-03-03-19-31-43.png","post":"ck7rbphzd0007w8p447re7wc0","modified":0,"renderable":0},{"_id":"source/_posts/Houdini_Entagma_学习笔记/2020-03-04-14-02-15.png","slug":"2020-03-04-14-02-15.png","post":"ck7rbphzd0007w8p447re7wc0","modified":0,"renderable":0},{"_id":"source/_posts/Houdini_Entagma_学习笔记/2020-03-04-16-03-43.png","slug":"2020-03-04-16-03-43.png","post":"ck7rbphzd0007w8p447re7wc0","modified":0,"renderable":0},{"_id":"source/_posts/Houdini_Entagma_学习笔记/entagma_attributes.png","slug":"entagma_attributes.png","post":"ck7rbphzd0007w8p447re7wc0","modified":0,"renderable":0},{"_id":"source/_posts/Houdini_Entagma_学习笔记/entagma_martrix.png","slug":"entagma_martrix.png","post":"ck7rbphzd0007w8p447re7wc0","modified":0,"renderable":0},{"_id":"source/_posts/Houdini_Entagma_学习笔记/learn_houdini (1).gif","slug":"learn_houdini (1).gif","post":"ck7rbphzd0007w8p447re7wc0","modified":0,"renderable":0},{"_id":"source/_posts/Houdini_Entagma_学习笔记/learn_houdini (2).gif","slug":"learn_houdini (2).gif","post":"ck7rbphzd0007w8p447re7wc0","modified":0,"renderable":0},{"_id":"source/_posts/Houdini_Entagma_学习笔记/learn_houdini (3).gif","slug":"learn_houdini (3).gif","post":"ck7rbphzd0007w8p447re7wc0","modified":0,"renderable":0},{"_id":"source/_posts/Houdini_Entagma_学习笔记/learn_houdini (4).gif","slug":"learn_houdini (4).gif","post":"ck7rbphzd0007w8p447re7wc0","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-12-49-03.png","slug":"2020-03-08-12-49-03.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-12-49-24.png","slug":"2020-03-08-12-49-24.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-12-49-38.png","slug":"2020-03-08-12-49-38.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-12-49-58.png","slug":"2020-03-08-12-49-58.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-12-50-12.png","slug":"2020-03-08-12-50-12.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-12-50-25.png","slug":"2020-03-08-12-50-25.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-12-58-31.png","slug":"2020-03-08-12-58-31.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-13-00-54.png","slug":"2020-03-08-13-00-54.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-13-02-30.png","slug":"2020-03-08-13-02-30.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-13-08-11.png","slug":"2020-03-08-13-08-11.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-13-11-22.png","slug":"2020-03-08-13-11-22.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-13-17-01.png","slug":"2020-03-08-13-17-01.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-13-44-03.png","slug":"2020-03-08-13-44-03.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-13-44-08.png","slug":"2020-03-08-13-44-08.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-13-57-13.png","slug":"2020-03-08-13-57-13.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-14-04-16.png","slug":"2020-03-08-14-04-16.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-14-36-32.png","slug":"2020-03-08-14-36-32.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-14-37-55.png","slug":"2020-03-08-14-37-55.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-14-38-58.png","slug":"2020-03-08-14-38-58.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-15-48-53.png","slug":"2020-03-08-15-48-53.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-15-51-31.png","slug":"2020-03-08-15-51-31.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-15-52-25.png","slug":"2020-03-08-15-52-25.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-16-07-00.png","slug":"2020-03-08-16-07-00.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-16-47-04.png","slug":"2020-03-08-16-47-04.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-20-44-32.png","slug":"2020-03-08-20-44-32.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-20-49-51.png","slug":"2020-03-08-20-49-51.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-20-53-06.png","slug":"2020-03-08-20-53-06.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-21-50-50.png","slug":"2020-03-08-21-50-50.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-21-53-53.png","slug":"2020-03-08-21-53-53.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-22-01-06.png","slug":"2020-03-08-22-01-06.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-22-07-51.png","slug":"2020-03-08-22-07-51.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/GameCourse101/2020-03-08-22-12-11.png","slug":"2020-03-08-22-12-11.png","post":"ck7rbphz90005w8p4dmoj46q3","modified":0,"renderable":0},{"_id":"source/_posts/图片测试/Snipaste_2020-03-09_22-50-07.png","slug":"Snipaste_2020-03-09_22-50-07.png","post":"ck7rbpijm000sw8p40228e3ch","modified":0,"renderable":0},{"_id":"source/_posts/图片测试/Snipaste_2020-03-09_22-50-25.png","slug":"Snipaste_2020-03-09_22-50-25.png","post":"ck7rbpijm000sw8p40228e3ch","modified":0,"renderable":0},{"_id":"source/_posts/SubstancePainter-Plugin-Study-Notes/2020-03-06-10-43-52.png","slug":"2020-03-06-10-43-52.png","post":"ck7rc2b940000mop46w7jgesk","modified":0,"renderable":0},{"_id":"source/_posts/SubstancePainter-Plugin-Study-Notes/2020-03-06-10-45-09.png","slug":"2020-03-06-10-45-09.png","post":"ck7rc2b940000mop46w7jgesk","modified":0,"renderable":0},{"_id":"source/_posts/SubstancePainter-Plugin-Study-Notes/2020-03-06-10-47-53.png","slug":"2020-03-06-10-47-53.png","post":"ck7rc2b940000mop46w7jgesk","modified":0,"renderable":0},{"_id":"source/_posts/SubstancePainter-Plugin-Study-Notes/2020-03-06-10-56-41.png","slug":"2020-03-06-10-56-41.png","post":"ck7rc2b940000mop46w7jgesk","modified":0,"renderable":0},{"_id":"source/_posts/SubstancePainter-Plugin-Study-Notes/2020-03-13-21-25-23.png","slug":"2020-03-13-21-25-23.png","post":"ck7rc2b940000mop46w7jgesk","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"ck7rbphz30001w8p42pydc3eo","tag_id":"ck7rbphz80004w8p42h3i3p2p","_id":"ck7rbphze0009w8p4aadadux7"},{"post_id":"ck7rbphze000aw8p4evxx4hn9","tag_id":"ck7rbphzd0008w8p4cuwb3el2","_id":"ck7rbphzg000dw8p4ef0x7k75"},{"post_id":"ck7rbphz60003w8p4gr0aanw4","tag_id":"ck7rbphzd0008w8p4cuwb3el2","_id":"ck7rbphzh000fw8p46yfe26fb"},{"post_id":"ck7rbphzf000bw8p4gq7913ul","tag_id":"ck7rbphzd0008w8p4cuwb3el2","_id":"ck7rbphzi000iw8p4cgndeoaq"},{"post_id":"ck7rbphz90005w8p4dmoj46q3","tag_id":"ck7rbphzg000cw8p4bsafen8w","_id":"ck7rbphzi000jw8p4aj1i8r5i"},{"post_id":"ck7rbphzd0007w8p447re7wc0","tag_id":"ck7rbphzh000hw8p4bvv72vm0","_id":"ck7rbphzi000lw8p4ca3c6evf"},{"post_id":"ck7rbphzg000ew8p466ad5heb","tag_id":"ck7rbphzi000kw8p47t7b1b89","_id":"ck7rbphzj000nw8p4b4ko9wyb"},{"post_id":"ck7rbphzh000gw8p43zxrenen","tag_id":"ck7rbphzi000mw8p48ijqd6pa","_id":"ck7rbphzj000ow8p4f9ffdmvg"},{"post_id":"ck7rbpij8000pw8p4cd069lax","tag_id":"ck7rbpija000qw8p4e64ugqt1","_id":"ck7rbpijb000rw8p4669ma19p"},{"post_id":"ck7rbpijm000sw8p40228e3ch","tag_id":"ck7rbpija000qw8p4e64ugqt1","_id":"ck7rbpijm000tw8p4g8ia4rz8"},{"post_id":"ck7rc2b940000mop46w7jgesk","tag_id":"ck7rc2b990001mop48zt4hpxd","_id":"ck7rc2b9c0002mop47p5fbmrb"},{"post_id":"ck7rbphzb0006w8p4cyb08wq9","tag_id":"ck7rc5bzg0000ekp46t4lbb4c","_id":"ck7rc5bzk0001ekp432gke7yp"}],"Tag":[{"name":"blender","_id":"ck7rbphz80004w8p42h3i3p2p"},{"name":"python","_id":"ck7rbphzd0008w8p4cuwb3el2"},{"name":"computer graphics","_id":"ck7rbphzg000cw8p4bsafen8w"},{"name":"Houdini","_id":"ck7rbphzh000hw8p4bvv72vm0"},{"name":"Maya","_id":"ck7rbphzi000kw8p47t7b1b89"},{"name":"maya","_id":"ck7rbphzi000mw8p48ijqd6pa"},{"name":"hexo","_id":"ck7rbpija000qw8p4e64ugqt1"},{"name":"SubstancePainter","_id":"ck7rc2b990001mop48zt4hpxd"},{"name":"Git","_id":"ck7rc5bzg0000ekp46t4lbb4c"}]}}